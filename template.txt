// DO NOT EDIT THIS FILE !
// It is generated by gobatis tool, source from {{.Source}}.
package {{.Package}}

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strconv"
	"github.com/wothing/log"
	{{- range .Imports}}
	{{.}}
	{{- end }}
)

type {{.Name}} struct{}

{{- range .Methods }}
func (*{{$.Name}}) {{.Name}}({{.ParamsExpr}})({{.ResultsExpr}}) {
	var (
		stmt string
		buf  bytes.Buffer
		args []interface{}
	)

	{{- range .Fragments}}
		{{if .Cond }} if {{.Cond}} { {{end}}
		stmt = `{{.Stmt}} `
		{{- range .Args}}
			{{- if .IsIn}}
				stmt = strings.Replace(stmt, "${"+"{{.Var}}"+"}",
					strings.Repeat(",%s", len({{.Var}}))[1:], -1)
				for _, s := range {{.Var}} {
					{{- if .Type.AliasFor}}
						args = append(args, {{.Type.AliasFor}}(s))
					{{- else}}
						args = append(args, s)
					{{- end}}
				}
			{{- else if .Type.AliasFor}}
				args = append(args, {{.Type.AliasFor}}({{.Var}}))
			{{- else if not .Type.IsComplex}}
				args = append(args, {{.Var}})
			{{- else}}
				var {{.AnotherVar}} []byte
				{{.AnotherVar}}, err = json.Marshal({{.Var}})
				if err != nil {
					log.Error(err)
					return
				}
				args = append(args, {{.AnotherVar}})
			{{- end}}
		{{- end}}
		buf.WriteString(stmt)
		{{if .Cond }} } {{end}}
	{{- end}}

	var ph []interface{}
	for i := range args {
		ph = append(ph, "$"+strconv.Itoa(i+1))
	}

	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)

	{{if eq .OpType "insert"}}
		{{if .Dest}}
			var dest []interface{}
			{{range .Dest}}
				{{if not .Type.IsComplex}}
					dest = append(dest, &{{.Var}})
				{{else}}
					var {{.AnotherVar}} []byte
					dest = append(dest, &{{.Var}})
				{{end}}
			{{end}}
			err = {{.Tx}}.QueryRow(query, args...).Scan(dest...)
			if err != nil {
				log.Error(err)
				log.Error(query)
				log.Error(args...)
				return
			}
			{{range .Dest}}
				{{if .Type.IsComplex}}
					err = json.Unmarshal({{.AnotherVar}}, {{.AddrExpr}})
					if err != nil {
						log.Error(err)
						return
					}
				{{end}}
			{{end}}
			return nil
		{{else}}
			res, err := {{.Tx}}.Exec(query, args...)
			if err != nil {
				log.Error(err)
				log.Error(query)
				log.Error(args...)
				return 0, err
			}
			return res.RowsAffected()
		{{end}}

	{{else if eq .OpType "update"}}
		res, err := {{.Tx}}.Exec(query, args...)
		if err != nil {
			log.Error(err)
			log.Error(query)
			log.Error(args...)
			return 0, err
		}
		return res.RowsAffected()

	{{else if eq .OpType "delete"}}
		res, err := {{.Tx}}.Exec(query, args...)
		if err != nil {
			log.Error(err)
			log.Error(query)
			log.Error(args...)
			return 0, err
		}
		return res.RowsAffected()

	{{- else if eq .OpType "get"}}
		var dest []interface{}
		{{- if .Return.Type.IsComplex}}
			{{.Return.Var}} = {{.Return.Type.MakeExpr}}
		{{- end}}
		{{- range .Dest}}
			{{- if not .Type.IsComplex}}
				dest = append(dest, {{.AddrExpr}})
			{{- else}}
				var {{.AnotherVar}} []byte
				dest = append(dest, &{{.AnotherVar}})
			{{- end}}
		{{- end}}
		err = {{.Tx}}.QueryRow(query, args...).Scan(dest...)
		if err != nil {
			log.Error(err)
			log.Error(query)
			log.Error(args...)
			return
		}
		{{- range .Dest}}
			{{- if .Type.IsComplex}}
				{{.Var}} = {{.Type.MakeExpr}}
				err = json.Unmarshal({{.AnotherVar}}, {{.AddrExpr}})
				if err != nil {
					log.Error(err)
					return
				}
			{{- end}}
		{{- end}}
		return

	{{- else if eq .OpType "list"}}
		rows, err := {{.Tx}}.Query(query, args...)
		if err != nil {
			log.Error(err)
			return nil, err
		}
		defer rows.Close()

		var data {{.Return.Type}}
		for rows.Next() {
			x := {{.Return.Type.Elem.MakeExpr}}
			data = append(data, x)

			var dest []interface{}
			{{- range .Dest}}
				{{- if not .Type.IsComplex}}
					dest = append(dest, &{{.Var}})
				{{- else}}
					var {{.AnotherVar}} []byte
					dest = append(dest, &{{.AnotherVar}})
				{{- end}}
			{{- end}}
			err = rows.Scan(dest...)
			if err != nil {
				log.Error(err)
				return nil, err
			}
			{{- range .Dest}}
				{{- if .Type.IsComplex}}
					{{.Var}} = {{.Type.MakeExpr}}
					err = json.Unmarshal({{.AnotherVar}}, {{.AddrExpr}})
					if err != nil {
						log.Error(err)
						return
					}
				{{- end}}
			{{- end}}
		}
		if err = rows.Err(); err != nil {
			log.Error(err)
			return nil, err
		}

		return data, nil
	{{- end}}
}
{{- end}}
