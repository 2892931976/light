// DO NOT EDIT THIS FILE !
// It is generated by gobatis tool, source from {{.Source}}.
package {{.Package}}

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gotips/log"
	{{range .Imports}}
	{{.}}
	{{end }}
)

type {{ .Name }} struct{}

{{range .Methods }}

func (*{{ $.Name }}) {{.Signature}} {
	var (
		buf  bytes.Buffer
		args []interface{}
		err  error
	)

	{{range .Fragments}}
		{{if .Cond }} if {{.Cond}} { {{end}}
			stmt := `{{.Stmt}} `
			{{range .Args}}
				{{if .IsIn}}
					stmt = strings.Replace(stmt, "(%s)",
						strings.Repeat(",%s", len({{.Var}}))[1:], -1)
					for _, s := range {{.Var}} {
						args = append(args, int32(s))
					}
				{{else}}
					{{.UnderlineVar}}, err := json.Marshal({{.Var}})
					if err != nil {
						log.Error(err)
						return
					}
					args = append(args, {{.Var}})
				{{end}}
			{{end}}
			buf.WriteString(stmt)
		{{if .Cond }} } {{end}}
	{{end}}

	var ph []interface{}
	for i := range args {
		ph = append(ph, "$"+strconv.Itoa(i+1))
	}

	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)

	{{if eq .Type "Insert"}}
		{{if .Dest}}
			var dest []interface{}
			{{range .Dest}}
				{{if .IsPrimitive}}
					dest = append(dest, {{.Var}})
				{{else}}
					var {{.UnderlineVar}} []byte
					dest = append(dest, {{.Var}})
				{{end}}
			{{end}}
			err = {{.Tx}}.QueryRow(stmt, args...).Scan(dest...)
			if err != nil {
				log.Error(err)
				log.Error(stmt)
				log.Error(args...)
				return
			}
			{{range .Dest}}
				{{if not .IsPrimitive}}
					err := json.Unmarshal({{.UnderlineVar}}, {{.Var}})
					if err != nil {
						log.Error(err)
						return
					}
				{{end}}
			{{end}}
			return nil
		{{else}}
			res, err := {{.Tx}}.Exec(stmt, args...)
			if err != nil {
				log.Error(err)
				log.Error(stmt)
				log.Error(args...)
				return 0, err
			}
			return res.RowsAffected()
		{{end}}

	{{else if eq .Type "Update"}}
		res, err := {{.Tx}}.Exec(stmt, args...)
		if err != nil {
			log.Error(err)
			log.Error(stmt)
			log.Error(args...)
			return 0, err
		}
		return res.RowsAffected()

	{{else if eq .Type "Delete"}}
		res, err := {{.Tx}}.Exec(stmt, args...)
		if err != nil {
			log.Error(err)
			log.Error(stmt)
			log.Error(args...)
			return 0, err
		}
		return res.RowsAffected()

	{{else if eq .Type "Count"}}
		var _x {{.ReturnType.Type}}
		err = {{.Tx}}.QueryRow(stmt, args...).Scan(&_x)
		if err != nil {
			log.Error(err)
			log.Error(stmt)
			log.Error(args...)
			return 0, err
		}
		return _x, nil

	{{else if eq .Type "Get"}}
		var dest []interface{}
		{{range .Dest}}
			{{if .IsPrimitive}}
				dest = append(dest, {{.Var}})
			{{else}}
				var {{.UnderlineVar}} []byte
				dest = append(dest, {{.Var}})
			{{end}}
		{{end}}
		err = {{.Tx}}.QueryRow(stmt, args...).Scan(dest...)
		if err != nil {
			log.Error(err)
			log.Error(stmt)
			log.Error(args...)
			return
		}
		{{range .Dest}}
			{{if not .IsPrimitive}}
				err := json.Unmarshal({{.UnderlineVar}}, {{.Var}})
				if err != nil {
					log.Error(err)
					return
				}
			{{end}}
		{{end}}
		return

	{{if eq .Type "List"}}
		rows, err := tx.Query(query, args...)
		if err != nil {
			log.Error(err)
			return nil, err
		}
		defer rows.Close()

		data := {{.ReturnType.Type}}{}
		for rows.Next() {
			var x {{.ReturnType.Elem}}
			data = append(data, &x)

			var dest []interface{}
			{{range .Dest}}
				{{if .IsPrimitive}}
					dest = append(dest, {{.Var}})
				{{else}}
					var {{.UnderlineVar}} []byte
					dest = append(dest, {{.Var}})
				{{end}}
			{{end}}
			err = rows.Scan(dest...)
			if err != nil {
				log.Error(err)
				return nil, err
			}
			{{range .Dest}}
				{{if not .IsPrimitive}}
					err := json.Unmarshal({{.UnderlineVar}}, {{.Var}})
					if err != nil {
						log.Error(err)
						return
					}
				{{end}}
			{{end}}
		}
		if err = rows.Err(); err != nil {
			log.Error(err)
			return nil, err
		}

		return data, nil
	{{end}}
}
{{end}}
