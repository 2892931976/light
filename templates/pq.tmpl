
// DO NOT EDIT THIS FILE!
// It is generated by `light` tool by source `{{.Source}}` at {{timestamp}}.

package {{.Name}}

import (
    "bytes"
    "encoding/json"
    "fmt"
    "github.com/arstd/log"
    {{range $k, $v := .Imports}}
    {{$k}} "{{$v}}"{{end}}
)

{{- range .Interfaces}}
    {{- $itf := .}}

    type {{$itf.Name}}Impl struct{}

    {{- range .Methods}}
        // {{.Kind}}: {{.Doc}}
        func (*{{$itf.Name}}Impl) {{.Name}}({{.ParamsExpr}})({{.ResultsExpr}}) {
            var (
                prepare string
                buf  bytes.Buffer
                args []interface{}
            )

            {{- block "fragments" .Fragments}}
                {{- range .}}
                    // {{.Stmt}}
                    {{- if .Range}}
                        for _, {{.Iterator.Var}} := range {{.Range.Var}} {
                            var prepare string
                    {{- else if .Cond}}
                        if {{.Cond}} {
                            var prepare string
                    {{- end}}

                    {{- if .Prepare}}
                        prepare = `{{.Prepare}}`
                    {{- end}}

                    {{- range .Args}}
                        args = append(args, {{.Var}})
                    {{- end}}

                    {{- template "fragments" .Fragments}}
                    buf.WriteString(prepare)

                    {{- if .Range}}
                        buf.WriteString("{{.Seperator}}")
                        }
                        buf.Truncate(buf.Len()-len("{{.Seperator}}"))
                    {{- else if .Cond}}
                        }
                    {{- end}}

                {{end}}{{/* end range fragments */}}
            {{- end}}{{/* end fragments block */}}

            ph := make([]string, len(args))
            for i := range args {
                ph[i] = fmt.Sprintf("$%d", i+1)
            }
            query := fmt.Sprintf(buf.string(), ph...)

            log.Debug(query)
            log.Debug(args...)

            {{- if eq .Kind "insert"}}
                var dest []interface{}



            {{/* end insert method */}}
            {{- else if or (eq .Kind "batch") (eq .Kind "update")}}
                res, err := db.Exec(query, args...)
                if err != nil {
                    log.Error(query)
                    log.Error(args...)
                    log.Error(err)
                }
                return res.RowsAffected()

            {{/* end batch method */}}
            {{- else if eq .Kind "get"}}
                // TODO get

            {{/* end batch method */}}
            {{- else if eq .Kind "list"}}
                // TODO list


            {{/* end batch method */}}
            {{- else if eq .Kind "page"}}
                // TODO page

            {{/* end page method */}}
            {{end}}
        }
    {{- end}}{{/* end range methods */}}

{{- end}}{{/* end range interfaces */}}
