// DO NOT EDIT THIS FILE !
// It is generated by persis tool, source from demo.go.
package persist

import (
	"bytes"
	"encoding/json"
	"github.com/arstd/persist/examples/domain"
	"github.com/gotips/log"
)

var _ = json.Marshal

type DemoPersist struct{}

func (*DemoPersist) Add(d *domain.Demo) (err error) {

	d_DemoStruct, err := json.Marshal(d.DemoStruct)
	if err != nil {
		log.Errorf("marshal(%s) error: %s", d.DemoStruct, err)
	}

	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

	query.WriteString(" insert into demos(demo_name, demo_status, demo_struct) values($1,$2,$3) returning id")
	args = append(args, d.DemoName, d.DemoStatus, d_DemoStruct)

	log.Debugf("%s", query)
	log.JSONIndent(args...)
	x := d
	dest := []interface{}{&x.Id}
	err = db.DB.QueryRow(query.String(), args...).Scan(dest...)
	if err != nil {
		log.Errorf("insert(%s, %#v) error: %s", query, args, err)
		return err
	}
	return nil
}

func (*DemoPersist) Update(d *domain.Demo) (err error) {

	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

	query.WriteString(" update demos set demo_name=$1 where id=$2")
	args = append(args, d.DemoName, d.Id)

	log.Debugf("%s", query)
	log.JSONIndent(args...)
	res, err := db.DB.Exec(query.String(), args...)
	if err != nil {
		log.Errorf("update(%s, %#v) error: %s", query, args, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("update(%s, %#v) error: %s", query, args, err)
		return err
	} else if a != 1 {
		log.Errorf("update(%s, %#v) expected affected 1 row, but actual affected %d rows",
			query, args, a)
		return fmt.Errorf("expected affected 1 row, but actual affected %d rows", a)
	}
	return nil
}

func (*DemoPersist) Get(id string) (d *domain.Demo, err error) {

	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

	query.WriteString(" select id, demo_name, demo_status, demo_struct from demos where id=$1")
	args = append(args, id)

	log.Debugf("%s", query)
	log.JSONIndent(args...)
	x := &domain.Demo{}

	dest := []interface{}{&x.Id, &x.DemoName, &x.DemoStatus, &x_DemoStruct}

	err = db.DB.QueryRow(query.String(), args...).Scan(dest...)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return nil, err
	}

	x.DemoStruct = &bytes.Buffer{}
	err = json.Unmarshal(x_DemoStruct, x.DemoStruct)
	if err != nil {
		log.Errorf("unmarshal(%s) error: %s", x_DemoStruct, err)
	}

	return x, nil
}

func (*DemoPersist) List(d *domain.Demo) (ds []*domain.Demo, err error) {

	d_DemoStruct, err := json.Marshal(d.DemoStruct)
	if err != nil {
		log.Errorf("marshal(%s) error: %s", d.DemoStruct, err)
	}

	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

	query.WriteString(" select id, demo_name, demo_status, demo_struct from demos where ")
	args = append(args)

	if d.Id != "" {
		query.WriteString(" id<=$1 and")
		args = append(args, d.Id)
	}

	query.WriteString("  demo_name=$2 ")
	args = append(args, d.DemoName)

	if d.DemoStatus != "" {
		query.WriteString(" and demo_status=$3")
		args = append(args, d.DemoStatus)
	}

	query.WriteString("  and demo_struct=$4")
	args = append(args, d_DemoStruct)

	log.Debugf("%s", query)
	log.JSONIndent(args...)
	rows, err := db.DB.Query(query.String(), args...)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var x domain.Demo
		ds = append(ds, &x)

		var x_DemoStruct []byte
		dest := []interface{}{&x.Id, &x.DemoName, &x.DemoStatus, &x_DemoStruct}

		err = rows.Scan(dest...)
		if err != nil {
			log.Errorf("scan rows for query(%s, %#v) error: %s", query, args, err)
			return nil, err
		}

		x.DemoStruct = &bytes.Buffer{}
		err = json.Unmarshal(x_DemoStruct, x.DemoStruct)
		if err != nil {
			log.Errorf("unmarshal(%s) error: %s", x_DemoStruct, err)
		}

	}
	if err = rows.Err(); err != nil {
		log.Errorf("scan rows for query(%s, %#v) last error: %s", query, args, err)
		return nil, err
	}
	return ds, nil
}

func (*DemoPersist) Delete(id string) (err error) {

	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

	query.WriteString(" delete from demos where id=$1")
	args = append(args, id)

	log.Debugf("%s", query)
	log.JSONIndent(args...)
	res, err := db.DB.Exec(query.String(), args...)
	if err != nil {
		log.Errorf("delete(%s, %#v) error: %s", query, args, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("delete(%s, %#v) error: %s", query, args, err)
		return err
	} else if a != 1 {
		log.Errorf("delete(%s, %#v) expected affected 1 row, but actual affected %d rows",
			query, args, a)
		return fmt.Errorf("expected affected 1 row, but actual affected %d rows", a)
	}
	return nil
}
