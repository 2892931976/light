// DO NOT EDIT THIS FILE !
// It is generated by persis tool, source from {{.Source}}.
package {{.Package}}

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gotips/log"
	{{- range .Imports}}
	{{.}}{{- end }}
)

var _ = json.Marshal
var _ = fmt.Sprintf

type {{ .Name }} struct{}

{{- range .Methods }}

func (*{{ $.Name }}) {{ .Name }}({{range $i,$vt := .Params}}{{if $i | ne 0}}, {{end}}{{$vt.Var}} {{$vt.Slice}}{{$vt.Star}}{{$vt.Package}}{{and $vt.Package "."}}{{$vt.Type}}{{ end }}) ({{range $i,$vt := .Returns}}{{if $i | ne 0}}, {{end}}{{$vt.Var}} {{$vt.Slice}}{{$vt.Star}}{{$vt.Package}}{{and $vt.Package "."}}{{$vt.Type}}{{ end }}) {
	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

{{- range .Fragments}}
{{if .Cond }}
	if {{.Cond}} {
{{- end}}
		query.WriteString("{{.Stmt}} ")
{{- range $i, $vt := .Args}}
	{{- if eq .SQLIn true}}
		{{.Scope}}_{{.Var}} := fmt.Sprintf("%v", {{.Scope}}{{and .Scope "."}}{{.Var}})
		args = append(args, "{"+{{.Scope}}_{{.Var}}[1:len({{.Scope}}_{{.Var}})-1]+"}")

	{{- else if .Package }}
		{{.Scope}}{{and .Scope "_"}}{{.Var}}, err := json.Marshal({{.Scope}}{{and .Scope "."}}{{.Var}})
		if err != nil {
			log.Errorf("marshal(%#v) error: %s",{{.Scope}}.{{.Var}}, err)
		}
		args = append(args, {{$vt.Scope}}{{$vt.Concat}}{{$vt.Var}})

	{{- else }}
		args = append(args, {{$vt.Scope}}{{and .Scope "."}}{{$vt.Var}})
	{{- end }}
{{- end }}
	{{- if .Cond}}
	}{{end}}
{{- end}}

	log.Debug(query.String())
	log.Debug(args...)

{{- if .Type | eq "add" }}
	{{- if .Unmarshals}}
	var {{range $i, $vt := .Unmarshals}}{{if ne $i 0}}, {{end}}{{or $vt.Scope "x"}}{{$vt.Concat}}{{$vt.Var}}{{end}} []byte
	{{- end}}
	dest := []interface{}{ {{range $i, $vt := .Scans}}{{if ne $i 0}}, {{end}}&{{or $vt.Scope "x"}}{{$vt.Concat}}{{$vt.Var}}{{end}} }
	err = {{.Tx}}.QueryRow(query.String(), args...).Scan(dest...)
	if err != nil {
		log.Errorf("insert(%s, %#v) error: %s", query, args, err)
		return err
	}
	return nil

{{- else if .Type | eq "modify"}}
	res, err := {{.Tx}}.Exec(query.String(), args...)
	if err != nil {
		log.Errorf("update(%s, %#v) error: %s", query, args, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("update(%s, %#v) error: %s", query, args, err)
		return err
	} else if a != 1 {
		log.Errorf("update(%s, %#v) expected affected 1 row, but actual affected %d rows",
			query, args, a)
		return fmt.Errorf("expected affected 1 row, but actual affected %d rows", a)
	}
	return nil

{{- else if .Type | eq "remove"}}
	res, err := {{.Tx}}.Exec(query.String(), args...)
	if err != nil {
		log.Errorf("delete(%s, %#v) error: %s", query, args, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("delete(%s, %#v) error: %s", query, args, err)
		return err
	} else if a != 1 {
		log.Errorf("delete(%s, %#v) expected affected 1 row, but actual affected %d rows",
			query, args, a)
		return fmt.Errorf("expected affected 1 row, but actual affected %d rows", a)
	}
	return nil

{{- else if .Type | eq "get"}}
	var x {{.Result.Package}}{{and .Result.Package "."}}{{.Result.Type}}
	var {{range $i, $vt := .Unmarshals}}{{if ne $i 0}}, {{end}}{{or $vt.Scope "x"}}{{$vt.Concat}}{{$vt.Var}}{{end}} []byte
	dest := []interface{}{ {{range $i, $vt := .Scans}}{{if ne $i 0}}, {{end}}&{{or $vt.Scope "x"}}{{$vt.Concat}}{{$vt.Var}}{{end}} }

	err := {{.Tx}}.QueryRow(query.String(), args...).Scan(dest...)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return nil, err
	}

	{{- range .Unmarshals}}
		  	{{or .Scope "x"}}{{and .Concat "."}}{{.Var}} = new({{.Package}}{{and .Package "."}}{{.Type}})
			err = json.Unmarshal({{or .Scope "x"}}{{.Concat}}{{.Var}}, {{or .Scope "x"}}{{and .Concat "."}}{{.Var}})
			if err != nil {
				log.Errorf("unmarshal(%s) error: %s",{{or .Scope "x"}}{{.Concat}}{{.Var}}, err)
			}
	{{- end}}
	return &x, nil

{{- else if .Type | eq "count"}}
	var count int
	err := {{.Tx}}.QueryRow(query.String(), args...).Scan(&count)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return 0, err
	}
	return count, nil

{{- else if .Type | eq "list"}}
	rows, err := {{.Tx}}.Query(query.String(), args...)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return nil, err
	}
	defer rows.Close()

    var xs {{.Result.Slice}}{{.Result.Star}}{{.Result.Package}}{{and .Result.Package "."}}{{.Result.Type}}
	for rows.Next() {
		var x {{.Result.Package}}{{and .Result.Package "."}}{{.Result.Type}}
		xs = append(xs, &x)

		var {{range $i, $vt := .Unmarshals}}{{if ne $i 0}}, {{end}}{{or $vt.Scope "x"}}{{$vt.Concat}}{{$vt.Var}}{{end}} []byte
        dest := []interface{}{ {{range $i, $vt := .Scans}}{{if ne $i 0}}, {{end}}&{{or $vt.Scope "x"}}{{$vt.Concat}}{{$vt.Var}}{{end}} }

		err = rows.Scan(dest...)
		if err != nil {
			log.Errorf("scan rows for query(%s, %#v) error: %s", query, args, err)
			return nil, err
		}

		{{- range .Unmarshals}}
	  	{{or .Scope "x"}}{{and .Concat "."}}{{.Var}} = new({{.Package}}{{and .Package "."}}{{.Type}})
		err = json.Unmarshal({{or .Scope "x"}}{{.Concat}}{{.Var}}, {{or .Scope "x"}}{{and .Concat "."}}{{.Var}})
		if err != nil {
			log.Errorf("unmarshal(%s) error: %s",{{or .Scope "x"}}{{.Concat}}{{.Var}}, err)
		}
		{{- end}}
	}
	if err = rows.Err(); err != nil {
		log.Errorf("scan rows for query(%s, %#v) last error: %s", query, args, err)
		return nil, err
	}
	return xs, nil

{{- end}}
}
{{- end}}
