package generator

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/arstd/light/goparser"
)

func writeHeader(store *goparser.Store) *bytes.Buffer {
	var header bytes.Buffer

	w := header.WriteString
	wln := func(s string) { header.WriteString(s + "\n") }

	wln("// !!! DO NOT EDIT THIS FILE. It is generated by `light` tool.")
	wln("// @light: https://github.com/arstd/light")

	file := store.Source
	gopath := os.Getenv("GOPATH")
	for _, v := range strings.Split(gopath, string(filepath.ListSeparator)) {
		if strings.HasPrefix(file, v) {
			file = file[len(v)+5:]
		}
	}
	wln("// Generate from source: " + file)
	w("package ")
	wln(store.Package)
	wln(`import (
		"bytes"
		"fmt"
		"github.com/arstd/light/null"`)
	if store.Log {
		wln(`"github.com/arstd/log"`)
	}
	for k, v := range store.Imports {
		w(v)
		w(` "`)
		w(k)
		wln(`"`)
	}
	wln(")")

	if store.Name[0] == 'I' {
		name := store.Name[1:]
		fmt.Fprintf(&header, "var %s I%s = new(%sStore)\n", name, name, name)
	} else {
		name := store.Name
		fmt.Fprintf(&header, "var Default%s %s = new(%sStore)\n", name, name, name)
	}

	fmt.Fprintf(&header, "type %sStore struct{}\n", store.Name)

	return &header
}
