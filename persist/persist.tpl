// DO NOT EDIT THIS FILE !
// It is generated by persis tool, source from {{.Source}}.
package {{.Package}}

import (
	"encoding/json"
	"github.com/gotips/log"
	{{- range .Imports}}
	{{.}}{{- end }}
)

var _ = json.Marshal

type {{ .Name }} struct{}

{{- range .Methods }}

func (*{{ $.Name }}) {{ .Name }}({{range $i,$param := .Params}}{{if $i | ne 0}}, {{end}}{{$param.Name}} {{$param.Type}}{{ end }}) ({{range $i,$param := .Returns}}{{if $i | ne 0}}, {{end}}{{$param.Name}} {{$param.Type}}{{ end }}) {

{{ $in := .In}}
{{range .Marshals}}
	{{$in}}_{{.}}, err := json.Marshal({{$in}}.{{.}})
	if err != nil {
		log.Errorf("marshal(%s) error: %s",{{$in}}.{{.}}, err)
	}
{{end}}
	query, args := bytes.NewBuffer([]byte{}), []interface{}{}

{{range .Fragments}}
{{if ne .Cond ""}}if {{.Cond}} { {{end}}
			query.WriteString(" {{.Stmt}}")
			args = append(args, {{range $i, $arg := .Args}}{{ if ne $i 0 }}, {{end}}{{$arg.Var}}{{ end }})
{{if ne .Cond  ""}} } {{end}}

{{end}}

		log.Debugf("%s", query)
		log.JSONIndent(args...)


{{- if .Type | eq "add" }}
	x := {{ .Result}}
	dest := []interface{}{ {{range $i, $scan := .Scans}}{{if ne $i 0}}, {{end}}&{{$scan}}{{end}} }
	err = db.QueryRow(query.String(), args...).Scan(dest...)
	if err != nil {
		log.Errorf("insert(%s, %#v) error: %s", query, args, err)
		return err
	}
	return nil

{{- else if .Type | eq "modify"}}
	res, err := db.Exec(query.String(), args...)
	if err != nil {
		log.Errorf("update(%s, %#v) error: %s", query, args, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("update(%s, %#v) error: %s", query, args, err)
		return err
	} else if a != 1 {
		log.Errorf("update(%s, %#v) expected affected 1 row, but actual affected %d rows",
			query, args, a)
		return err
	}
	return nil

{{- else if .Type | eq "remove"}}
	res, err := db.Exec(query.String(), args...)
	if err != nil {
		log.Errorf("delete(%s, %#v) error: %s", query, args, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("delete(%s, %#v) error: %s", query, args, err)
		return err
	} else if a != 1 {
		log.Errorf("delete(%s, %#v) expected affected 1 row, but actual affected %d rows",
			query, args, a)
		return err
	}
	return nil

{{- else if .Type | eq "get"}}
	x := &{{.ResultType}}{}
    var {{range $i, $scan := .Unmarshals}}{{if ne $i 0}}, {{end}}x_{{$scan}}{{end}} []byte
    dest := []interface{}{ {{range $i, $scan := .Scans}}{{if ne $i 0}}, {{end}}&{{$scan}}{{end}} }

	err = db.QueryRow(query.String(), args...).Scan(dest...)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return nil, err
	}
		{{$returnType := .ResultType}}
		   {{range .Unmarshals1}}
		   x.{{.Name}} = {{.Type}}{}
		 	err = json.Unmarshal(x_{{.Name}}, x.{{.Name}})
		   if err != nil {
			   log.Errorf("unmarshal(%s) error: %s",x_{{.Name}}, err)
		   }
		   {{end}}
	return x, nil

{{- else if .Type | eq "list"}}
	rows, err := db.Query(query.String(), args...)
	if err != nil {
		log.Errorf("query(%s, %#v) error: %s", query, args, err)
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var x {{.ResultType}}
		{{.Result}} = append({{.Result}}, &x)

		var {{range $i, $scan := .Unmarshals}}{{if ne $i 0}}, {{end}}x_{{$scan}}{{end}} []byte
		dest := []interface{}{ {{range $i, $scan := .Scans}}{{if ne $i 0}}, {{end}}&{{$scan}}{{end}} }

		err = rows.Scan(dest...)
		if err != nil {
			log.Errorf("scan rows for query(%s, %#v) error: %s", query, args, err)
			return nil, err
		}


	   {{$returnType := .ResultType}}
		  {{range .Unmarshals1}}
		  x.{{.Name}} = {{.Type}}{}
		   err = json.Unmarshal(x_{{.Name}}, x.{{.Name}})
		  if err != nil {
			  log.Errorf("unmarshal(%s) error: %s",x_{{.Name}}, err)
		  }
		  {{end}}

	}
	if err = rows.Err(); err != nil {
		log.Errorf("scan rows for query(%s, %#v) last error: %s", query, args, err)
		return nil, err
	}
	return {{.Result}}, nil

{{- end}}
}
{{- end}}
