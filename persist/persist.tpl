// DO NOT EDIT THIS FILE !
// It is generated by persis tool, source from {{.Source}}.
package {{.Package}}

import (
	"encoding/json"

	"github.com/gotips/log"
	{{- range .Imports}}
	{{.}}{{- end }}
)

var _ = json.Marshal

type {{ .Name }} struct{}

{{- range .Methods }}

func (*{{ $.Name }}) {{ .Name }}({{range $i,$param := .Params}}{{if $i | ne 0}}, {{end}}{{$param.Name}} {{$param.Type}}{{ end }}) ({{range $i,$param := .Returns}}{{if $i | ne 0}}, {{end}}{{$param.Name}} {{$param.Type}}{{ end }}) {
	q := `{{ .Prefix }}`

		{{ $in := .In}}
		{{range .Marshals}}
		{{$in}}_{{.}}, err := json.Marshal({{$in}}.{{.}})
		if err != nil {
			log.Errorf("marshal(%s) error: %s",{{$in}}.{{.}}, err)
		}
		{{end}}

{{- if .Type | eq "add" }}
	x := {{ .Result}}
	err = db.QueryRow(q{{range .Args}}, {{.}}{{ end }}).Scan({{range $i, $r := .Scans}}{{ if ne $i 0 }}, {{end}}&{{ $r}}{{ end }})
	if err != nil {
		log.Errorf("insert(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return err
	}
	return nil

{{- else if .Type | eq "modify"}}
	res, err := db.Exec(q{{range .Args}}, {{.}}{{ end }})
	if err != nil {
		log.Errorf("update(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("update(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return err
	} else if a != 1 {
		log.Errorf("update(%s{{range .Args}}, %s{{ end }}) expected affected 1 row, but actual affected %d rows",
			q{{range .Args}}, {{.}}{{ end }}, a)
		return err
	}
	return nil

{{- else if .Type | eq "remove"}}
	res, err := db.Exec(q{{range .Args}}, {{.}}{{ end }})
	if err != nil {
		log.Errorf("delete(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return err
	}
	a, err := res.RowsAffected()
	if err != nil {
		log.Errorf("delete(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return err
	} else if a != 1 {
		log.Errorf("delete(%s{{range .Args}}, %s{{ end }}) expected affected 1 row, but actual affected %d rows",
			q{{range .Args}}, {{.}}{{ end }}, a)
		return err
	}
	return nil

{{- else if .Type | eq "get"}}
	{{ $Result := .Result}}
	x := &{{.ResultType}}{}

			   {{range .Unmarshals}}
			   var x_{{.}} []byte
			   {{end}}
	err = db.QueryRow(q{{range .Args}}, {{.}}{{ end }}).
		Scan({{range $i, $r := .Scans}}{{ if ne $i 0 }}, {{end}}&{{$r}}{{ end }})
	if err != nil {
		log.Errorf("query(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return nil, err
	}
		{{$returnType := .ResultType}}
		   {{range .Unmarshals}}
		   x.{{.}} = &{{$returnType}}{}
		 	err = json.Unmarshal(x_{{.}}, x.{{.}})
		   if err != nil {
			   log.Errorf("unmarshal(%s) error: %s",x_{{.}}, err)
		   }
		   {{end}}
	return x, nil

{{- else if .Type | eq "list"}}
	rows, err := db.Query(q{{range .Args}}, {{.}}{{ end }})
	if err != nil {
		log.Errorf("query(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var x {{.ResultType}}
		{{.Result}} = append({{.Result}}, &x)


					   {{range .Unmarshals}}
					   var x_{{.}} []byte
					   {{end}}
		err = rows.Scan({{range $i, $r := .Scans}}{{ if ne $i 0 }}, {{end}}&{{$r}}{{ end }})
		if err != nil {
			log.Errorf("scan rows for query(%s{{range .Args}}, %s{{ end }}) error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
			return nil, err
		}

		{{ $out := .Result}}
	   {{range .Unmarshals}}
	 	err = json.Unmarshal({{$in}}_{{.}}, {{$in}}.{{.}})
	   if err != nil {
		   log.Errorf("unmarshal(%s) error: %s",{{$in}}_{{.}}, err)
	   }
	   {{end}}
	}
	if err = rows.Err(); err != nil {
		log.Errorf("scan rows for query(%s{{range .Args}}, %s{{ end }}) last error: %s", q{{range .Args}}, {{.}}{{ end }}, err)
		return nil, err
	}
	return {{.Result}}, nil

{{- end}}
}
{{- end}}
