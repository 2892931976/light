// DO NOT EDIT THIS FILE!
// It is generated by `light` tool by source `model.go` at 2017-03-16 18:58:03.

package mapper

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"

	"github.com/arstd/light/example/enum"
	"github.com/arstd/light/example/model"
	"github.com/arstd/log"
)

type ModelMapperImpl struct{}

// batch: insert into models(id, name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values [{ i, m := range ms | , } (${i}, ${m.Name}, ${m.Flag}, ${m.Score}, ${m.Map}, ${m.Time}, ${m.Array}, ${m.Slice}, ${m.Status}, ${m.Pointer}, ${m.StructSlice}, ${m.Uint32}) ]
func (*ModelMapperImpl) BatchInsert(tx *sql.Tx, ms []*model.Model) (i int64, err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// insert into models(id, name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values
	buf.WriteString(`insert into models(id, name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values`)
	// (${i}, ${m.Name}, ${m.Flag}, ${m.Score}, ${m.Map}, ${m.Time}, ${m.Array}, ${m.Slice}, ${m.Status}, ${m.Pointer}, ${m.StructSlice}, ${m.Uint32})
	for i, m := range ms {
		if i != 0 {
			buf.WriteString(",")
		}
		buf.WriteString(`(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)`)
		args = append(args, i)
		args = append(args, m.Name)
		args = append(args, m.Flag)
		args = append(args, m.Score)
		xmMap, _ := json.Marshal(m.Map)
		args = append(args, xmMap)
		args = append(args, m.Time)
		xmArray := bytes.NewBufferString("{")
		for _, v := range m.Array {
			xmArray.WriteString(fmt.Sprint(v))
			xmArray.WriteRune(',')
		}
		xmArray.Truncate(xmArray.Len() - 1)
		xmArray.WriteRune('}')
		args = append(args, xmArray.String())
		xmSlice := bytes.NewBufferString("{")
		for _, v := range m.Slice {
			xmSlice.WriteString(fmt.Sprint(v))
			xmSlice.WriteRune(',')
		}
		xmSlice.Truncate(xmSlice.Len() - 1)
		xmSlice.WriteRune('}')
		args = append(args, xmSlice.String())
		args = append(args, m.Status)
		xmPointer, _ := json.Marshal(m.Pointer)
		args = append(args, xmPointer)
		xmStructSlice, _ := json.Marshal(m.StructSlice)
		args = append(args, xmStructSlice)
		args = append(args, m.Uint32)
	}

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	res, err := db.Exec(query, args...)
	if err != nil {
		log.Error(query)
		log.Error(args...)
		log.Error(err)
	}
	return res.RowsAffected()

}

// insert: insert into models(name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values (${m.Name}, ${m.Flag}, ${m.Score}, ${m.Map}, ${m.Time}, ${m.Array}, ${m.Slice}, ${m.Status}, ${m.Pointer}, ${m.StructSlice}, ${m.Uint32}) returning id
func (*ModelMapperImpl) Insert(tx *sql.Tx, m *model.Model) (err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// insert into models(name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values (${m.Name}, ${m.Flag}, ${m.Score}, ${m.Map}, ${m.Time}, ${m.Array}, ${m.Slice}, ${m.Status}, ${m.Pointer}, ${m.StructSlice}, ${m.Uint32}) returning id
	buf.WriteString(`insert into models(name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) returning id`)
	args = append(args, m.Name)
	args = append(args, m.Flag)
	args = append(args, m.Score)
	xmMap, _ := json.Marshal(m.Map)
	args = append(args, xmMap)
	args = append(args, m.Time)
	xmArray := bytes.NewBufferString("{")
	for _, v := range m.Array {
		xmArray.WriteString(fmt.Sprint(v))
		xmArray.WriteRune(',')
	}
	xmArray.Truncate(xmArray.Len() - 1)
	xmArray.WriteRune('}')
	args = append(args, xmArray.String())
	xmSlice := bytes.NewBufferString("{")
	for _, v := range m.Slice {
		xmSlice.WriteString(fmt.Sprint(v))
		xmSlice.WriteRune(',')
	}
	xmSlice.Truncate(xmSlice.Len() - 1)
	xmSlice.WriteRune('}')
	args = append(args, xmSlice.String())
	args = append(args, m.Status)
	xmPointer, _ := json.Marshal(m.Pointer)
	args = append(args, xmPointer)
	xmStructSlice, _ := json.Marshal(m.StructSlice)
	args = append(args, xmStructSlice)
	args = append(args, m.Uint32)

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	m = &model.Model{}
	dest := make([]interface{}, 1)

	dest[0] = &m.Id
	err = db.QueryRow(query, args...).Scan(dest...)
	if err != nil {
		log.Error(err)
		log.Error(query)
		log.Error(args...)
		return
	}
	return

}

// get: select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from model where id=${id}
func (*ModelMapperImpl) Get(tx *sql.Tx, id int) (m *model.Model, err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from model where id=${id}
	buf.WriteString(`select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from model where id=%s`)
	args = append(args, id)

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	m = &model.Model{}
	dest := make([]interface{}, 11)

	dest[0] = &m.Id
	dest[1] = &m.Name
	dest[2] = &m.Flag
	dest[3] = &m.Score
	dest[4] = &m.Map
	dest[5] = &m.Time
	dest[6] = &m.Slice
	dest[7] = &m.Status
	dest[8] = &m.Pointer
	dest[9] = &m.StructSlice
	dest[10] = &m.Uint32
	err = db.QueryRow(query, args...).Scan(dest...)
	if err != nil {
		log.Error(err)
		log.Error(query)
		log.Error(args...)
		return
	}
	return

}

// update: update models set name=${m.Name}, flag=${m.Flag}, score=${m.Score}, map=${m.Map}, time=${m.Time}, slice=${m.Slice}, status=${m.Status}, pointer=${m.Pointer}, struct_slice=${m.StructSlice}, uint32=${m.Uint32} where id=${m.Id}
func (*ModelMapperImpl) Update(tx *sql.Tx, m *model.Model) (i int64, err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// update models set name=${m.Name}, flag=${m.Flag}, score=${m.Score}, map=${m.Map}, time=${m.Time}, slice=${m.Slice}, status=${m.Status}, pointer=${m.Pointer}, struct_slice=${m.StructSlice}, uint32=${m.Uint32} where id=${m.Id}
	buf.WriteString(`update models set name=%s, flag=%s, score=%s, map=%s, time=%s, slice=%s, status=%s, pointer=%s, struct_slice=%s, uint32=%s where id=%s`)
	args = append(args, m.Name)
	args = append(args, m.Flag)
	args = append(args, m.Score)
	xmMap, _ := json.Marshal(m.Map)
	args = append(args, xmMap)
	args = append(args, m.Time)
	xmSlice := bytes.NewBufferString("{")
	for _, v := range m.Slice {
		xmSlice.WriteString(fmt.Sprint(v))
		xmSlice.WriteRune(',')
	}
	xmSlice.Truncate(xmSlice.Len() - 1)
	xmSlice.WriteRune('}')
	args = append(args, xmSlice.String())
	args = append(args, m.Status)
	xmPointer, _ := json.Marshal(m.Pointer)
	args = append(args, xmPointer)
	xmStructSlice, _ := json.Marshal(m.StructSlice)
	args = append(args, xmStructSlice)
	args = append(args, m.Uint32)
	args = append(args, m.Id)

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	res, err := db.Exec(query, args...)
	if err != nil {
		log.Error(query)
		log.Error(args...)
		log.Error(err)
	}
	return res.RowsAffected()

}

// delete: delete from models where id=${id}
func (*ModelMapperImpl) Delete(tx *sql.Tx, id int) (i int64, err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// delete from models where id=${id}
	buf.WriteString(`delete from models where id=%s`)
	args = append(args, id)

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	res, err := db.Exec(query, args...)
	if err != nil {
		log.Error(query)
		log.Error(args...)
		log.Error(err)
	}
	return res.RowsAffected()

}

// count: select count(*) from models where name like ${m.Name} [{ m.Flag != false } and flag=${m.Flag} ] [{ len(ss) != 0 } and status in (${ss}) ]
func (*ModelMapperImpl) Count(tx *sql.Tx, m *model.Model, ss []enum.Status) (i int64, err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// select count(*) from models where name like ${m.Name}
	buf.WriteString(`select count(*) from models where name like %s`)
	args = append(args, m.Name)
	// and flag=${m.Flag}
	if m.Flag != false {
		buf.WriteString(`and flag=%s`)
		args = append(args, m.Flag)
	}
	// and status in (${ss})
	if len(ss) != 0 {
		buf.WriteString(`and status in (%s)`)
		xss, _ := json.Marshal(ss)
		args = append(args, xss)
	}

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	// TODO page template not implement
	return

}

// list: select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from models where name like ${m.Name} [{ m.Flag != false } and flag=${m.Flag} ] [{ len(ss) != 0 } and status in (${ss}) ] [{ len(m.Slice) != 0 } and slice ?| array[ [{range m.Slice}] ] ] order by id offset ${offset} limit ${limit}
func (*ModelMapperImpl) List(tx *sql.Tx, m *model.Model, ss []enum.Status, offset int, limit int) (ms []*model.Model, err error) {
	var (
		buf  bytes.Buffer
		args []interface{}
	)
	// select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from models where name like ${m.Name}
	buf.WriteString(`select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from models where name like %s`)
	args = append(args, m.Name)
	// and flag=${m.Flag}
	if m.Flag != false {
		buf.WriteString(`and flag=%s`)
		args = append(args, m.Flag)
	}
	// and status in (${ss})
	if len(ss) != 0 {
		buf.WriteString(`and status in (%s)`)
		xss, _ := json.Marshal(ss)
		args = append(args, xss)
	}
	// and slice ?| array[ [{range m.Slice}] ]
	if len(m.Slice) != 0 {
		// and slice ?| array[
		buf.WriteString(`and slice ?| array[`)
		// ${v}
		for i, v := range m.Slice {
			if i != 0 {
				buf.WriteString(",")
			}
			buf.WriteString(`%s`)
			xv, _ := json.Marshal(v)
			args = append(args, xv)
		}
		// ]
		buf.WriteString(`]`)
	}
	// order by id offset ${offset} limit ${limit}
	buf.WriteString(`order by id offset %s limit %s`)
	args = append(args, offset)
	args = append(args, limit)

	ph := make([]interface{}, len(args))
	for i := range args {
		ph[i] = fmt.Sprintf("$%d", i+1)
	}
	query := fmt.Sprintf(buf.String(), ph...)

	log.Debug(query)
	log.Debug(args...)
	var rows *sql.Rows
	rows, err = db.Query(query, args...)
	if err != nil {
		log.Error(err)
		log.Error(query)
		log.Error(args...)
		return
	}
	defer rows.Close()

	ms = []*model.Model{}
	for rows.Next() {
		elem := &model.Model{}
		ms = append(ms, elem)
		dest := make([]interface{}, 11)
		dest[0] = &elem.Id
		dest[1] = &elem.Name
		dest[2] = &elem.Flag
		dest[3] = &elem.Score
		dest[4] = &elem.Map
		dest[5] = &elem.Time
		dest[6] = &elem.Slice
		dest[7] = &elem.Status
		dest[8] = &elem.Pointer
		dest[9] = &elem.StructSlice
		dest[10] = &elem.Uint32
		err = rows.Scan(dest...)
		if err != nil {
			log.Error(err)
			return
		}
	}
	if err = rows.Err(); err != nil {
		log.Error(err)
		return
	}
	return

}
