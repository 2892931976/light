// DO NOT EDIT THIS FILE!
// It is generated by `light` tool from source `model.go`.

package mapper

import (
	"bytes"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/arstd/light/example/domain"
	"github.com/arstd/light/example/enum"
	"github.com/arstd/light/light"
	"github.com/arstd/log"
	"github.com/lib/pq"
)

type ModelMapperImpl struct{}

func (*ModelMapperImpl) Insert(m *domain.Model, xtx ...*sql.Tx) (err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`insert into models(name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) returning id `, "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s"))
	xargs = append(xargs, m.Name, m.Flag, m.Score, light.JSON(m.Map), m.Time, pq.Array(m.Array), pq.Array(m.Slice), m.Status, light.JSON(m.Pointer), light.JSON(m.StructSlice), light.Time(m.Uint32))

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	xdest := []interface{}{&m.Id}
	err = exec.QueryRow(xquery, xargs...).Scan(xdest...)
	if err != nil {
		log.Error(err)
		log.Error(xquery)
		log.Error(xargs...)
	}
	return
}

func (*ModelMapperImpl) BatchInsert(ms []*domain.Model, xtx ...*sql.Tx) (xa int64, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(`insert into models(name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32) values `)
	for i, m := range ms {
		if i != 0 {
			xbuf.WriteString(", ")
		}
		xbuf.WriteString(fmt.Sprintf(`(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) `, "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s"))
		xargs = append(xargs, m.Name, m.Flag, m.Score, light.JSON(m.Map), m.Time, pq.Array(m.Array), pq.Array(m.Slice), m.Status, light.JSON(m.Pointer), light.JSON(m.StructSlice), light.Time(m.Uint32))
	}

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	var xres sql.Result
	xres, err = exec.Exec(xquery, xargs...)
	if err != nil {
		log.Error(xquery)
		log.Error(xargs...)
		log.Error(err)
	}
	return xres.RowsAffected()
}

func (*ModelMapperImpl) Get(id int, xtx ...*sql.Tx) (xobj *domain.Model, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`select id, name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32 from models where id=%s `, "%s"))
	xargs = append(xargs, id)

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	xobj = &domain.Model{}
	xdest := []interface{}{&xobj.Id, &xobj.Name, &xobj.Flag, &xobj.Score, light.JSON(&xobj.Map), &xobj.Time, pq.Array(&xobj.Array), pq.Array(&xobj.Slice), &xobj.Status, light.JSON(&xobj.Pointer), light.JSON(&xobj.StructSlice), light.Time(&xobj.Uint32)}
	err = exec.QueryRow(xquery, xargs...).Scan(xdest...)
	if err != nil {
		log.Error(err)
		log.Error(xquery)
		log.Error(xargs...)
	}
	return
}

func (*ModelMapperImpl) Update(m *domain.Model, xtx ...*sql.Tx) (xa int64, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`update models set name=%s, flag=%s, score=%s, map=%s, time=%s, slice=%s, status=%s, pointer=%s, struct_slice=%s, uint32=%s where id=%s `, "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s", "%s"))
	xargs = append(xargs, m.Name, m.Flag, m.Score, light.JSON(m.Map), m.Time, pq.Array(m.Slice), m.Status, light.JSON(m.Pointer), light.JSON(m.StructSlice), light.Time(m.Uint32), m.Id)

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	var xres sql.Result
	xres, err = exec.Exec(xquery, xargs...)
	if err != nil {
		log.Error(xquery)
		log.Error(xargs...)
		log.Error(err)
	}
	return xres.RowsAffected()
}

func (*ModelMapperImpl) Delete(id int, xtx ...*sql.Tx) (xa int64, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`delete from models where id=%s `, "%s"))
	xargs = append(xargs, id)

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	var xres sql.Result
	xres, err = exec.Exec(xquery, xargs...)
	if err != nil {
		log.Error(xquery)
		log.Error(xargs...)
		log.Error(err)
	}
	return xres.RowsAffected()
}

func (*ModelMapperImpl) Count(m *domain.Model, ss []enum.Status, xtx ...*sql.Tx) (xcnt int64, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`select count(*) from models where name like %s `, "%s"))
	xargs = append(xargs, m.Name)
	if m.Flag {
		xbuf.WriteString(fmt.Sprintf(`and flag=%s `, "%s"))
		xargs = append(xargs, m.Flag)
	}
	if len(m.Array) != 0 {
		xbuf.WriteString(`and xarray && array[ `)
		for i, v := range m.Array {
			if i != 0 {
				xbuf.WriteString(", ")
			}
			xbuf.WriteString(fmt.Sprintf(`%s `, "%s"))
			xargs = append(xargs, v)
		}
		xbuf.WriteString(`] `)
	}
	if len(ss) != 0 {
		xbuf.WriteString(`and status in ( `)
		for i, v := range ss {
			if i != 0 {
				xbuf.WriteString(", ")
			}
			xbuf.WriteString(fmt.Sprintf(`%s `, "%s"))
			xargs = append(xargs, v)
		}
		xbuf.WriteString(`) `)
	}
	if len(m.Slice) != 0 {
		xbuf.WriteString(fmt.Sprintf(`and slice && %s `, "%s"))
		xargs = append(xargs, pq.Array(m.Slice))
	}

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	err = exec.QueryRow(xquery, xargs...).Scan(&xcnt)
	if err != nil {
		log.Error(err)
		log.Error(xquery)
		log.Error(xargs...)
	}
	return
}

func (*ModelMapperImpl) List(m *domain.Model, ss []enum.Status, from time.Time, to time.Time, offset int, limit int, xtx ...*sql.Tx) (xdata []*domain.Model, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`select id, name, flag, score, map, time, xarray, slice, status, pointer, struct_slice, uint32 from models where name like %s `, "%s"))
	xargs = append(xargs, m.Name)
	if len(ss) != 0 && m.Flag && !from.IsZero() && to.IsZero() {
		if len(ss) != 0 {
			xbuf.WriteString(`and status in ( `)
			for i, v := range ss {
				if i != 0 {
					xbuf.WriteString(", ")
				}
				xbuf.WriteString(fmt.Sprintf(`%s `, "%s"))
				xargs = append(xargs, v)
			}
			xbuf.WriteString(`) `)
		}
		if m.Flag {
			xbuf.WriteString(fmt.Sprintf(`and flag=%s `, "%s"))
			xargs = append(xargs, m.Flag)
		}
		if !from.IsZero() && to.IsZero() {
			xbuf.WriteString(fmt.Sprintf(`and time >= %s `, "%s"))
			xargs = append(xargs, from)
		}
	}
	if !from.IsZero() && !to.IsZero() {
		xbuf.WriteString(fmt.Sprintf(`and time between %s and %s `, "%s", "%s"))
		xargs = append(xargs, from, to)
	}
	if !from.IsZero() && to.IsZero() {
		xbuf.WriteString(fmt.Sprintf(`and time >= %s `, "%s"))
		xargs = append(xargs, from)
	}
	if from.IsZero() && !to.IsZero() {
		xbuf.WriteString(fmt.Sprintf(`and time <= %s `, "%s"))
		xargs = append(xargs, to)
	}
	if len(m.Array) != 0 {
		xbuf.WriteString(`and xarray && array[ `)
		for i, v := range m.Array {
			if i != 0 {
				xbuf.WriteString(", ")
			}
			xbuf.WriteString(fmt.Sprintf(`%s `, "%s"))
			xargs = append(xargs, v)
		}
		xbuf.WriteString(`] `)
	}
	if len(m.Slice) != 0 {
		xbuf.WriteString(fmt.Sprintf(`and slice && %s `, "%s"))
		xargs = append(xargs, pq.Array(m.Slice))
	}
	xbuf.WriteString(fmt.Sprintf(`order by id offset %s limit %s `, "%s", "%s"))
	xargs = append(xargs, offset, limit)

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)
	log.Debug(xquery)
	log.Debug(xargs...)

	var xrows *sql.Rows
	xrows, err = exec.Query(xquery, xargs...)
	if err != nil {
		log.Error(err)
		log.Error(xquery)
		log.Error(xargs...)
		return
	}
	defer xrows.Close()

	xdata = []*domain.Model{}
	for xrows.Next() {
		xe := &domain.Model{}
		xdata = append(xdata, xe)
		xdest := []interface{}{&xe.Id, &xe.Name, &xe.Flag, &xe.Score, light.JSON(&xe.Map), &xe.Time, pq.Array(&xe.Array), pq.Array(&xe.Slice), &xe.Status, light.JSON(&xe.Pointer), light.JSON(&xe.StructSlice), light.Time(&xe.Uint32)}
		err = xrows.Scan(xdest...)
		if err != nil {
			log.Error(err)
			return
		}
	}
	if err = xrows.Err(); err != nil {
		log.Error(err)
	}
	return
}

func (*ModelMapperImpl) Page(m *domain.Model, ss []enum.Status, from time.Time, to time.Time, orderBy string, offset int, limit int, xtx ...*sql.Tx) (xcnt int64, xdata []*domain.Model, err error) {
	var (
		exec  light.Execer = db
		xbuf  bytes.Buffer
		xargs []interface{}
	)
	if len(xtx) > 0 {
		exec = xtx[0]
	}
	xbuf.WriteString(fmt.Sprintf(`select id, name, flag, score, map, time, slice, status, pointer, struct_slice, uint32 from models where name like %s `, "%s"))
	xargs = append(xargs, m.Name)
	if m.Flag != false {
		if len(ss) != 0 {
			xbuf.WriteString(`and status in ( `)
			for i, v := range ss {
				if i != 0 {
					xbuf.WriteString(", ")
				}
				xbuf.WriteString(fmt.Sprintf(`%s `, "%s"))
				xargs = append(xargs, v)
			}
			xbuf.WriteString(`) `)
		}
		xbuf.WriteString(fmt.Sprintf(`and flag=%s `, "%s"))
		xargs = append(xargs, m.Flag)
	}
	if len(m.Slice) != 0 {
		xbuf.WriteString(fmt.Sprintf(`and slice && %s `, "%s"))
		xargs = append(xargs, pq.Array(m.Slice))
	}
	if !from.IsZero() && !to.IsZero() {
		xbuf.WriteString(fmt.Sprintf(`and time between %s and %s `, "%s", "%s"))
		xargs = append(xargs, from, to)
	}
	if !from.IsZero() && to.IsZero() {
		xbuf.WriteString(fmt.Sprintf(`and time >= %s `, "%s"))
		xargs = append(xargs, from)
	}
	if from.IsZero() && !to.IsZero() {
		xbuf.WriteString(fmt.Sprintf(`and time <= %s `, "%s"))
		xargs = append(xargs, to)
	}
	xbuf.WriteString(fmt.Sprintf(`order by %s offset %s limit %s `, orderBy, "%s", "%s"))
	xargs = append(xargs, offset, limit)

	xholder := make([]interface{}, len(xargs))
	for i := range xargs {
		xholder[i] = fmt.Sprintf("$%d", i+1)
	}
	xquery := fmt.Sprintf(xbuf.String(), xholder...)

	xfindex := strings.LastIndex(xquery, " from ")
	xobindex := strings.LastIndex(xquery, "order by")
	xtquery := `select count(*)` + xquery[xfindex:xobindex]
	xdcnt := strings.Count(xquery[xobindex:], "$")
	xtargs := xargs[:len(xargs)-xdcnt]
	log.Debug(xtquery)
	log.Debug(xtargs...)

	err = exec.QueryRow(xtquery, xtargs...).Scan(&xcnt)
	if err != nil {
		log.Error(err)
		log.Error(xquery)
		log.Error(xargs...)
		return
	}
	if xcnt == 0 {
		return
	}

	log.Debug(xquery)
	log.Debug(xargs...)

	var xrows *sql.Rows
	xrows, err = exec.Query(xquery, xargs...)
	if err != nil {
		log.Error(err)
		log.Error(xquery)
		log.Error(xargs...)
		return
	}
	defer xrows.Close()

	xdata = []*domain.Model{}
	for xrows.Next() {
		xe := &domain.Model{}
		xdata = append(xdata, xe)
		xdest := []interface{}{&xe.Id, &xe.Name, &xe.Flag, &xe.Score, light.JSON(&xe.Map), &xe.Time, pq.Array(&xe.Slice), &xe.Status, light.JSON(&xe.Pointer), light.JSON(&xe.StructSlice), light.Time(&xe.Uint32)}
		err = xrows.Scan(xdest...)
		if err != nil {
			log.Error(err)
			return
		}
	}
	if err = xrows.Err(); err != nil {
		log.Error(err)
	}
	return
}
