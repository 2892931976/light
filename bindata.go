// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4d\x73\xdb\x36\x10\x3d\x53\xbf\x62\xa3\x49\x3a\x64\x43\xc3\x75\x7b\x73\xc7\x07\x37\x76\xa6\x9a\x69\xec\xd4\x76\xda\x83\xc7\xd3\x40\x14\x24\xb1\x25\x01\x06\x00\x1d\x79\x38\xfc\xef\x5d\x00\x94\x40\xca\xa4\x1c\x2b\x93\x43\x74\x11\x3e\x16\x8b\x7d\xbb\xef\x81\x7b\x78\x08\x67\x97\x70\x71\x79\x03\xe7\x67\x93\x1b\xb8\xf9\x7d\x72\x0d\x6f\x27\x7f\x9c\xc3\x8b\x11\x6e\x4d\x34\xa4\x0a\x16\x8c\x33\x49\x35\x9b\xc1\xf4\x01\x16\x62\x4a\x35\x2e\x6a\x21\xb2\x18\x94\x28\x65\xc2\x60\x2e\x45\x0e\x55\x45\xae\xed\xb4\xae\xc9\xa8\xa0\xc9\x7f\x74\xc1\xcc\xe2\x7b\x37\xac\xeb\xd1\x28\xcd\x0b\x21\x35\x84\xa3\x60\x3c\x7d\xd0\x4c\x8d\x71\xc0\x78\x22\x66\x29\x5f\x1c\xfe\xab\x04\x37\x0b\xf3\x5c\x9b\xbf\x45\xaa\x97\xe5\x94\x24\x22\x3f\xfc\x2c\xf4\xd2\x58\x64\x62\x81\x3b\x55\x75\x00\x92\x72\x74\x4e\x26\xd6\x9f\x42\xd7\xb8\x4a\xdc\xdf\x01\x30\x3e\x03\x1c\x47\xa3\x91\x7e\x28\x6c\x08\x17\x34\xc7\xfb\x41\x69\x59\x26\xba\xc2\x40\x5a\x3e\xde\x31\xbd\x14\x33\x65\x4e\xcc\x4b\x9e\x40\xf8\x63\x55\xbd\x6c\x4e\x44\xfe\x70\x68\x91\x48\x9a\xab\x6b\x2d\x31\x18\xdc\x34\x4b\x57\x4c\x95\x99\xf6\x6b\x50\x8d\x82\x7b\x2a\x0d\xc4\x40\xe9\x5c\x9b\x3b\x71\x07\x67\xd3\x72\x0e\x60\x51\x93\xdf\xca\xf9\x9c\x49\x5c\xa3\x72\xa1\xe0\xf6\x2e\xe5\x9a\xc9\x39\x4d\x18\x86\x16\x60\xd8\x6d\x88\x6f\x25\x5d\xe4\x8c\x3b\x90\xb8\x91\xce\x81\xbc\x11\x16\x21\xe0\x18\x43\x30\x33\x9c\x54\x38\x66\x66\xb4\xbe\xf9\x04\x3e\x9a\x92\xe0\x10\x77\x3f\xda\xc3\x1b\xaf\xa7\x78\xb1\xb5\xb4\x8b\xc6\xe7\x44\x4d\xb8\x5b\x59\x9f\x76\x91\x2b\x84\x58\x64\x18\x5b\x68\x96\x63\x18\x87\xaf\x54\x34\x8e\xad\x61\xd0\x32\x61\x54\x87\xe3\xf8\x95\x1a\xc7\x90\x31\x6e\x52\xf3\x17\x95\x98\x90\xe8\xf6\xe8\xf8\x2e\x86\x83\xa3\xc8\x1e\x99\x0b\x09\xff\x20\x6f\xe0\xf8\xa4\x89\x65\x6d\x69\x32\x67\x7e\x36\x27\x27\x40\x8b\x02\xd1\x84\x66\x16\x03\x26\xe8\x97\x9f\x43\x15\x39\x1f\x9b\xb8\x59\xa6\x98\x0d\xfe\x06\xeb\x4c\xde\xcb\x34\x4f\x75\x7a\xcf\x1a\x18\x7d\x8e\x36\x61\xf5\xbb\x38\xcd\x52\xaa\x76\x1f\x6f\xdd\xd2\x02\xd9\x76\xd7\x9c\x37\x2c\x40\x83\x0f\x7c\xc6\x64\x96\x72\xe6\x40\xde\xde\x19\x0a\x58\x83\x47\x9b\x31\x30\x29\xf1\x4a\x23\x04\xf2\x8e\x4a\xb5\xa4\x59\xd8\x89\x38\xc0\x48\x8d\xcd\x8b\x13\xe0\x69\xb6\xce\x18\xca\x82\x9c\x4b\x29\x64\x88\x7b\xce\x2e\x90\x4c\x97\x92\xfb\x74\x0d\xc1\xe9\x46\xe0\x71\x34\x44\x6a\x8f\x91\xc0\xe4\x6f\x99\x6a\xe6\xc8\x6e\xf9\x10\x3d\xe2\x64\xed\x69\xe8\x0f\x3b\x4d\x14\xcb\x6d\xae\x1b\x36\xa4\x9e\x0a\x36\x46\x03\x0a\x2d\x37\xa1\x16\x4b\x24\xdd\xcb\xf1\x6b\xe4\x5a\x22\xf8\x3d\x99\x68\x41\xc3\xf4\xf5\x91\x49\xba\xf1\xfc\xa9\x64\xf2\xc1\xf8\xc0\x77\x83\x5c\x17\x18\x9a\x9e\x87\x26\xd6\x26\xcc\x28\xc6\x8b\x09\x21\x46\x57\x26\x53\x67\x6c\x5a\x2e\x42\x7b\x2a\x6a\xaf\x98\xcb\x1b\x33\x8b\x88\x7d\x02\x72\x59\x18\x5a\xc0\x38\xe5\x8a\x49\x3d\x6e\x49\xf0\x8c\x29\xed\x0a\x6d\x90\xcd\x70\xb6\x8d\xcd\x58\x36\x6a\xf3\xc6\xcd\xe9\x5e\xbe\x06\xd6\xcb\x06\xb7\x99\xc5\xf0\x43\xb7\xfe\x98\x5b\xcf\xb0\xa7\x29\xf6\x85\x2e\x9b\x02\xb7\x87\x8e\x89\x68\x79\xb3\xc2\xe7\xfc\x4f\x93\xad\x2b\xf1\xd9\xa5\x2d\x86\x75\xae\xc8\x75\x42\xb9\x75\x6b\x33\x37\x40\xd0\x1e\x7e\xfa\xa5\x75\x21\x3a\x8b\x9b\x5a\x74\xa9\xbc\x3b\xab\x5c\xe8\xa1\xcc\x9a\x90\x8e\x1b\x61\x7d\xe0\xb9\x97\xd6\xb6\x00\xbb\xa9\xe9\x97\x5b\xaf\xde\xda\x82\x0b\xea\x1d\x89\x75\x76\xc6\xdf\xa8\x5b\x4e\xc9\x94\x7b\x00\x8e\x7d\xde\xcf\x57\x2c\xd9\xce\xf9\x37\xcd\x32\xfc\x64\x63\xd8\x24\xbb\x59\xc5\xd8\x08\x96\x5f\x9d\xe2\x77\x2b\xc1\x46\x20\x74\xba\x5f\x8b\xdb\xc1\x80\x2d\xd1\x94\xc5\x0c\x9b\x06\x27\x9a\x67\x80\xeb\xc1\xf6\x18\x5a\x1f\xb2\x7e\x60\xdb\xb8\x5c\x34\x43\xa8\x86\xb0\xcc\x58\xc6\xbe\x47\x2c\xfe\x03\xd7\x46\xb3\x60\xcd\x5b\x36\xf8\x76\x35\x5d\x81\x95\xd4\x95\xbd\xa1\x57\x59\xb6\x01\xb2\xbb\xee\xe9\x39\xb1\x8f\x4b\xfb\xc0\x79\xc6\xf2\xba\xae\xb6\xbf\x25\xad\x56\xc4\xcb\x78\xdd\x8a\xf4\x6a\xf8\xe9\x97\xec\xb9\xdf\xdf\x21\x8f\xcf\xf8\x24\xee\xf9\x4a\x7e\x13\x5a\x34\x7c\xd8\x95\xd9\xe1\x17\x72\xd3\x84\xb9\x0a\x6e\x97\x6e\x8d\xf4\xb9\x0f\xe8\xde\xed\xca\x50\xc2\x1b\xbb\x61\x6a\x67\xa9\x6a\xb8\x2d\x51\x0d\x1b\x9d\xea\x95\xab\xce\xbe\x1a\xf5\xaf\x76\x5b\x7b\x33\x86\x6d\x3c\x98\x8b\xc8\x9b\x4c\x28\x66\x45\xe7\x44\x45\x35\x85\xae\x14\x6c\x50\xa6\xe1\xb1\xf6\x17\x6c\xa5\xc3\xc8\x5d\xb7\x6a\x5e\x92\x01\xdd\x04\xd6\x99\x27\x2a\xce\x90\xa8\x2b\x7b\xd7\xce\xee\xa3\x87\x08\xbb\x35\xf6\x65\xed\x42\x47\x65\x5f\xd1\x83\xf4\xe8\xac\x53\xeb\xee\xc4\x11\xd0\xe6\x6e\xdf\xa6\xe3\x71\x11\x83\xa7\x33\xb5\xa3\xab\x78\x52\x34\x7b\xaa\xe6\x6b\xdb\x8e\x81\x14\xd6\x9e\xec\x4d\x22\xd1\x5b\x18\xfd\xba\x27\xfd\xfd\xb7\xc7\x31\xd2\x76\x34\xfe\xbe\x7a\xe4\xc7\xff\x07\x00\x00\xff\xff\x2d\x79\xe0\x90\x65\x10\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 4197, mode: os.FileMode(420), modTime: time.Unix(1468895131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

