// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\x56\xd8\x16\x52\xa3\x30\xcd\x35\x45\x0e\x69\xe2\xa0\x06\x9a\xa4\x4d\xd2\xf6\x10\x04\x5d\x5a\xa6\x65\x75\x25\x51\x4b\x52\x5b\x07\x86\xff\x7b\x87\x1f\xb2\x24\xdb\x72\xb2\x2e\x16\x45\x4f\x26\x87\xc3\xe1\xbc\xc7\x79\xd4\xf8\xe4\x04\xae\xee\xe0\xf6\xee\x11\x46\x57\xe3\x47\x78\xfc\x69\xfc\x00\xd7\xe3\x9f\x47\xf0\xce\xc7\xa5\xb1\x82\x4c\x42\xca\x4a\x26\xa8\x62\x53\x98\xbc\x40\xca\x27\x54\xa1\x51\x71\x9e\xc7\x20\x79\x2d\x12\x06\x33\xc1\x0b\x58\x2e\xc9\x83\x99\xae\x56\xc4\xaf\x68\xf2\x91\xa6\x4c\x1b\x7f\xb1\xc3\xd5\xca\xf7\xb3\xa2\xe2\x42\x41\xe8\x7b\xc1\xe4\x45\x31\x19\xe0\x80\x95\x09\x9f\x66\x65\x7a\xf2\x97\xe4\xa5\x36\xcc\x0a\xa5\x7f\xa4\x12\x09\x2f\x3f\xeb\x61\x9a\xa9\x79\x3d\x21\x09\x2f\x4e\x52\xae\xb2\x4a\x9e\xe4\x3c\xc5\x85\xe5\xf2\x18\x04\x2d\xf1\x18\x32\x36\x91\x25\x1e\x82\x56\x62\x7f\x8e\x81\x95\x53\xc0\x71\xe4\xfb\xea\xa5\x32\xc9\xdc\xd2\x02\x33\x01\x0c\x5e\x27\x6a\x89\x29\x75\x62\xdc\x30\x35\xe7\x53\xa9\x77\xcc\xea\x32\x81\xf0\xbb\xe5\xf2\xbd\xdb\x11\xb5\x9b\x43\x83\x49\xd0\x42\x8e\x16\x95\xc0\x25\x6d\xb8\x67\xb2\xce\x55\x63\x81\xa5\xef\x7d\xa6\x42\x03\xf5\xa4\x2a\x94\x3e\x0f\x21\xe2\x6c\x52\xcf\x00\x0c\x76\xf2\x63\x3d\x9b\x31\x81\x36\x2a\x52\x09\x4f\xcf\x59\xa9\x98\x98\xd1\x84\x61\x5a\x1e\xa6\xdc\x85\x77\x2d\x68\x5a\xb0\xd2\x02\xc4\x85\x6c\x06\xe4\x92\x1b\x74\x80\x63\x4c\x40\xcf\x70\xb2\xc4\x31\xd3\xa3\xe6\xe4\x73\xf8\xa0\x2f\x06\x87\xb8\xfa\xc1\x6c\x5e\x47\xbd\xc0\x83\x8d\xa7\x31\xea\x98\x63\x39\x2e\xad\xa5\xd9\x6d\x33\x97\x08\xb0\xca\x31\xb7\x50\x9b\x63\x08\xde\x2f\x83\xa3\x00\x03\xff\x4e\x11\x2f\x0e\x57\x41\x6c\x76\x79\x1d\x7f\x46\x55\x18\xc4\xdf\xc8\x20\x86\x9c\x95\x61\xe3\x1d\x45\x4f\xa7\x67\xcf\x31\x1c\x9f\x46\x66\xcb\x8c\x0b\xf8\x13\x4b\x09\xce\xce\x5d\x62\x8d\xa7\xa6\xd1\xeb\x64\xf7\x88\x97\x48\x2e\xf2\x8c\xca\x6b\x2e\x5c\x9a\x8e\xbe\x73\xa0\x55\x85\xc0\x43\x3d\x8b\x75\x84\x0d\xe7\x50\x46\x51\x1b\x8d\xe5\x92\xed\x0d\x20\xbb\xce\x8e\x4f\xcf\x5b\x73\xa5\xf7\x0f\xa6\xf4\xc6\x84\x5a\x3e\x36\xa3\x96\x5c\xb9\xc8\x63\x79\xc9\x8b\x2a\x67\x8b\xfd\xa1\x6d\x1c\x7f\x1b\x9c\x2e\x42\x5c\xbf\xc0\x88\x73\x26\x2c\xa9\x4f\xcf\xba\xfe\x7c\x8b\xae\xb7\x14\x03\x13\x02\xc3\x6b\x25\x92\x1b\x2a\xe4\x9c\xe6\x61\x2f\xbc\x87\xd9\x69\x9f\x77\xe7\x50\x66\x79\x73\x3f\xa8\x46\x32\x12\x82\x8b\x10\xd7\x1c\x71\x82\xa9\x5a\x94\x2d\x6b\x43\xa9\x77\xcf\x6f\x11\x38\xc6\xbb\x63\x54\x0e\xf9\x43\x64\x8a\x3d\x98\x0a\x33\x85\x18\x6d\x89\x61\xd5\xd6\x7f\xbb\xd9\x8a\xb1\x9a\x6f\x8a\x4c\x57\x5e\xd6\x96\x9d\xc9\x50\x43\x42\xcf\x75\xa2\xd5\x5c\x57\x7b\x70\xe4\x9e\x23\x32\x56\x9c\x86\xd9\xd1\xa9\xbe\x35\x1d\xf9\x53\xcd\xc4\x8b\x8e\x81\xcf\x16\x79\xa8\x30\x35\x35\x0b\x75\xae\x2e\xcd\x28\xc6\x83\x09\x21\x5a\xd0\x9a\xa7\x2b\x36\xa9\xd3\xd0\xec\x8a\xba\x16\x7d\xb8\x73\x33\x88\xd8\x27\x20\x77\x95\x2e\x02\x08\xb2\x52\x32\xa1\x82\x8e\xf6\xaf\x98\x54\xf6\x8a\x35\xb2\x29\xce\x36\xb1\x69\x4f\x27\xf3\xd6\xd9\xee\x1e\x2e\x2f\xcf\x44\x5a\x63\xd7\xb3\x18\xbe\xed\x57\x00\xf2\xdb\x11\xcf\x2b\x05\xf6\xc6\x80\x8d\xc0\x3a\x43\x5b\x89\x5a\x36\x98\x1c\xf9\x55\xf3\x75\xcf\xff\xb6\xc4\xc5\xd0\xb0\x45\x1e\x12\x5a\x9a\xb0\x86\xbb\x81\x02\xdd\x51\x9f\xad\xa9\xb9\x8a\x9e\x71\x7d\x1b\xfd\x52\xde\xcf\xeb\x00\xa7\x1d\x4d\xfd\x56\x16\xad\xaa\xfa\xca\xd3\x86\xe9\x54\xb8\x0f\x88\xdd\xb9\x53\x6c\x3b\xd5\xd6\x95\x9b\xb7\xda\x43\xab\xf5\xd3\xf1\xfc\xfe\x55\x0a\x26\xad\xfc\xcf\x5a\xd6\x47\x0b\x96\x6c\x32\xfe\x55\x39\x86\xef\x4d\x0e\x6b\xaa\x9d\x15\x73\x23\x78\xf9\xf2\x02\x3f\x98\x09\xf6\x21\xa1\xd5\x7d\x23\x6e\x0b\x03\x36\x44\x53\x57\x53\xec\x59\xac\x68\xbe\x00\xdc\x0e\x6c\xdb\xd0\x76\x21\xdb\x0d\x6c\x13\x97\xcd\x66\x08\xd5\x10\x96\x29\xcb\xd9\xff\x11\x4b\xfb\x49\xeb\xa2\x49\x99\x7b\xcb\x06\xdf\xae\xe6\x83\x7f\x6f\xa2\xef\xd4\x95\xe9\xb9\xcc\xaa\x7d\x74\x0c\x19\x5d\xff\x1b\xfa\x91\x59\x35\xf9\xdb\x1f\x95\x2d\x05\xbb\x13\x87\x9f\xc6\x5d\x0f\xd9\xb6\x66\xbf\xec\xf3\x3b\xf4\x38\xbe\xf9\x9b\x78\xe0\x23\xf9\x55\xea\xc2\x15\xc4\x3e\x76\x77\x33\xbb\xee\xf6\xce\xd7\x5d\x52\xef\xee\xfe\xc5\x0b\x7a\x70\xb7\x32\x44\xb8\xf3\x1b\xae\xed\x3c\x93\xae\xb8\x05\xca\x61\x4b\xa8\xe6\x8a\x0e\x55\x6a\xfb\x76\x77\x15\x38\x65\xf8\x2f\x02\xf4\x69\xe4\x32\xe7\x92\x19\xe9\x59\x69\x51\x45\x37\x54\x61\x32\xd3\x6d\x8f\xf1\xbf\x65\x0b\x15\x46\xf6\xb8\x85\x4b\xb3\x2b\xa1\x51\xce\x8a\x8d\xbb\x30\x31\xdb\x92\xc5\x59\x0c\x0b\x73\xe2\xde\x4e\x64\x47\x4d\xbc\x2e\xb9\xb7\x35\x0f\xfd\x66\xfe\xd0\x7e\x64\x4b\x72\xfd\xce\xbf\x37\xb1\xe5\x68\x18\x3c\xb4\xfd\xd8\xbe\x4a\xef\x75\xa6\x06\x58\x7a\x5d\x3f\xff\x5d\x0b\x32\x40\xe1\xaa\x2d\x79\x47\x24\x46\x0b\xa3\x1f\x0e\x14\x41\xfb\x1d\xb2\x05\x69\xba\x9b\xf6\xbc\x95\xdf\x8e\xff\x09\x00\x00\xff\xff\xf0\x8d\x7c\xbb\xf0\x10\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 4336, mode: os.FileMode(420), modTime: time.Unix(1470217132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

