// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x55\x4b\x02\x69\x53\x95\xf6\x35\x83\x1f\xba\x36\xc5\x0c\xb4\xe9\x5a\x67\xdb\x43\x51\x18\x8c\x4c\xb9\xda\x64\xc9\x25\x29\xd7\x81\xa7\xef\xbe\x3b\x92\xa2\x69\xc7\x6e\xd2\x35\x59\x36\x20\x01\x02\x8b\x47\xf1\xf8\xbb\x7f\xbf\x23\x75\x7c\x0c\x2f\xde\xc0\xd9\x9b\x73\x38\x7d\x31\x3c\x87\xf3\x9f\x87\x23\x78\x39\x7c\x75\x0a\x8f\x42\x9c\x1a\x2a\x28\x25\x4c\x79\xcd\x05\x53\x7c\x02\x17\x97\x30\xe7\x42\x96\x52\x81\x6a\x9a\x2a\x05\xd9\xb4\x22\xe7\x50\x88\x66\x06\xab\x55\x36\xd2\xc3\xae\xcb\xc2\x39\xcb\xff\x64\x53\x4e\xc2\x5f\xcc\x63\xd7\x85\x61\x39\x9b\x37\x42\x41\x1c\x06\xd1\xc5\xa5\xe2\x32\xc2\x07\x5e\xe7\xcd\xa4\xac\xa7\xc7\x7f\xc8\xa6\x26\x41\x31\x53\xf4\x33\x2d\xd5\xc7\xf6\x22\xcb\x9b\xd9\xf1\xb4\x51\xe5\x5c\x1e\x57\xcd\x94\x26\xa4\x12\x79\x53\x2f\xec\x23\xae\x24\x35\xab\xd5\x63\x10\xac\xc6\x1d\xb3\xa1\xde\x44\xe2\x7e\x28\xcd\xba\x8e\xa6\x78\x3d\x01\x14\x24\x61\xb8\x60\x02\xc6\x30\x00\xda\x2d\x7b\xcd\x84\xfc\xc8\x2a\x27\xc4\xad\xb3\xd1\x1c\x75\xaa\xc2\xc9\xec\x76\xd9\x50\x35\x2c\x0c\xd5\xe5\x9c\x8c\x82\xec\x8c\xcd\x38\xaa\xa4\xe9\x36\x57\x2b\x34\xce\x83\xf0\x9a\xab\x8f\xcd\x44\xd2\x96\x61\xd1\xd6\x39\xc4\xdf\xe3\x9a\x83\x7e\x51\xe2\x6b\x88\x57\x2b\xb3\xea\xa0\x4c\x0f\x16\x0a\x4e\x06\x80\x2e\x13\x6c\x26\x09\x7a\x59\xa0\x1c\xfe\x82\x9a\xc3\x93\xae\x4b\x71\x21\x9a\x42\x13\xf8\x6a\xf6\x1b\x13\x88\xc0\x3c\x8f\xaa\x92\x3c\x6f\x07\x8a\x66\xcc\xb3\x73\xff\x6a\xc5\xd0\x0b\x9e\x08\xa2\x2c\xea\xdf\x3a\x47\xbb\xe8\xd9\x7a\x2a\x81\x5d\xb0\xde\x71\xd5\x8a\xfa\x7e\x71\xad\xc2\x80\x22\xc3\x85\xfe\x6f\x44\x18\x7c\x6a\xb9\xb8\x4c\x81\x89\xa9\x24\x94\x3a\xb1\xb2\x33\xfe\xf9\xa7\xb6\x28\xb8\x88\xdf\x7f\x20\xc9\xaa\x4b\x52\x78\xff\x01\x23\xcb\x45\xc1\x72\x1c\x63\xc8\xb4\x26\xa9\x66\x0a\x4c\x22\xf9\x21\x7c\x29\xd8\x74\xc6\x6b\x9d\x47\xda\xdc\xec\x79\x63\x92\x28\xc0\x01\x26\x16\x0d\xc9\xca\xd0\xe6\x17\xcd\x68\x5d\x03\x88\xa8\x14\xf0\x11\xa7\x23\x4f\x27\x7a\x12\x7a\x57\x3e\x43\xb4\x26\x43\x1f\x03\xea\xe3\x9f\x20\x1b\xbd\x7d\x35\xac\x01\xd3\x89\x4a\x25\x08\x8a\x06\xf3\x2f\x85\x05\xbd\x6e\xd6\x93\xd6\xbc\x99\x3b\x97\x99\x91\xef\x2d\xeb\x78\x5c\x1d\x68\x77\x0c\x80\xcd\xe7\x88\x2d\xa6\x11\x05\x49\xbb\xf9\x59\x55\x32\xe9\xfb\x5d\x0b\x20\x8a\x9d\x9e\xbd\xdb\x2c\xae\x2c\x4a\x50\x9a\xe0\x86\x04\xd9\x9a\x6f\xab\x12\xd3\x65\x5e\xa1\xab\x63\x12\xa7\x10\x1d\x1c\x4e\xa2\x94\xa0\x79\xf3\x9c\xa9\x38\x4a\xf5\x0c\x54\xbc\x8e\xbf\x6c\xa2\xb1\x2f\x49\xde\x3f\x3d\xf9\x90\xc2\xe3\xa7\x58\xce\xda\x81\xbc\x92\x9c\xbc\xd8\xd7\xb3\x8e\x52\xb0\x4f\xd7\xd8\xd3\x95\xea\x44\x3a\xd9\xa4\x83\x9b\xa1\xc0\x1d\x28\x70\xb8\xfc\xd1\x00\xea\xb2\x32\x6e\x47\x8e\xca\x4e\x29\x2f\x8b\x38\x9a\x59\x75\x87\xdf\x2d\x12\x93\xac\x27\x70\x28\xa3\xf4\x26\xea\x35\xb0\xde\xaf\xbb\x63\x79\xbd\x75\x1b\xfe\xe9\xf6\x6b\xfa\xd6\xac\xf0\x92\x6f\x5f\x7e\x78\x24\xec\x3d\x9a\xda\xcd\x7e\x17\xa5\xe2\x23\x9d\x15\x3a\x59\x12\x57\x17\xb6\xca\xc2\xa0\xb3\x04\xe3\x55\x9b\x29\xdf\x49\x53\x55\xf8\xb3\x51\xda\xa1\x2e\x9e\x72\x5d\x39\xda\x6c\x8a\x8f\x7d\xdb\x79\xc0\x8c\x53\x28\x7f\xc0\x64\x0a\xd6\x15\xec\x35\x82\xd8\x60\xb4\xf0\x90\x45\xcc\x9a\x2c\xcb\xc8\xbd\x14\xef\x17\xfc\xa2\x75\xc0\xd7\x02\xda\xd4\xbc\xd5\x1b\x43\x64\x86\x9c\x89\xc5\x1e\xb1\xc9\x24\x02\x8f\x00\xb2\x5f\x6b\x9b\x2e\x9a\x16\xc8\x32\x8f\x80\x1d\x6d\xf8\x6f\x69\x56\xaa\x69\x7e\x8b\x82\xd1\x76\x17\x2e\x4c\x88\xa5\x8b\x10\x3a\x33\x67\x6a\x2b\x5e\x7a\x11\x18\x96\x74\x71\x32\xc8\x34\xb0\x51\xce\x6a\xdd\xc9\x82\x09\x97\x1a\xc5\x26\x8d\xee\xc4\xa9\x17\xed\x85\x78\xf4\xcf\x30\x22\x04\x2a\xb7\x01\xe5\xfe\xf9\x12\x4f\x19\x6f\x29\x32\xef\x9a\xcf\x96\x61\x7a\x87\xeb\xdd\x63\x42\xab\xdd\xbf\xa3\x4c\x5d\x95\xc6\xb6\xca\xd6\x02\x1b\x46\x4f\xe2\xe2\x18\x04\x42\x37\x40\xd2\xa6\x93\x05\x81\x61\x65\x91\x6b\x04\x97\x8e\x4a\x7a\x74\xa7\x4b\x9e\x6f\x21\xbb\x43\x2c\x63\xe6\x00\x20\x98\x0c\xbd\x22\x9f\x61\xff\xcb\xf1\xd8\x16\xdf\xdd\xbe\x8e\x7a\xc7\x8c\x74\x3f\xd5\x9a\x4d\x90\xa8\x84\x7a\x26\xe4\xcb\xb9\x46\x02\xcc\x42\xc2\x37\x45\xf3\x39\x85\x8b\x56\x01\xcb\x55\x8b\x9c\xed\xa6\x0e\x27\x34\x87\x3c\x89\x4a\x93\x5b\x0d\x96\xa5\x0d\x3b\x81\x8e\x30\xa5\xe9\xda\x87\x57\x9f\x33\x3c\x93\x16\x97\xd1\x43\x6c\xff\x17\xb1\xbd\x49\x44\x05\x9f\x35\x0b\xfe\x10\xd1\xed\x88\xfe\x8b\x21\x98\x72\x15\xf5\xdd\x6d\xbc\x24\xd7\xbf\xe3\xb2\xad\xae\xdc\x05\xb6\xc4\xee\x64\x64\xc5\xe6\x4e\xe0\x1a\xd4\xba\x27\xc2\x3d\xb7\x4e\x77\xac\xb9\xff\x4e\x69\x5b\xe5\x7d\x77\x4a\x54\x93\xf6\x29\xb2\x71\x49\xdf\x3c\xee\x68\x2b\xb7\x4c\xd4\x89\x60\x6c\xdc\x3c\x1a\x9b\x03\x80\xbb\x57\xea\x33\x4a\x3f\x70\x37\x4c\xd3\x98\xfb\xa3\x2a\x0a\x21\x3a\x8a\x9c\x83\xfc\xaf\x12\xf6\x9d\xed\x5c\xb3\x17\xcf\xce\x71\x9e\xbe\x21\x38\xd8\xf1\x2e\xc8\x5e\x48\xfa\x53\xfc\xd1\x57\x99\x76\xdd\xa5\xa2\x0f\xc2\x8e\x28\xec\x0e\x43\xb7\x71\xa2\xb3\x41\x39\x1a\x2f\xd3\x2f\x17\x6a\xde\xb4\xf5\x56\xa9\x7a\x99\x2b\x76\x7c\x0c\xc0\x55\x26\x75\xd7\xae\xeb\x5d\x6d\x37\xff\x8a\xa3\x1b\x02\xbc\x8b\x64\x7c\x92\x6e\xb3\xd5\xb5\x8e\xa8\x4a\x69\xfc\x40\x5d\xeb\x4a\xcf\xd0\x46\xdc\x7d\xd3\xf0\x8b\x08\xa9\xa5\xe0\x42\x37\xd1\xec\x79\xd5\x48\x8e\xed\x22\x04\xfc\xa3\x40\x2d\xa5\xc7\xa9\xeb\x9a\xe8\x05\xb6\x34\xbe\x8d\x74\xe9\x66\xa5\x77\x3f\xe3\x4b\x15\xeb\xef\x31\xb7\xc5\xe7\xc1\xd2\xbb\x9b\x2e\xd1\xdd\x3a\x0f\xf4\x4d\x7e\xc7\x15\xe9\xfe\x88\xde\x63\x7a\xb0\x7f\xff\x05\xc2\xb7\x15\xa6\x83\xb3\xc5\xeb\xb7\x4b\x2a\x57\xf3\x52\xb3\xfb\x7e\x7a\x7f\xe0\xf7\x9b\x7f\x34\x6a\x1d\x82\x43\xb9\xf5\xd5\xe8\x46\x80\xbc\xcf\x46\x1e\xf3\x77\x8e\x96\x6c\x82\xe0\x76\x71\xf2\xe3\x5d\x12\x95\x95\x51\x1d\xaf\x29\x56\xa3\xf1\x3f\xe2\xfc\x1d\x00\x00\xff\xff\x23\x9d\xe7\xae\x80\x18\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 6272, mode: os.FileMode(420), modTime: time.Unix(1464163261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

