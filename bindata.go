// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\xab\xbe\x49\x20\x7f\xa7\x2a\xed\x6b\x06\x3f\x74\x4d\x8a\x19\x68\xd3\x35\xce\xb6\x87\x20\x08\x14\x99\x76\xb4\xc9\x92\x4b\xd2\xae\x03\x4d\xff\xfb\xee\x8e\x14\x4d\x3b\xf6\x92\xae\xcd\xb2\x02\x0b\x10\x98\x3c\x8a\xc7\xcf\xfd\xfa\xf0\x78\x78\x08\xc7\xef\xe1\xf4\xfd\x39\x9c\x1c\x0f\xce\xe1\xfc\xc7\xc1\x10\xde\x0c\xde\x9e\xc0\xb3\x10\x97\x06\x1a\x0a\x05\x13\x51\x09\x99\x69\x31\x82\xeb\x5b\x98\x09\xa9\x0a\xa5\x41\xd7\x75\x99\x80\xaa\xe7\x32\x17\x30\x96\xf5\x14\x9a\x26\x1d\xf2\xb4\x6d\xd3\x70\x96\xe5\xbf\x67\x13\x41\xc2\x9f\xcc\xb0\x6d\xc3\xb0\x98\xce\x6a\xa9\x21\x0e\x83\xe8\xfa\x56\x0b\x15\xe1\x40\x54\x79\x3d\x2a\xaa\xc9\xe1\x6f\xaa\xae\x48\x30\x9e\x6a\xfa\x99\x14\xfa\x66\x7e\x9d\xe6\xf5\xf4\x70\x52\xeb\x62\xa6\x0e\xcb\x7a\x42\x0b\x4a\xcb\xbc\xae\x16\x76\x88\x3b\x49\x4d\xd3\x3c\x07\x99\x55\x78\x62\x3a\xe0\x43\x14\x9e\x87\xd2\xb4\x6d\x69\x49\x54\x23\x40\x41\x2f\x0c\x17\x99\x84\x2b\xe8\x03\x9d\x96\xbe\xcb\xa4\xba\xc9\x4a\x27\xc4\xa3\xd3\xe1\x0c\x75\xea\xb1\x93\xd9\xe3\xd2\x81\xae\xb3\x30\xd4\xb7\x33\x32\x0a\xd2\xd3\x6c\x2a\x50\x25\x2d\xcf\x73\xdd\xa0\x71\x1e\x84\x77\x42\xdf\xd4\x23\x45\x47\x86\xe3\x79\x95\x43\xfc\x7f\xdc\xb3\xd7\x6d\xea\xf9\x1a\xe2\xa6\x31\xbb\xf6\x8a\x64\x6f\xa1\xe1\xa8\x0f\xe8\x32\x99\x4d\x15\x41\x2f\xc6\x28\x87\x3f\xa0\x12\xf0\xa2\x6d\x13\xdc\x88\xa6\xd0\x02\x7e\x9a\xfe\x92\x49\x44\x60\xc6\xc3\xb2\x20\xcf\xdb\x89\xa6\x15\x33\x76\xee\x6f\x9a\x0c\xbd\xe0\x89\x20\x4a\xa3\xee\xab\x73\xb4\x8b\xc6\xd6\x53\x3d\xd8\x06\xeb\x4c\xe8\xb9\xac\x9e\x16\x57\x13\x06\x14\x19\x21\xf9\xbf\x96\x61\xf0\x71\x2e\xe4\x6d\x02\x99\x9c\x28\x42\xc9\x89\x95\x9e\x8a\x4f\x3f\xcc\xc7\x63\x21\xe3\x8b\x4b\x92\x34\x6d\x2f\x81\x8b\x4b\x8c\xac\x90\xe3\x2c\xc7\x39\x86\x8c\x35\x29\x3d\xd5\x60\x12\xc9\x0f\xe1\x1b\x99\x4d\xa6\xa2\xe2\x3c\x62\x73\xd3\xd7\xb5\x49\xa2\x00\x27\x98\x58\x34\x25\x2b\x43\x9b\x5f\xb4\xc2\xba\xfa\x10\x51\x29\xe0\x10\x97\x23\x4f\x27\x7a\x12\x3a\x57\xbe\x42\xb4\x26\x43\x9f\x03\xea\x13\x1f\x21\x1d\x7e\x78\x3b\xa8\x00\xd3\x89\x4a\x25\x08\xc6\x35\xe6\x5f\x02\x0b\xfa\xdc\xec\x27\xad\x79\x3d\x73\x2e\x33\x33\xdf\x5b\xd6\xf1\xb8\x3b\x60\x77\xf4\x21\x9b\xcd\x10\x5b\x4c\x33\x0a\x12\xbb\xf9\x55\x59\x64\xca\xf7\x3b\x0b\x20\x8a\x9d\x9e\x9d\xc7\x2c\xee\x6c\xea\xa1\xb4\x87\x07\x12\x64\x6b\xbe\xad\x4a\x4c\x97\x59\x89\xae\x8e\x49\x9c\x40\xb4\xb7\x3f\x8a\x12\x82\xe6\xad\x8b\x4c\xc7\x51\xc2\x2b\x50\x8a\x2a\xfe\x6b\x13\x8d\x7d\xbd\xde\xc5\xcb\xa3\xcb\x04\x9e\xbf\xc4\x72\x66\x07\x8a\x52\x09\xf2\x62\x57\xcf\x1c\xa5\x60\x97\xae\x2b\x4f\x57\xc2\x89\x74\xb4\x4e\x07\x0f\x43\x81\x27\x50\xe0\x70\xfb\xb3\x3e\x54\x45\x69\xdc\x8e\x1c\x95\x9e\x50\x5e\x8e\xe3\x68\x6a\xd5\xed\xff\x6f\xd1\x33\xc9\x7a\x04\xfb\x2a\x4a\x1e\xa2\x9e\x81\x75\x7e\xdd\x1e\xcb\xfb\xad\x5b\xf3\x4f\xbb\x5b\xd3\x97\x66\x85\x97\x7c\xbb\xf2\xc3\x23\x61\x6f\x68\x6a\x37\xfd\x55\x16\x5a\x0c\x39\x2b\x38\x59\x7a\xae\x2e\x6c\x95\x85\x41\x6b\x09\xc6\xab\x36\x53\xbe\xa3\xba\x2c\xf1\x67\xad\xb4\x43\x2e\x9e\x62\x55\x39\x6c\x36\xc5\xc7\x7e\xed\x3c\x60\xe6\x09\x14\xdf\x61\x32\x05\xab\x0a\xf6\x2e\x82\xd8\x60\xb4\xf0\x90\x45\xcc\x9e\x34\x4d\xc9\xbd\x14\xef\x63\x71\x3d\x77\xc0\x57\x02\x3a\xd4\x7c\xd5\x19\x43\x64\x86\x9c\x89\xc5\x1e\x65\xa3\x51\x04\x1e\x01\xa4\x3f\x57\x36\x5d\x98\x16\xc8\x32\x8f\x80\x1d\x6d\xf8\x5f\x31\x2b\x55\xb4\xbe\x41\xc1\x68\xbb\x0b\x17\x26\xc4\xd2\x45\x08\x9d\x99\x67\x7a\x23\x5e\xbc\x09\x0c\x4b\xba\x38\x19\x64\x0c\x6c\x98\x67\x15\xdf\x64\xc1\x48\x28\x46\xb1\x4e\xa3\x5b\x71\xf2\xa6\x9d\x10\x0f\xfe\x1e\x46\x84\x40\xe5\xd6\xa7\xdc\x3f\x5f\x62\x97\xf1\x81\x22\x73\x56\x7f\xb2\x0c\xd3\x39\x9c\x4f\x8f\x09\x2d\xbb\x7f\x4b\x99\xba\x2a\x8d\x6d\x95\xad\x04\x36\x8c\x9e\xc4\xc5\x31\x08\x24\x5f\x80\xa4\x8d\x93\xc5\x4e\x51\x2b\x79\x8b\xaa\xac\x65\xa9\x72\xb4\xd2\x21\x3d\x59\x8a\x7c\x03\xe5\x23\xe0\x7a\x91\x6c\x42\x43\x2c\x29\x3a\x48\xbd\xc2\xab\x30\xc7\x0e\x2e\xe6\xd2\xb2\xf5\xb3\x46\x9d\x5e\x6e\x4e\xb1\x1f\x1b\xdf\x46\xdf\x80\x2d\x3b\x4d\x90\x62\x5a\x2f\xc4\x37\x6d\xc2\x44\xe8\xa8\xa3\x82\xab\x25\x41\x3f\x13\x6a\x5e\xde\x69\x9c\x36\xc4\xee\x1a\xb1\x62\xd3\x40\xb9\x6a\x5e\x11\x08\x3c\x31\xcf\xb8\x3b\xe0\xe9\x69\xc5\xf2\xca\x53\xd3\x0a\xaa\x71\x19\xb3\xf6\xa2\x59\xbf\x1b\xd8\xca\x0d\x13\x39\x11\x8c\x8d\xeb\x7d\x84\x61\x4b\xd7\x84\x33\xa1\x77\x13\xd7\x8e\x1b\xe6\xea\xee\x75\x14\x42\x74\x10\x39\x07\xf9\x4f\x38\xfb\xcd\x66\xae\xd9\x2e\x9d\x3a\x0c\xc3\xd0\xdc\x4e\x39\xd8\xf1\x36\xc8\x5e\x48\xba\x96\xe7\xe0\xb3\x4c\xbb\xaf\x03\xeb\x82\xb0\x25\x0a\xdb\xc3\xd0\xae\x5d\x7f\x36\x28\x07\x57\xcb\x84\x19\x7e\x67\xa1\xe6\xf5\xbc\xda\x28\x55\x2f\x73\xe5\x96\x97\x13\xee\x32\xa9\xbb\x72\x5d\xe7\x6a\x7b\xf8\x67\xdc\x73\x08\xf0\x9f\x21\xaf\x7b\x1d\x51\x16\xca\xf8\x41\x22\xc5\xdd\xe1\x5c\x36\xe2\xf1\x49\xd7\x2f\x22\xa4\x16\x7c\x01\x02\xc1\x49\x5f\x97\xb5\x12\xc4\xb7\x80\x7f\x14\xa8\xa5\xf2\x38\x75\x55\x13\x9d\xc0\x96\xc6\x97\x91\x2e\xb5\xa1\x7c\xfa\xa9\x58\xea\x98\x1f\xaf\x5f\x8b\xcf\x83\xa5\xd7\xc8\x2f\xd1\xdd\x9c\x07\xfc\xec\xd9\xd2\x4f\x3e\x1d\xd1\x7b\x4c\x0f\xf6\xef\xdf\x40\xf8\xb6\xc2\x38\x38\x1b\xbc\xfe\x75\x49\xe5\x6e\x5e\x32\xbb\xef\xa6\xf7\xff\xf8\xfd\xe1\x2f\xec\xb9\x43\xb0\xaf\x36\x9e\xd8\x0f\x02\xe4\xbd\xb1\x3d\xe6\x6f\x1d\x2d\xd9\x04\xc1\xe3\xe2\xde\xf7\x8f\x49\x54\x56\x46\x75\xbc\xa2\x58\x46\xe3\xbf\x78\xff\x0c\x00\x00\xff\xff\x27\x6b\x33\x83\xad\x15\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 5549, mode: os.FileMode(420), modTime: time.Unix(1464316737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

