// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x6f\x6f\xdb\x36\x13\x7f\x2d\x7d\x8a\xab\x9e\x26\x90\x9e\xaa\x4a\xfb\xb6\x43\x06\x74\x6d\x8a\x19\x68\xd3\xb5\xce\xb6\x17\x45\x11\x30\x32\xe5\x6a\x93\x25\x97\xa4\x5c\x07\x9a\xbe\xfb\xee\x48\x8a\xa6\x15\xa7\x75\xb7\x66\xd9\x80\x14\x28\x22\x1e\xc9\xe3\xef\xfe\xfd\x8e\xf4\xd1\x11\x3c\x7f\x0d\xa7\xaf\xcf\xe0\xe4\xf9\xe4\x0c\xce\x7e\x9c\x4c\xe1\xc5\xe4\xe5\x09\xdc\x0b\x71\x6a\xa2\xa0\x94\x30\xe7\x35\x17\x4c\xf1\x19\x5c\x5c\xc2\x92\x0b\x59\x4a\x05\xaa\x69\xaa\x14\x64\xd3\x8a\x9c\x43\x21\x9a\x05\x74\x5d\x36\xd5\xc3\xbe\xcf\xc2\x25\xcb\x7f\x67\x73\x4e\xc2\x9f\xcc\x67\xdf\x87\x61\xb9\x58\x36\x42\x41\x1c\x06\xd1\xc5\xa5\xe2\x32\xc2\x0f\x5e\xe7\xcd\xac\xac\xe7\x47\xbf\xc9\xa6\x26\x41\xb1\x50\xf4\x67\x5e\xaa\x0f\xed\x45\x96\x37\x8b\xa3\x79\xa3\xca\xa5\x3c\xaa\x9a\x39\x4d\x48\x25\xf2\xa6\x5e\xe1\x67\xd7\x3d\x04\xc1\x6a\x3c\x26\x9b\x68\xcd\x12\x0f\x41\x69\xd6\xf7\x34\xc5\xeb\x19\xa0\x20\x09\xc3\x15\x13\x70\x0e\xc7\x40\x47\x64\xaf\x98\x90\x1f\x58\xe5\x84\x78\x5e\x36\x5d\x8a\xb2\x56\x85\x93\xd9\x33\xb2\x89\x6a\x58\x18\xaa\xcb\x25\x59\x02\xd9\x29\x5b\x70\x54\x49\xd3\x6d\xae\x3a\xb4\xc8\x83\xf0\x8a\xab\x0f\xcd\x4c\xd2\x91\x61\xd1\xd6\x39\xc4\xff\xc7\x3d\xf7\x87\x4d\x89\xaf\x21\xee\x3a\xb3\xeb\x7e\x99\xde\x5f\x29\x78\x72\x0c\xe8\x27\xc1\x16\x92\xa0\x97\x05\xca\xe1\x0f\xa8\x39\x3c\xea\xfb\x14\x37\xa2\x29\x34\x81\x4b\xb3\x5f\x98\x40\x04\xe6\x7b\x5a\x95\xe4\x6e\x3b\x50\x34\x63\xbe\x9d\xcf\xbb\x8e\xa1\x17\x3c\x11\x44\x59\x34\xac\x3a\x43\xbb\xe8\xdb\x7a\x2a\x81\x5d\xb0\xde\x72\xd5\x8a\xfa\x76\x71\x75\x61\x40\x91\xe1\x42\xff\x6f\x44\x18\x7c\x6c\xb9\xb8\x4c\x81\x89\xb9\x24\x94\x3a\x9b\xb2\x53\xfe\xe9\x87\xb6\x28\xb8\x88\xdf\xbd\x27\x49\xd7\x27\x29\xbc\x7b\x8f\x91\xe5\xa2\x60\x39\x8e\x47\x21\x7b\x21\xd8\x7c\xc1\x6b\x9d\x37\xda\xbc\xec\x59\x63\x92\x26\xc0\x01\x26\x12\x0d\xc9\xaa\xd0\xe6\x13\xcd\x98\xb3\xb3\x5f\x45\xa9\xf8\x54\x61\xde\xcc\xe3\x88\x72\x5f\x2d\x14\x2e\x8d\x12\xef\x00\x74\x23\x0c\x7e\x7c\x8a\x50\x4d\x7a\x3e\x04\x54\xce\x3f\x42\x36\x7d\xf3\x72\x52\x03\xe6\x12\xd7\x7a\x19\x9a\x87\x2b\xa3\x0e\x53\x3b\x28\x1a\x01\xb8\x7b\x45\x12\xa3\x8c\xce\xc8\x9b\xa5\x73\x9e\x19\x0d\x7e\x1b\xfc\x8f\x5b\x09\x7b\x09\xdf\xc3\x23\x33\xd2\x7a\x1f\xa0\xde\x94\xf4\x06\x74\xd2\x20\xf2\xd3\x3c\x46\x37\xc5\xab\x24\x09\xcd\x92\x61\x53\x1f\x85\x7a\x84\x7e\x3e\x06\xb6\x5c\xa2\x13\x62\x1a\x91\xef\x05\x96\x96\xb6\x87\x57\x92\x93\x51\x43\x6d\x69\x0f\x06\xd7\x01\x3e\xf7\x00\xa7\x3a\xa8\x4f\xb6\x4b\x33\xde\xc7\x54\x02\x4a\x7e\xc4\xed\xf7\x8e\xa1\x2e\x2b\x63\x2d\x92\x44\x76\x42\x39\x52\xc4\xd1\xc2\xaa\x3b\xf8\xdf\x2a\x31\x89\xf3\x04\x0e\x64\x94\xee\xa3\x5e\x03\xdb\x38\xe3\xaa\xf9\xfb\x58\xb7\xe5\x9f\xfe\x7a\x4d\xba\x10\x9e\x56\x25\x93\x7e\x65\x68\x01\x44\xb1\xab\x8b\xcf\x80\x76\x15\x78\x65\x7b\x12\x69\x5f\x79\x84\xe8\x7d\x0e\xd9\x68\x13\x3d\x0c\x7a\x5b\xd3\x5e\xc2\x9b\xda\x9b\x35\x55\x85\x7f\xb6\xaa\x29\x34\x59\xba\x49\x51\x6d\x1d\x85\xc1\xae\x76\x86\x9a\x71\x0a\xe5\x83\xc7\x88\x05\x37\x4a\xac\x16\xda\xe7\x91\x6f\x6c\xea\xca\x96\x14\x56\xae\xd9\x94\x65\x19\xb9\x91\xe2\xfa\x9c\x5f\xb4\xf3\x98\xb6\x26\xbe\x80\x4e\x35\xab\x06\x6b\x88\x40\x90\xa7\xb0\xc6\x22\x36\x9b\x45\x5b\x96\xfe\x5c\xdb\xb4\xd0\xd5\x48\xa6\x79\xa4\xe7\xaa\xd5\x5f\xa5\x99\xa1\xa6\xf9\x11\xed\xa1\xf1\x2e\x2c\x18\xf8\xb5\x8b\x04\x7a\x33\x67\x6a\x14\x17\xbd\x09\x0c\x33\xb9\x78\x18\x64\x1a\xd8\x34\x67\xb5\xee\x1e\xc1\x8c\x4b\x8d\x62\x9b\xba\x76\xe2\xd4\x9b\xae\x85\x78\xf8\xd7\x30\x22\x04\x2a\xab\x63\xca\xf1\xb3\x35\xb6\xf3\x37\x14\x99\xb7\xcd\x27\xed\x7b\xc3\xba\xe4\x70\x7d\x7a\x4c\x68\xb5\xfb\x77\x94\xa3\xab\xc6\xd8\x56\xd3\x46\x60\xc3\xe8\x49\x5c\x1c\x83\x40\xe8\xa6\x43\xda\x74\xb6\x20\x30\xac\x20\x72\x8d\xe0\xd2\x51\xc6\x80\xee\x64\xcd\xf3\x11\xb2\x1b\xc4\x72\xce\x1c\x00\x04\x93\xa1\x57\xe4\x53\xec\x39\x39\xde\x8f\xe2\x9b\x3b\xd7\x51\xec\x39\x23\xdd\x8f\xb5\x66\x13\x24\x2a\xa1\x81\xf1\xf8\x7a\xa9\x91\x00\xb3\x90\x70\xa5\x68\x3e\xa5\x70\xd1\x2a\x60\xb9\x6a\x91\x9b\xdd\xd4\xc1\x8c\xe6\x90\x0f\x51\x69\xf2\x4d\x83\x65\x79\xc3\x4e\xa0\x23\x4c\x69\xba\x36\xe1\xd5\xe7\x02\x2f\x7f\xc5\x65\x74\x17\xdb\xff\x44\x6c\xf7\x89\xa8\xe0\x8b\x66\xc5\xef\x22\x3a\x8e\xe8\x3f\x18\x82\x39\x57\xd1\xd0\xdd\xce\xd7\xe4\xfa\xb7\x5c\xb6\xd5\x95\xfb\xf7\x48\xec\x6e\x40\x56\x6c\xee\xe1\xae\x41\x6d\x7a\x22\xdc\x72\xeb\x74\xd7\x97\xdb\xef\x94\xb6\x55\xde\x76\xa7\x44\x35\xe9\x90\x22\x5b\x0f\xe3\xed\xeb\x8e\xb6\x72\x64\xa2\x4e\x04\x63\xe3\xe8\x31\xa1\x8b\xd6\xbd\xe5\xf4\x1d\x65\x18\xb8\x57\x9d\x69\xcc\xc3\x95\x14\x85\x10\x1d\x46\xce\x41\xfe\xf3\xdf\xae\x19\xe7\x9a\x7d\xec\xf5\x8e\xf3\xf4\x4b\xc0\xc1\x8e\x77\x41\xf6\x42\x32\xdc\xd6\x0f\xbf\xca\xb4\x2f\x3d\x1e\x86\x20\xec\x88\xc2\xee\x30\xf4\x5b\x37\x3a\x1b\x94\xc3\xf3\x75\xfa\xf9\x42\xcd\x9b\xb6\x1e\x95\xaa\x97\xb9\x62\xc7\x03\x1c\x77\x99\xd4\xdd\xb8\x6e\x70\xb5\x3d\xfc\x2b\xae\x6e\x08\xf0\x26\x92\xf1\x51\x3a\x66\xab\x2f\x3a\xa2\x2a\xa5\xf1\x03\x75\xad\x2b\x3d\x43\x1b\x71\xf3\x4d\xc3\x2f\x22\xa4\x96\x82\x0b\xdd\x44\xb3\x67\x55\x23\x39\xb6\x8b\x10\xf0\x1f\x05\x6a\x2d\x3d\x4e\xdd\xd4\xc4\x20\xb0\xa5\xf1\xf7\x48\x97\x9e\x56\xfa\xf4\x53\xbe\x56\xb1\xfe\x0d\xe4\x5b\xf1\x79\xb0\xf6\xde\xa0\x6b\x74\xb7\xce\x03\xfd\x62\xdf\xf1\x44\xba\x3d\xa2\xf7\x98\x1e\xec\xbf\x7f\x03\xe1\xdb\x0a\xd3\xc1\x19\xf1\xfa\xb7\x25\x95\xab\x79\xa9\xd9\xfd\x7a\x7a\xbf\xe3\xf7\xfd\x7f\x1c\x6a\x1d\x82\x03\x39\xfa\x75\x68\x2f\x40\xde\xcf\x43\x1e\xf3\xf7\x8e\x96\x6c\x82\xe0\x71\x71\xf2\xdd\x4d\x12\x95\x95\x51\x1d\x6f\x28\x56\xa3\xf1\x7f\xc5\xf9\x33\x00\x00\xff\xff\x7a\xe6\x8f\xbb\xe9\x17\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 6121, mode: os.FileMode(420), modTime: time.Unix(1463640571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

