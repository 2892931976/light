// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x41\x6f\xe3\x36\x13\x3d\x4b\xbf\x62\x56\xd8\xef\x83\xd4\x68\xe9\xee\x75\x0b\x1f\xd2\xc4\x41\x0d\x34\x49\x9b\xa4\xed\x21\x08\xba\xb4\x34\x92\xd5\x95\x44\x2d\x49\x6d\x6c\x08\xfc\xef\x05\x49\xd9\x92\x6c\xcb\xc9\xba\x58\x14\xe8\xc9\xd4\x78\x38\x9c\x79\x7c\x6f\x34\x9a\x4c\xe0\xf2\x16\x6e\x6e\x1f\x60\x76\x39\x7f\x80\x87\x9f\xe6\xf7\x70\x35\xff\x79\x06\x6f\xdc\xc9\x04\xe6\x12\x32\x01\x29\x96\xc8\xa9\xc4\x18\x16\x6b\x58\xd3\x12\x24\x63\x79\x08\x82\xd5\x3c\x42\x48\x38\x2b\xa0\x69\xc8\xbd\x79\x54\x8a\xb8\x15\x8d\x3e\xd1\x14\xb5\xf1\x17\xbb\x54\xca\x75\xb3\xa2\x62\x5c\x82\xef\x3a\xde\x62\x2d\x51\x78\xae\xe3\x61\x19\xb1\x38\x2b\xd3\xc9\x5f\x82\x95\xda\x90\x14\x52\xff\x08\xc9\x23\x56\x7e\xd1\xcb\x34\x93\xcb\x7a\x41\x22\x56\x4c\x9e\x99\x5c\x6a\xe7\x9c\xa5\x9e\xeb\x34\xcd\x3b\xe0\xb4\x4c\x11\xc8\xdc\x84\x16\x4a\x69\x2b\xb1\x3f\xef\x00\xcb\x18\x94\x72\x03\xd7\x95\xeb\xca\x64\x73\x43\x0b\x54\x0a\x84\xe4\x75\x24\x1b\xe5\xba\xbd\x18\xd7\x28\x97\x2c\x16\x7a\x47\x52\x97\x11\xf8\xdf\x35\xcd\xdb\x76\x47\xd0\x6d\xf6\x4d\x51\x9c\x16\x62\xb6\xaa\xb8\x52\x81\x36\xdc\xa1\xa8\x73\xb9\xb1\x40\xe3\x3a\x5f\x28\xd7\x95\x3a\x42\x16\x52\x9f\x97\x95\xa9\xeb\x38\x8b\x3a\x01\x30\xc5\x93\x1f\xeb\x24\x41\xee\x3a\x0e\xe5\xa9\x80\xc7\xa7\xac\x94\xc8\x13\x1a\x61\xa3\x5c\x27\x70\x07\xe5\x5d\x71\x9a\x16\x58\xda\x02\x9d\xa6\xc9\x12\x20\x17\xcc\x54\x07\x59\xa2\x73\xd3\x4f\x4a\x41\x03\x4d\x83\x7a\xb5\x39\x79\x0a\x1f\xf5\xcd\xc8\x42\x2a\x05\x1f\xcd\xe6\x6d\xd4\x73\x9e\xda\x80\xc6\xa8\x63\xce\xc5\xbc\xb4\x96\xcd\x6e\x9b\xb9\x20\x77\x58\xe5\x34\x42\x5f\x9b\x43\xf0\xde\x36\xde\x99\xd7\x34\xe4\x77\xca\x95\xf2\xce\x3c\xe5\x85\x66\x97\xd3\xf3\x47\x2a\x7d\x2f\xfc\x9f\xf0\x42\xc8\xb1\xf4\x37\xde\x41\xf0\xf8\xfe\xc3\x53\x08\xef\xde\x07\x66\x4b\xc2\x38\xfc\x19\x82\x80\x0f\xd3\x36\xb1\x8d\xa7\x86\xd1\xe9\x65\xf7\xb0\xae\x90\x9c\xe7\x19\x15\x57\x8c\xb7\x69\xb6\xf0\x4d\x81\x56\x15\x96\xb1\xaf\x9f\x42\x1d\x61\xc7\xd9\x17\x41\xd0\x45\xc3\x5c\xe0\xd1\x00\xa2\xef\xdc\xe2\xe9\x38\x5b\xac\xf4\xfe\xd1\x94\x5e\x99\x50\x87\xc7\x6e\xd4\x92\xc9\x36\xf2\x5c\x5c\xb0\xa2\xca\x71\x75\x3c\xb4\x8d\xe3\xee\x17\xa7\x49\xd8\x34\xe4\xbc\x64\x72\x89\xdc\x82\xfa\xf8\xa4\xf9\xe7\xda\xea\x06\x7f\x85\x80\x9c\xc3\x14\xb4\x14\xc9\x35\xe5\x62\x49\x73\x7f\x10\xde\xc9\x12\xe3\xf3\x66\x0a\x65\x96\x6f\xee\x27\x67\x29\x99\x71\xce\xb8\x8f\x9c\xb7\xc0\x71\x94\x35\x2f\x3b\xd4\xc6\x52\xef\x9f\xdf\x55\xd0\x22\xde\x5f\x2f\xea\x84\xfc\xc1\x33\x89\xf7\x86\x61\x86\x88\xc1\x9e\x18\x54\xc7\xff\x6e\xb3\x15\x63\xb5\xdc\x15\x99\x66\x5e\xd6\xd1\xce\x64\xa8\x4b\xaa\x96\x5d\xa2\xd5\x52\xb3\xdd\x3b\x6b\xfb\x11\x99\x4b\x46\xfd\xec\xec\xbd\xbe\x35\x1d\xf9\x73\x8d\x7c\xad\x63\x24\x85\x24\xf7\x15\xcf\x4a\x99\xf8\x3a\xd7\x36\xcd\x20\x84\x6a\x49\x08\xd1\x82\xd6\x38\x5d\xe2\xa2\x4e\x7d\xb3\x2b\xe8\x5b\xf4\xe1\xad\x5b\x4b\x77\xfc\x0c\xe4\xb6\xd2\x34\x00\x2f\x2b\x05\x72\xe9\x6d\x41\xd1\x25\x5f\xa2\x90\xf6\x9a\x75\x75\x31\x0a\xb9\x5b\x9f\xf6\x6d\xa5\xde\x39\x5b\xc0\xc6\x29\xe6\x98\x48\xdb\xfa\xf5\x53\x08\xff\x1f\xb2\xa0\x69\xfa\x02\x7a\x81\x64\xaf\x0c\xb8\x11\x59\x6f\x69\xd9\xa8\xa5\xb3\x52\x8a\xfc\xaa\x31\xbb\x63\xcf\x16\xbc\x10\x36\x88\x91\xfb\x88\x96\x26\xac\xc1\x6f\x84\xa4\x07\x38\xda\x99\x36\xd7\x31\x30\x6e\x6f\x64\x48\xe7\xe3\xb8\x8e\x60\xda\xd3\xd5\x6f\x65\xd1\x29\x6b\xa8\x3e\x6d\x88\x63\xde\xbe\x44\xec\xce\x83\x82\x3b\xa8\xb8\xbe\xe4\x1c\x75\x04\x56\xeb\xa7\xe3\xb9\xbb\x0d\x83\xa3\xb0\x4d\xe0\x43\x87\xfb\x6c\x85\xd1\x2e\xe6\xdf\x14\x65\xf8\xde\xe4\xb0\x05\xbb\xb5\x72\x14\xe4\x8e\x3d\x8b\xf3\x24\xc1\x48\x62\xec\x07\x83\x0e\xe1\x0e\x5a\x68\x5f\x3c\x75\x15\x53\x89\x56\x3c\x5f\x51\xe0\x81\xfa\xf6\xcb\x3b\x54\xdd\xe1\xe2\x76\x6b\xb3\xd9\x8c\x55\x36\x5e\x4d\x8c\x39\xfe\x77\xaa\x49\xb1\xed\x6a\xa3\x3d\x6c\xd3\xee\xee\x4c\xf4\x83\xfa\x32\xf3\x97\xf9\xd7\x36\x1f\x03\x46\xdf\xff\x9a\x7e\x42\xab\x2a\x77\xff\x05\xb3\xa7\xe4\xf6\xc4\xf1\x16\x79\xa8\xa1\xed\x6b\xf7\xeb\x5e\xc5\x63\x4d\xf2\xd5\xef\xc7\x13\x9b\xe5\x37\xe1\x45\x4b\x88\x63\xe8\x1e\x46\x76\x3b\xf9\x4d\xb7\x13\xd3\xe0\xee\xfe\x41\x27\x3d\x79\x72\x19\x03\xbc\xf5\x1b\xe7\x76\x9e\x89\x96\xdc\x9c\x3d\xef\x0b\xd5\x5c\xd1\xa9\x4a\xed\x7a\x78\x5f\x81\x31\x26\xc8\x41\x9f\x46\x2e\x72\x26\xd0\x48\xcf\x4a\x8b\x4a\xba\xa3\x0a\x93\x99\x1e\x81\x8c\xff\x0d\xae\xa4\x1f\xd8\xe3\x56\x6d\x9a\x7d\x09\xcd\x72\x2c\x76\xee\xc2\xc4\xec\x28\x4b\x25\x0d\x61\x65\x4e\x3c\x3a\x91\x1c\xe0\xc4\xcb\x92\x7b\xdd\x10\x31\x1c\xec\x4f\x9d\x4b\xf6\x24\x37\xfc\x0a\x18\x3c\x58\x3a\x1a\x04\x4f\x1d\x43\xf6\xaf\xd2\x79\x19\xa9\x11\x94\x5e\xd6\xcf\xbf\x37\x8a\x8c\x40\xa8\x3a\xca\xb7\x40\xce\x38\xf7\x83\x1f\x4e\x14\x41\xf7\x1e\xb2\x84\x34\x53\x4e\x77\x9e\xf9\xe2\xb7\xcb\xbf\x03\x00\x00\xff\xff\x19\x0a\x59\xc1\xf8\x10\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 4344, mode: os.FileMode(420), modTime: time.Unix(1473412496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

