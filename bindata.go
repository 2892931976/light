// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x55\x6b\x02\x69\x55\x95\x16\x18\xf6\xd0\x21\x03\xba\x36\xc5\x0c\xb4\xe9\x5a\x67\xdb\x43\x51\x18\x8c\x4c\xbb\xda\x6c\xd1\x25\x29\xd7\x81\xa6\xef\xbe\x3b\x92\xa2\x69\xc7\x59\xdd\x2d\x59\x36\x20\x01\x02\x93\x47\xf2\xf8\xbb\x7f\x3f\x92\x3a\x3a\x82\xe7\xaf\xe1\xf4\xf5\x19\x9c\x3c\x1f\x9c\xc1\xd9\x8f\x83\x21\xbc\x18\xbc\x3c\x81\x7b\x31\x0e\x0d\x34\x54\x0a\xa6\xbc\xe6\x92\x69\x3e\x86\xf3\x0b\x58\x70\xa9\x2a\xa5\x41\x0b\x31\xcb\x41\x89\x46\x96\x1c\x26\x52\xcc\xa1\x6d\x8b\xa1\xe9\x76\x5d\x11\x2f\x58\xf9\x3b\x9b\x72\x12\xfe\x64\x9b\x5d\x17\xc7\xd5\x7c\x21\xa4\x86\x34\x8e\x92\xf3\x0b\xcd\x55\x82\x0d\x5e\x97\x62\x5c\xd5\xd3\xa3\xdf\x94\xa8\x49\x30\x99\x6b\xfa\x99\x56\xfa\x43\x73\x5e\x94\x62\x7e\x34\x15\xba\x5a\xa8\xa3\x99\x98\xd2\x80\xd2\xb2\x14\xf5\x12\x9b\x6d\xfb\x10\x24\xab\x71\x9b\x62\x60\x34\x2b\xdc\x04\xa5\x45\xd7\xd1\x10\xaf\xc7\x80\x82\x2c\x8e\x97\x4c\xc2\x08\x8e\x81\xb6\x28\x5e\x31\xa9\x3e\xb0\x99\x17\xe2\x7e\xc5\x70\x21\xab\x5a\x4f\xbc\xcc\xed\x51\x0c\xb4\x60\x71\xac\x2f\x16\x64\x09\x14\xa7\x6c\xce\x51\x25\x0d\x37\xa5\x6e\xd1\xa2\x00\xc2\x2b\xae\x3f\x88\xb1\xa2\x2d\xe3\x49\x53\x97\x90\x7e\x8d\x6b\xee\xf7\x8b\xb2\x50\x43\xda\xb6\x76\xd5\xfd\x2a\xbf\xbf\xd4\xf0\xe4\x18\xd0\x4f\x92\xcd\x15\x41\xaf\x26\x28\x87\x3f\xa0\xe6\xf0\xa8\xeb\x72\x5c\x88\xa6\xd0\x00\x4e\x2d\x7e\x61\x12\x11\xd8\xf6\x70\x56\x91\xbb\x5d\x47\xd3\x88\x6d\x7b\x9f\xb7\x2d\x43\x2f\x04\x22\x48\x8a\xa4\x9f\x75\x86\x76\x51\xdb\x79\x2a\x83\x5d\xb0\xde\x72\xdd\xc8\xfa\x76\x71\xb5\x71\x44\x91\xe1\xd2\xfc\x0b\x19\x47\x1f\x1b\x2e\x2f\x72\x60\x72\xaa\x08\xa5\xc9\xa6\xe2\x94\x7f\xfa\xa1\x99\x4c\xb8\x4c\xdf\xbd\x27\x49\xdb\x65\x39\xbc\x7b\x8f\x91\xe5\x72\xc2\x4a\xec\x6f\x85\xec\x85\x64\xd3\x39\xaf\x4d\xde\x18\xf3\x8a\x67\xc2\x26\x4d\x84\x1d\x4c\x24\xea\x92\x55\xb1\xcb\x27\x1a\xb1\x7b\x17\xbf\xca\x4a\xf3\xa1\xc6\xbc\x99\xa6\x09\xe5\xbe\x9e\x6b\x9c\x9a\x64\xc1\x06\xe8\x46\xe8\xfd\xf8\x14\xa1\xda\xf4\x7c\x08\xa8\x9c\x7f\x84\x62\xf8\xe6\xe5\xa0\x06\xcc\x25\x6e\xf4\x32\x34\x0f\x67\x26\x2d\xa6\x76\x34\x11\x12\x70\xf5\x92\x24\x56\x19\xed\x51\x8a\x85\x77\x9e\xed\xf5\x7e\xeb\xfd\x8f\x4b\x09\x7b\x05\xdf\xc3\x23\xdb\x33\x7a\x1f\xa0\xde\x9c\xf4\x46\xb4\x53\x2f\x0a\xd3\x3c\x45\x37\xa5\xcb\x2c\x8b\xed\x94\x7e\x51\x97\xc4\xa6\x87\x7e\x3e\x06\xb6\x58\xa0\x13\x52\xea\x91\xef\x25\x96\x96\xb1\x87\xcf\x14\x27\xa3\xfa\xda\x32\x1e\x8c\xae\x02\x3c\x0a\x00\xe7\x26\xa8\x4f\x36\x4b\x33\xdd\xc7\x54\x02\x4a\x7e\xc4\xe5\xf7\x8e\xa1\xae\x66\xd6\x5a\x24\x89\xe2\x84\x72\x64\x92\x26\x73\xa7\xee\xe0\xab\x65\x66\x13\xe7\x09\x1c\xa8\x24\xdf\x47\xbd\x01\xb6\x76\xc6\x65\xf3\xf7\xb1\x6e\xc3\x3f\xdd\xd5\x9a\x4c\x99\x5c\x8d\xc8\x97\x57\xe6\xd4\xd9\x1c\x0d\x9a\x7d\x56\xb9\x84\x8d\xa3\xce\xd5\x66\x90\xb8\xb6\x86\xc6\x62\x36\xc3\x9f\x8d\xaa\x88\x6d\xb6\xad\x53\xcd\xa0\x24\x77\xba\xd9\x1e\xb0\xed\xe7\x50\x3d\x78\x8c\x58\x70\xa1\xc2\xac\xa7\x75\x01\x89\xa6\xb6\x3e\x5c\x69\x60\x05\xda\x45\x45\x51\x90\x3b\x28\x3e\xcf\xf9\x79\x33\x4d\x69\x69\x16\x0a\x68\x57\x3b\xab\xb7\x86\x88\x00\xf9\x06\x6b\x25\x61\xe3\x71\xb2\x61\xe9\xcf\xb5\x0b\xaf\xa9\x2a\x32\x2d\x20\x2f\x5f\x75\xe1\x2c\x53\xe1\x35\x8d\x6f\xd1\x17\x1a\xef\x23\x80\x01\x5c\x79\xa7\xa3\x37\x4b\xa6\x37\x42\xe0\x16\x81\x65\x18\x1f\x0f\x8b\xcc\x00\x1b\x96\xac\x36\xa7\x40\x34\xe6\xca\xa0\xd8\xa4\xa0\x9d\x38\xcd\xa2\x2b\x21\x1e\xfe\x3d\x8c\x08\x81\xca\xe3\x98\x72\xf5\x6c\x85\xc7\xf2\x1b\x8a\xcc\x5b\xf1\xc9\xf8\xde\xb2\x27\x39\xdc\xec\x9e\x12\x5a\xe3\xfe\x1d\x65\xe5\xab\x2a\x75\x55\xb1\x16\xb8\x30\x06\x12\x1f\xc7\x28\x92\xe6\xf0\x20\x6d\x26\x5b\x10\x18\x56\x02\xb9\x46\x72\xe5\x4b\xbf\x47\x77\xb2\xe2\xe5\x16\xb2\x1b\xc4\x32\x62\x1e\x00\x82\x29\xd0\x2b\xea\x29\x9e\x1d\x25\xde\x73\xd2\x9b\xdb\xd7\x53\xe5\x88\x91\xee\xc7\x46\xb3\x0d\x12\x95\x50\xcf\x5c\x7c\xb5\x30\x48\x80\x39\x48\x38\x53\x8a\x4f\x39\x9c\x37\x1a\x58\xa9\x1b\xe4\x58\x3f\x74\x30\xa6\x31\xe4\x35\x54\x9a\x5d\x6b\xb0\x1c\x6f\xb8\x01\x74\x84\x2d\x4d\x4f\xf7\x41\x7d\xce\xf1\x12\x37\xb9\x48\xee\x62\xfb\xbf\x88\xed\x3e\x11\x95\x7c\x2e\x96\xfc\x2e\xa2\xdb\x11\xfd\x17\x43\x30\xe5\x3a\xe9\x4f\xb7\xd1\x8a\x5c\xff\x96\xab\x66\x76\xe9\x1e\xbd\x25\xf6\x37\x19\x27\xb6\xf7\x69\x7f\x40\xad\xcf\x44\xb8\xe5\xa3\xd3\x5f\x5f\x6e\xff\xa4\x74\x47\xe5\x6d\x9f\x94\xa8\x26\xef\x53\x64\xe3\x81\xbb\x79\xdd\x31\x56\x6e\x99\x68\x12\xc1\xda\xb8\xf5\x28\x30\x45\xeb\xdf\x64\xe6\x8e\xd2\x77\xfc\xeb\xcc\x1e\xcc\xfd\xed\x13\x85\x90\x1c\x26\xde\x41\xe1\x33\xde\xcd\xd9\xce\x35\xf7\x68\xeb\x3c\xe7\x99\x1b\xbd\x87\x9d\xee\x82\x1c\x84\xa4\xbf\x75\x1f\x7e\x91\x69\x9f\x7b\x04\xf4\x41\xd8\x11\x85\xdd\x61\xe8\x36\x6e\x74\x2e\x28\x87\xa3\x55\xfe\xd7\x85\x5a\x8a\xa6\x5e\x97\xaa\xe9\x01\x66\xf2\xb7\xdf\x7c\xd1\x0d\xec\xd0\x2c\xbc\x89\xb4\x7a\x94\x6f\xf3\x8e\xd9\xea\x33\x56\xcd\x2a\x65\x8d\xa2\x23\xe8\xd2\x01\x60\x4c\xb9\xf9\x13\x20\xac\x08\xe4\x09\x7c\xdd\x9b\x13\xb1\x78\x36\x13\x8a\x23\xf7\xc7\x80\x7f\xe4\xf5\x95\x0a\x08\x72\x9d\xe0\xbd\xc0\xe5\xf9\x3f\x63\x50\x7a\x27\x99\xdd\x4f\xf9\x4a\xa7\xe6\xc3\xc4\x75\x91\x73\xb4\x0a\x1e\x86\x2b\x74\x37\x66\x1d\x3d\x98\x2e\xb3\xb6\x99\x7d\x6b\xac\x1d\xd0\x36\xb8\xbf\xff\x02\x7b\xbb\x3a\x33\xc1\xd9\x22\xe9\xeb\x65\x88\xcb\x79\x69\xa8\xfa\x6a\xae\xbe\x23\xeb\xfd\xbf\xd8\x34\x1e\xc1\x81\xda\xfa\x64\xb3\x17\xa0\xe0\x9b\x4d\x40\xe3\x9d\xa7\x25\x97\x20\xb8\x5d\x9a\x7d\x77\x93\x44\xe5\x64\x54\xc7\x6b\x8a\x35\x68\xc2\x4f\x32\x7f\x06\x00\x00\xff\xff\xac\x62\xa5\xf5\x7e\x17\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 6014, mode: os.FileMode(420), modTime: time.Unix(1463566365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

