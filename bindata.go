// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x6f\x8f\xd4\x36\x13\x7f\x9d\x7c\x8a\x21\x0f\x77\x4a\x1e\x42\x0e\xa4\xaa\x2f\xa8\xae\x12\x85\x43\x5d\x09\x8e\xc2\x5e\xdb\x17\x08\x9d\x7c\x59\x67\x49\x9b\x4d\x16\xdb\x59\xf6\x94\xe6\xbb\x77\xc6\x76\xbc\xde\xdc\x1e\x2c\x2d\xd7\x6b\x25\x90\xd0\xc5\x63\x7b\xfc\x9b\x7f\xbf\xb1\xf7\xe8\x08\x9e\xbe\x84\xd3\x97\x67\x70\xf2\x74\x72\x06\x67\x3f\x4e\xa6\xf0\x6c\xf2\xfc\x04\xee\x84\x38\x35\x51\x50\x4a\x98\xf3\x9a\x0b\xa6\xf8\x0c\x2e\x2e\x61\xc9\x85\x2c\xa5\x02\xd5\x34\x55\x0a\xb2\x69\x45\xce\xa1\x10\xcd\x02\xba\x2e\x9b\xea\x61\xdf\x67\xe1\x92\xe5\xbf\xb3\x39\x27\xe1\x4f\xe6\xb3\xef\xc3\xb0\x5c\x2c\x1b\xa1\x20\x0e\x83\xe8\xe2\x52\x71\x19\xe1\x07\xaf\xf3\x66\x56\xd6\xf3\xa3\xdf\x64\x53\x93\xa0\x58\x28\xfa\x33\x2f\xd5\xbb\xf6\x22\xcb\x9b\xc5\xd1\xbc\x51\xe5\x52\x1e\x55\xcd\x9c\x26\xa4\x12\x79\x53\xaf\xf0\xb3\xeb\xee\x83\x60\x35\x1e\x93\x4d\xb4\x66\x89\x87\xa0\x34\xeb\x7b\x9a\xe2\xf5\x0c\x50\x90\x84\xe1\x8a\x09\x38\x87\x63\xa0\x23\xb2\x17\x4c\xc8\x77\xac\x72\x42\x3c\x2f\x9b\x2e\x45\x59\xab\xc2\xc9\xec\x19\xd9\x44\x35\x2c\x0c\xd5\xe5\x92\x2c\x81\xec\x94\x2d\x38\xaa\xa4\xe9\x36\x57\x1d\x5a\xe4\x41\x78\xc1\xd5\xbb\x66\x26\xe9\xc8\xb0\x68\xeb\x1c\xe2\xff\xe3\x9e\xbb\xc3\xa6\xc4\xd7\x10\x77\x9d\xd9\x75\xb7\x4c\xef\xae\x14\x3c\x3a\x06\xf4\x93\x60\x0b\x49\xd0\xcb\x02\xe5\xf0\x07\xd4\x1c\x1e\xf4\x7d\x8a\x1b\xd1\x14\x9a\xc0\xa5\xd9\x2f\x4c\x20\x02\xf3\x3d\xad\x4a\x72\xb7\x1d\x28\x9a\x31\xdf\xce\xe7\x5d\xc7\xd0\x0b\x9e\x08\xa2\x2c\x1a\x56\x9d\xa1\x5d\xf4\x6d\x3d\x95\xc0\x2e\x58\xaf\xb9\x6a\x45\x7d\xbb\xb8\xba\x30\xa0\xc8\x70\xa1\xff\x37\x22\x0c\xde\xb7\x5c\x5c\xa6\xc0\xc4\x5c\x12\x4a\x9d\x4d\xd9\x29\xff\xf0\x43\x5b\x14\x5c\xc4\x6f\xde\x92\xa4\xeb\x93\x14\xde\xbc\xc5\xc8\x72\x51\xb0\x1c\xc7\xa3\x90\x3d\x13\x6c\xbe\xe0\xb5\xce\x1b\x6d\x5e\xf6\xa4\x31\x49\x13\xe0\x00\x13\x89\x86\x64\x55\x68\xf3\x89\x66\xcc\xd9\xd9\xaf\xa2\x54\x7c\xaa\x30\x6f\xe6\x71\x44\xb9\xaf\x16\x0a\x97\x46\x89\x77\x00\xba\x11\x06\x3f\x3e\x46\xa8\x26\x3d\xef\x03\x2a\xe7\xef\x21\x9b\xbe\x7a\x3e\xa9\x01\x73\x89\x6b\xbd\x0c\xcd\xc3\x95\x51\x87\xa9\x1d\x14\x8d\x00\xdc\xbd\x22\x89\x51\x46\x67\xe4\xcd\xd2\x39\xcf\x8c\x06\xbf\x0d\xfe\xc7\xad\x84\xbd\x84\xef\xe1\x81\x19\x69\xbd\xf7\x50\x6f\x4a\x7a\x03\x3a\x69\x10\xf9\x69\x1e\xa3\x9b\xe2\x55\x92\x84\x66\xc9\xb0\xa9\x8f\x42\x3d\x42\x3f\x1f\x03\x5b\x2e\xd1\x09\x31\x8d\xc8\xf7\x02\x4b\x4b\xdb\xc3\x2b\xc9\xc9\xa8\xa1\xb6\xb4\x07\x83\xeb\x00\x9f\x7b\x80\x53\x1d\xd4\x47\xdb\xa5\x19\xef\x63\x2a\x01\x25\x3f\xe2\xf6\x3b\xc7\x50\x97\x95\xb1\x16\x49\x22\x3b\xa1\x1c\x29\xe2\x68\x61\xd5\x1d\xfc\x6f\x95\x98\xc4\x79\x04\x07\x32\x4a\xf7\x51\xaf\x81\x6d\x9c\x71\xd5\xfc\x7d\xac\xdb\xf2\x4f\x7f\xbd\x26\x5d\x08\x8f\xab\x92\x49\xbf\x32\xb4\x00\xa2\xd8\xd5\xc5\x47\x40\xbb\x0a\xbc\xb2\x3d\x89\xb4\xaf\x3c\x42\xf4\x3e\x87\x6c\xb4\x89\x1e\x06\xbd\xad\x69\x2f\xe1\x4d\xed\xcd\x9a\xaa\xc2\x3f\x5b\xd5\x14\x9a\x2c\xdd\xa4\xa8\xb6\x8e\xc2\x60\x57\x3b\x43\xcd\x38\x85\xf2\xde\x43\xc4\x82\x1b\x25\x56\x0b\xed\xf3\xc8\x37\x36\x75\x65\x4b\x0a\x2b\xd7\x6c\xca\xb2\x8c\xdc\x48\x71\x7d\xca\x2f\xda\x79\x4c\x5b\x13\x5f\x40\xa7\x9a\x55\x83\x35\x44\x20\xc8\x53\x58\x63\x11\x9b\xcd\xa2\x2d\x4b\x7f\xae\x6d\x5a\xe8\x6a\x24\xd3\x3c\xd2\x73\xd5\xea\xaf\xd2\xcc\x50\xd3\xfc\x88\xf6\xd0\x78\x17\x16\x0c\xfc\xda\x45\x02\xbd\x99\x33\x35\x8a\x8b\xde\x04\x86\x99\x5c\x3c\x0c\x32\x0d\x6c\x9a\xb3\x5a\x77\x8f\x60\xc6\xa5\x46\xb1\x4d\x5d\x3b\x71\xea\x4d\xd7\x42\x3c\xfc\x6b\x18\x11\x02\x95\xd5\x31\xe5\xf8\xd9\x1a\xdb\xf9\x2b\x8a\xcc\xeb\xe6\x83\xf6\xbd\x61\x5d\x72\xb8\x3e\x3d\x26\xb4\xda\xfd\x3b\xca\xd1\x55\x63\x6c\xab\x69\x23\xb0\x61\xf4\x24\x2e\x8e\x41\x20\x74\xd3\x21\x6d\x3a\x5b\x10\x18\x56\x10\xb9\x46\x70\xe9\x28\x63\x40\x77\xb2\xe6\xf9\x08\xd9\x0d\x62\x39\x67\x0e\x00\x82\xc9\xd0\x2b\xf2\x31\xf6\x9c\x1c\xef\x47\xf1\xcd\x9d\xeb\x28\xf6\x9c\x91\xee\x87\x5a\xb3\x09\x12\x95\xd0\xc0\x78\x7c\xbd\xd4\x48\x80\x59\x48\xb8\x52\x34\x1f\x52\xb8\x68\x15\xb0\x5c\xb5\xc8\xcd\x6e\xea\x60\x46\x73\xc8\x87\xa8\x34\xf9\xa2\xc1\xb2\xbc\x61\x27\xd0\x11\xa6\x34\x5d\x9b\xf0\xea\x73\x81\x97\xbf\xe2\x32\xfa\x1a\xdb\xff\x44\x6c\xf7\x89\xa8\xe0\x8b\x66\xc5\xbf\x46\x74\x1c\xd1\x7f\x30\x04\x73\xae\xa2\xa1\xbb\x9d\xaf\xc9\xf5\xaf\xb9\x6c\xab\x2b\xf7\xef\x91\xd8\xdd\x80\xac\xd8\xdc\xc3\x5d\x83\xda\xf4\x44\xb8\xe5\xd6\xe9\xae\x2f\xb7\xdf\x29\x6d\xab\xbc\xed\x4e\x89\x6a\xd2\x21\x45\xb6\x1e\xc6\xdb\xd7\x1d\x6d\xe5\xc8\x44\x9d\x08\xc6\xc6\xd1\x63\x42\x17\xad\x7b\xcb\xe9\x3b\xca\x30\x70\xaf\x3a\xd3\x98\x87\x2b\x29\x0a\x21\x3a\x8c\x9c\x83\xfc\xe7\xbf\x5d\x33\xce\x35\xfb\xd8\xeb\x1d\xe7\xe9\x97\x80\x83\x1d\xef\x82\xec\x85\x64\xb8\xad\x1f\x7e\x96\x69\x9f\x7a\x3c\x0c\x41\xd8\x11\x85\xdd\x61\xe8\xb7\x6e\x74\x36\x28\x87\xe7\xeb\xf4\xe3\x85\x9a\x37\x6d\xbd\x29\x55\x3d\x02\xcc\xe4\x6f\xbf\xf9\xac\x1b\xd8\xa1\xde\x78\x13\x69\xf5\x20\x1d\xf3\x8e\x3e\xea\x13\x56\x55\xa5\x34\x46\x51\x0b\xba\xd2\x00\xb4\x29\x37\xdf\x01\xfc\x8a\x40\x9e\x28\xb8\xd0\x1d\x31\x7b\x52\x35\x92\x23\xf7\x87\x80\xff\xc8\xeb\x6b\xe9\x11\xe4\x26\xc1\x07\x81\xcd\xf3\xbf\xc7\xa0\xf4\x4e\xd2\xa7\x9f\xf2\xb5\x8a\xf5\x0f\x1a\x5f\x8a\x9c\x83\xb5\xf7\xa0\x5c\xa3\xbb\x31\xeb\xe8\xc1\x74\x95\xb5\xf5\xea\x5b\x63\x6d\x8f\xb6\xc1\xfe\xfb\x37\xb0\xb7\xad\x33\x1d\x9c\x11\x49\x7f\x59\x86\xb8\x9a\x97\x9a\xaa\xaf\xe7\xea\xaf\x64\xbd\xff\x2f\x3d\xad\x43\x70\x20\x47\x3f\xf5\xec\x05\xc8\xfb\xad\xc7\xa3\xf1\xde\xd1\x92\x4d\x10\x3c\x2e\x4e\xbe\xbb\x49\xa2\xb2\x32\xaa\xe3\x0d\xc5\x6a\x34\xfe\x4f\x32\x7f\x06\x00\x00\xff\xff\x10\x41\xc1\x59\xb6\x17\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 6070, mode: os.FileMode(420), modTime: time.Unix(1463627599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

