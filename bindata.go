// Code generated by go-bindata.
// sources:
// persist.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _persistTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x51\x6f\xdb\x36\x10\x7e\xb6\x7e\xc5\x55\x6b\x02\x79\x55\x95\x16\x18\xf6\xd0\x21\x03\xba\x36\xc5\x0c\xb4\xe9\x5a\x67\xdb\x43\x51\x14\x8c\x4c\xb9\xda\x64\xd1\x25\x29\xd7\x81\xa6\xff\xbe\x3b\x92\xa2\x69\x27\xa9\x9d\xa4\x5d\xba\x61\x79\x89\x78\x24\xef\xbe\xbb\xfb\xee\x48\xfa\xe0\x00\x9e\xbe\x84\xe3\x97\x27\x70\xf4\x74\x74\x02\x27\x3f\x8f\xc6\xf0\x6c\xf4\xfc\x08\xee\x44\x38\x35\xd2\x50\x2a\x98\xf2\x9a\x4b\xa6\xf9\x04\x4e\xcf\x60\xce\xa5\x2a\x95\x06\x2d\x44\x95\x82\x12\x8d\xcc\x39\x14\x52\xcc\xa0\x6d\xb3\xb1\x19\x76\x5d\x16\xcd\x59\xfe\x27\x9b\x72\x12\xfe\x62\x3f\xbb\x2e\x8a\xca\xd9\x5c\x48\x0d\x49\x34\x88\x4f\xcf\x34\x57\x31\x7e\xf0\x3a\x17\x93\xb2\x9e\x1e\xfc\xa1\x44\x4d\x82\x62\xa6\xe9\xdf\xb4\xd4\xef\x9b\xd3\x2c\x17\xb3\x83\xa9\xd0\xe5\x5c\x1d\x54\x62\x4a\x13\x4a\xcb\x5c\xd4\x0b\xfc\x6c\xdb\xfb\x20\x59\x8d\x66\xb2\x91\xd1\xac\xd0\x08\x4a\xb3\xae\xa3\x29\x5e\x4f\x00\x05\xc3\x28\x5a\x30\x09\xef\xe0\x10\xc8\x44\xf6\x82\x49\xf5\x9e\x55\x5e\x88\xf6\xb2\xf1\x5c\x96\xb5\x2e\xbc\xcc\xd9\xc8\x46\x5a\xb0\x28\xd2\x67\x73\xf2\x04\xb2\x63\x36\xe3\xa8\x92\xa6\x9b\x5c\xb7\xe8\x51\x00\xe1\x05\xd7\xef\xc5\x44\x91\xc9\xa8\x68\xea\x1c\x92\x6f\x71\xcf\xdd\x7e\xd3\x30\xd4\x90\xb4\xad\xdd\x75\xb7\x4c\xef\x2e\x34\x3c\x3a\x04\x8c\x93\x64\x33\x45\xd0\xcb\x02\xe5\xf0\x17\xd4\x1c\x1e\x74\x5d\x8a\x1b\xd1\x15\x9a\xc0\xa5\xd9\x6f\x4c\x22\x02\xfb\x3d\xae\x4a\x0a\xb7\x1b\x68\x9a\xb1\xdf\x3e\xe6\x6d\xcb\x30\x0a\x81\x08\xe2\x2c\xee\x57\x9d\xa0\x5f\xf4\xed\x22\x35\x84\x8b\x60\xbd\xe6\xba\x91\xf5\xed\xe2\x6a\xa3\xc1\x87\x86\xcb\xb3\x14\x98\x9c\x2a\x82\x65\xe8\x93\x1d\xf3\x8f\x3f\x35\x45\xc1\x65\xf2\xe6\x2d\x49\xda\x6e\x98\xc2\x9b\xb7\x98\x4a\x2e\x0b\x96\xe3\x78\x23\x47\xcf\x24\x9b\xce\x78\x6d\x88\x62\xfc\xc9\x9e\x08\xcb\x92\x01\x0e\x90\x39\x34\x24\x37\x22\x47\x20\x9a\xb1\xb6\xb3\xdf\x65\xa9\xf9\x58\x23\x51\xa6\x49\x4c\x64\xd7\x33\x8d\x4b\xe3\x61\x60\x00\xe3\x06\x7d\xe0\x1e\x23\x54\xcb\xc7\xfb\x80\xca\xf9\x07\xc8\xc6\xaf\x9e\x8f\x6a\x40\xf2\x70\xa3\x97\x49\x49\x2b\xe3\x16\xb9\x3c\x28\x84\x04\xdc\xbd\x20\x89\x55\x46\x36\x72\x31\xf7\xd1\xb2\xa3\x3e\x50\x7d\xc0\x71\x2b\x61\x2f\xe1\x47\x78\x60\x47\x46\xef\x3d\xd4\x9b\x92\xde\x01\x59\xea\x45\x21\xaf\x13\x0c\x53\xb2\x18\x0e\x23\xbb\xa4\xdf\xd4\xc5\x91\x19\x61\x9c\x0f\x81\xcd\xe7\x18\x84\x84\x46\x14\x7b\x89\xb5\x64\xfc\xe1\x95\xe2\xe4\x54\x5f\x4c\x26\x82\x83\xcb\x00\xbf\x0b\x00\xa7\xc0\xad\xd7\x61\x2d\x26\xbb\xb8\x4a\x40\x29\x8e\xb8\xfd\xce\x21\xd4\x65\x65\xbd\xc5\xae\x90\x1d\x49\x29\x64\x91\xc4\x33\xa7\x6e\xef\x9b\xc5\x90\x16\x0a\xf9\x08\xf6\x54\x9c\xee\xa2\xde\x00\x5b\x05\xe3\xbc\xfb\xbb\x78\xb7\x16\x9f\xee\x72\x4d\xa6\x2e\x2e\x47\xe4\xeb\x69\xe8\xd4\x59\x8e\x06\x9f\x3d\xab\x1c\x61\xa3\x41\xe7\x8a\x31\x20\x6e\x34\xa0\x76\x36\x11\x55\x85\xff\xd6\xaa\x22\xb2\x6c\x5b\x51\xcd\xa0\xa4\x70\xba\xd5\x1e\xb0\x1d\xa7\x50\xde\x7b\x88\x58\x70\xa3\x42\xd6\xd3\xbe\xa0\x6b\x26\xb6\x3e\x5c\x69\x60\x05\xda\x4d\x59\x96\x51\x38\x28\x3f\x4f\xf9\x69\x33\x4d\x68\xeb\x30\x14\x90\x55\xbb\xaa\xf7\x86\x2a\x1f\x1b\x0c\xd6\x4a\xcc\x26\x93\x78\xcd\xd3\x5f\x6b\x97\x5e\x53\x55\xe4\x5a\xd0\xad\x7c\xd5\x85\xab\x4c\x85\xd7\x34\xbf\xd1\xaf\xd0\x79\x9f\x01\x88\x97\x3e\xe6\x18\xcc\x9c\xe9\xb5\x0c\xb8\x3d\x60\x1b\x8c\x4f\x87\x05\x66\x70\x8d\x73\x56\x9b\xae\x3f\x98\x70\x65\x40\xac\x77\xa0\x0b\x61\x9a\x4d\x97\x22\xdc\xbf\x16\x44\x44\x40\xc5\x71\x48\x4c\x3d\x59\xe2\x29\xfc\x8a\xf2\xf2\x5a\x7c\x34\x91\xb7\xbd\x93\xc2\x6d\x8c\x27\x04\xd6\x04\xff\x82\xa2\x0a\x6b\xaa\xac\x15\x97\x3a\xd9\x43\xde\x6e\x96\x15\xac\xf4\xfa\xea\x91\xe6\xb8\xa0\x91\xa1\x0b\x62\xc3\x52\xa0\xe0\x48\xae\x7c\xed\xf7\x00\x8f\x96\x3c\xdf\x00\xb7\x0d\x4e\x33\x9f\xe0\x55\xe4\xba\x70\x98\x87\x80\x70\x32\x0c\x8d\x7a\x8c\xc7\x47\x8e\x77\x9b\xe4\x8b\x06\xc2\x37\x4c\x46\xda\x1f\x6e\xd7\xbd\x9c\x1b\x54\xc0\x1c\x3c\xdc\x23\xc5\xc7\x14\x4e\x1b\x0d\x2c\xd7\x0d\xb6\x5c\x3f\xb5\x37\xa1\x39\x84\x41\xed\x30\x44\xc2\x02\x1c\x54\xaf\xbd\xb5\xeb\x69\x37\xea\x6c\x4a\x5d\x7b\x71\xaa\x31\x58\xb6\x82\xfd\xa9\x10\x94\xf1\x0c\x2f\x77\xc5\x59\xfc\x9f\x60\xc0\x4d\x2c\x6f\x63\xc0\x39\xdd\x5f\x31\x03\x76\xc9\xbb\xe4\x33\xb1\xe0\x9f\x33\xef\x13\x5e\xf1\xdb\xc9\xfb\x4d\x2c\x6f\xcb\xfb\x39\xdd\xff\xf2\xbc\x4f\xb9\x8e\xfb\xf3\x79\x49\xe9\x7e\xcd\x55\x53\x9d\xbb\xf9\x6f\x88\xfd\x55\xcc\x89\xed\x0b\xe0\xf6\x4e\xf9\x5b\x3f\xc9\xed\x51\xfe\xe8\x33\x9f\xe5\xe6\xa2\x76\x55\x1e\xa3\xa2\xb4\x2f\xa3\xb5\x37\xf7\xfa\x85\xcc\x38\xba\xee\xa5\x49\xb4\x75\x73\xe3\xd5\x62\xfc\xf2\xaf\x44\x73\x8b\xea\x07\xfe\xbd\x68\x2f\x0e\xfd\xf5\x18\x85\x10\xef\xc7\x3e\x46\xe1\x0f\x0b\x6e\xcd\x26\x97\xdc\x33\x92\x6e\xe1\xf6\x5e\x64\x9e\x1c\x1e\x75\x72\x01\xe2\x20\x29\xfd\xab\x60\xff\x2a\x8e\xed\xf0\x46\x69\xbc\xfd\x3d\xb5\xf1\x48\xd9\x05\xce\xea\x91\x12\xdc\x44\x5d\xa6\xf6\x97\xe9\xa7\x8b\x33\x17\x4d\xbd\x2a\x4f\x33\x02\x24\xf8\xf7\xdf\x5d\x8d\x6e\xfb\x66\xe7\x97\x61\xdb\x03\xcf\xb5\x5e\x62\x8c\x6d\x71\xac\x2a\x95\xf5\x8b\x1a\xd6\xb9\xc3\xc6\x38\x73\xc5\xd3\xe6\xc6\xa5\x82\x3d\xa4\xe0\xd2\x74\xd0\xec\x49\x25\x14\xc7\x73\x26\x02\xfc\x33\x9d\x51\x05\xad\x71\x45\xfd\x5e\xe0\x2a\xe0\x66\xbd\x93\x9e\x78\xc6\xfa\x31\x5f\xea\xc4\xfc\x88\xf2\x99\xba\xf2\x60\x19\x3c\x69\x97\x18\x85\xfd\x25\xbd\xf4\x6e\xab\x5b\x83\xfb\xfb\x0a\x9a\xb6\x6b\x34\x26\xec\x1b\x9d\x79\x5b\x5f\x50\xb8\xdc\x6c\x04\x4a\xdc\xd5\xe8\x77\x9e\x7f\xa6\x57\x5f\xde\xac\xff\xef\xd6\xff\x74\xb7\x0e\xdb\x75\xe7\x9b\x8f\xa3\x0a\x5a\x4b\x86\x3f\x7c\xaa\x1d\x7d\x92\x1d\x15\x43\xe2\x5f\xa3\x43\x39\x19\x55\xf0\xaa\xbb\x1a\x88\xe1\xcf\x48\x7f\x07\x00\x00\xff\xff\xf4\x28\x14\x3f\x23\x18\x00\x00")

func persistTxtBytes() ([]byte, error) {
	return bindataRead(
		_persistTxt,
		"persist.txt",
	)
}

func persistTxt() (*asset, error) {
	bytes, err := persistTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "persist.txt", size: 6179, mode: os.FileMode(420), modTime: time.Unix(1463194551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"persist.txt": persistTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"persist.txt": &bintree{persistTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

