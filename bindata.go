// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x41\x6f\xe3\x36\x13\x3d\x4b\xbf\x62\xd6\xd8\xef\x83\xd4\x28\x4a\x73\x4d\x91\x43\x9a\x38\xa8\x81\x26\x69\x93\xb4\x3d\x04\x41\x97\x96\x69\x5b\x5d\x49\xd4\x92\xd4\xae\x03\xc3\xff\xbd\x33\x24\x65\x49\xb6\xe5\x64\x5d\x2c\x8a\x9e\x4c\x0e\x87\xc3\x79\x8f\xf3\xa8\xf1\xc9\x09\x5c\xdd\xc1\xed\xdd\x23\x0c\xaf\x46\x8f\xf0\xf8\xd3\xe8\x01\xae\x47\x3f\x0f\xe1\x9d\x8f\x4b\x23\x0d\xa9\x82\x19\x2f\xb8\x64\x9a\x4f\x60\xfc\x02\x33\x31\x66\x1a\x8d\x5a\x88\x2c\x02\x25\x2a\x99\x70\x98\x4a\x91\xc3\x72\x19\x3f\x98\xe9\x6a\x15\xfb\x25\x4b\x3e\xb2\x19\x27\xe3\x2f\x76\xb8\x5a\xf9\x7e\x9a\x97\x42\x6a\x08\x7c\x6f\x30\x7e\xd1\x5c\x0d\x70\xc0\x8b\x44\x4c\xd2\x62\x76\xf2\x97\x12\x05\x19\xa6\xb9\xa6\x1f\xa5\x65\x22\x8a\xcf\x34\x9c\xa5\x7a\x5e\x8d\xe3\x44\xe4\x27\x5f\x84\x9e\x93\x73\x26\x66\xb8\xb2\x5c\x1e\x83\x64\x05\x9e\x13\x8f\x4c\x68\x85\xa7\xa0\x35\xb6\x3f\xc7\xc0\x8b\x09\xe0\x38\xf4\x7d\xfd\x52\x9a\x6c\x6e\x59\x8e\xa9\x00\x46\xaf\x12\xbd\xc4\x9c\x5a\x31\x6e\xb8\x9e\x8b\x89\xa2\x1d\xd3\xaa\x48\x20\xf8\x6e\xb9\x7c\xef\x76\x84\xcd\xe6\xc0\x80\x92\x2c\x57\xc3\x45\x29\x71\x89\x0c\xf7\x5c\x55\x99\xae\x2d\xb0\xf4\xbd\xcf\x4c\x12\x52\x4f\xe9\x5c\xd3\x79\x98\x36\xce\xc6\xd5\x14\xc0\x80\x8f\x7f\xac\xa6\x53\x2e\xd1\xc6\xe4\x4c\xc1\xd3\x73\x5a\x68\x2e\xa7\x2c\xe1\x98\x96\x87\x29\xb7\xe1\x5d\x4b\x36\xcb\x79\x61\x01\xe2\x42\x3a\x85\xf8\x52\x18\x74\x80\x63\x4c\x80\x66\x38\x59\xe2\x98\xd3\xa8\x3e\xf9\x1c\x3e\xd0\xcd\xe0\x10\x57\x3f\x98\xcd\xeb\xa8\x17\x78\xb0\xf1\x34\x46\x8a\x39\x52\xa3\xc2\x5a\xea\xdd\x36\x73\x85\x00\xcb\x0c\x73\x0b\xc8\x1c\xc1\xe0\xfd\x72\x70\x34\xc0\xc0\xbf\x33\xc4\x8b\xc3\xd5\x20\x32\xbb\xbc\x96\x3f\x67\x3a\x18\x44\xff\x53\x83\x08\x32\x5e\x04\xb5\x77\x18\x3e\x9d\x9e\x3d\x47\x70\x7c\x1a\x9a\x2d\x53\x21\xe1\x4f\xac\x25\x38\x3b\x77\x89\xd5\x9e\x44\xa3\xd7\xca\xee\x11\x2f\x31\xbe\xc8\x52\xa6\xae\x85\x74\x69\x3a\xfa\xce\x81\x95\x25\x02\x0f\x68\x16\x51\x84\x0d\xe7\x40\x85\x61\x13\x8d\x67\x8a\xef\x0d\xa0\xda\xce\x8e\x4f\xcf\x5b\x73\x45\xfb\x7b\x53\x7a\x63\x42\x0d\x1f\x9b\x51\x0b\xa1\x5d\xe4\x91\xba\x14\x79\x99\xf1\xc5\xfe\xd0\x36\x8e\xbf\x0d\x8e\x8a\x10\xd7\x2f\x30\xe2\x9c\x4b\x4b\xea\xd3\x33\xd5\x9f\x6f\xd1\x75\x96\x22\xe0\x52\x62\x78\x92\x62\x7c\xc3\xa4\x9a\xb3\x2c\xe8\x84\xf7\x30\x3b\xf2\x79\x77\x0e\x45\x9a\xd5\xf7\x83\x6a\x8c\x87\x52\x0a\x19\xe0\x9a\x23\x4e\x72\x5d\xc9\xa2\x61\xad\x2f\xf5\xf6\xf9\x0d\x02\xc7\x78\x7b\x8c\xca\x89\xff\x90\xa9\xe6\x0f\xa6\xc2\x4c\x21\x86\x5b\x62\x58\x35\xf5\xdf\x6c\xb6\x62\x2c\xe7\x9b\x22\xa3\xca\x4b\x9b\xb2\x33\x19\x12\x24\xf4\x5c\x27\x5a\xce\xa9\xda\x07\x47\xee\x3d\x8a\x47\x5a\xb0\x20\x3d\x3a\xa5\x5b\xa3\xc8\x9f\x2a\x2e\x5f\x28\x06\xbe\x5b\xf1\x43\x89\xa9\xe9\x69\x40\xb9\xba\x34\xc3\x08\x0f\x8e\xe3\x98\x04\x4d\x3c\x5d\xf1\x71\x35\x0b\xcc\xae\xb0\x6d\xa1\xc3\x9d\x9b\x41\xc4\x3f\x41\x7c\x57\x52\x11\xc0\x20\x2d\x14\x97\x7a\xd0\xd2\xfe\x15\x57\xda\x5e\x31\x21\x9b\xe0\x6c\x13\x1b\x79\x3a\x99\x37\xce\x76\x77\x7f\x79\x79\x26\xd2\x1a\x3b\xcd\x22\xf8\x7f\xb7\x02\x90\xdf\x96\x78\x5e\x29\xb0\x37\x06\xac\x05\xd6\x1a\xda\x4a\x24\xd9\x60\x72\xf1\xaf\xc4\xd7\xbd\xf8\x62\x89\x8b\xa0\x66\x2b\x7e\x48\x58\x61\xc2\x1a\xee\x7a\x0a\x74\x47\x7d\x36\xa6\xfa\x2a\x3a\xc6\xf5\x6d\x74\x4b\x79\x3f\xaf\x3d\x9c\xb6\x34\xf5\x5b\x91\x37\xaa\xea\x2a\x8f\x0c\x93\x89\x74\x1f\x10\xbb\x73\xa7\xd8\x76\xaa\xad\x2d\x37\x6f\xb5\x87\x56\xeb\x47\xf1\xfc\xee\x55\x4a\xae\xac\xfc\xcf\x1a\xd6\x87\x0b\x9e\x6c\x32\xfe\x4d\x39\x86\xef\x4d\x0e\x6b\xaa\x9d\x15\x73\x8b\xf1\xf2\xd5\x05\x7e\x30\x13\x6c\x44\x02\xab\xfb\x5a\xdc\x16\x06\x6c\x88\xa6\x2a\x27\xd8\xb4\x58\xd1\x7c\x05\xb8\x1d\xd8\xb6\xa1\xed\x42\xb6\x1b\xd8\x26\x2e\x9b\x4d\x1f\xaa\x3e\x2c\x13\x9e\xf1\xff\x22\x96\xe6\x93\xd6\x46\x33\xe3\xee\x2d\xeb\x7d\xbb\xea\x0f\xfe\xbd\x89\xbe\x53\x57\xa6\xe7\x32\xab\xf6\xd1\x31\x64\xb4\xfd\x6f\xd8\x47\x6e\xd5\xe4\x6f\x7f\x54\xb6\x14\xec\x4e\xec\x7f\x1a\x77\x3d\x64\xdb\x9a\xfd\xba\xcf\x6f\xdf\xe3\xf8\xe6\x6f\xe2\x81\x8f\xe4\x37\xa9\x0b\x57\x10\xfb\xd8\xdd\xcd\xec\xba\xdb\x3b\x5f\x77\x49\x9d\xbb\xfb\x07\x2f\xe8\xc1\xdd\x4a\x1f\xe1\xce\xaf\xbf\xb6\xb3\x54\xb9\xe2\x96\x28\x87\x2d\xa1\x9a\x2b\x3a\x54\xa9\xcd\xdb\xdd\x56\xe0\x84\xe3\xbf\x08\xa0\xd3\xe2\xcb\x4c\x28\x6e\xa4\x67\xa5\xc5\x34\xdb\x50\x85\xc9\x8c\xda\x1e\xe3\x7f\xcb\x17\x3a\x08\xed\x71\x0b\x97\x66\x5b\x42\xc3\x8c\xe7\x1b\x77\x61\x62\x36\x25\x8b\xb3\x08\x16\xe6\xc4\xbd\x9d\xc8\x8e\x9a\x78\x5d\x72\x6f\x6b\x1e\xba\xcd\xfc\xa1\xfd\xc8\x96\xe4\xba\x9d\x7f\x67\x62\xcb\xd1\x30\x78\x68\xfb\xb1\x7d\x95\xde\xeb\x4c\xf5\xb0\xf4\xba\x7e\xfe\xbd\x16\xa4\x87\xc2\x55\x53\xf2\x8e\x48\x8c\x16\x84\x3f\x1c\x28\x82\xe6\x3b\x64\x0b\xd2\x74\x37\xcd\x79\x2b\xbf\x19\xff\x1d\x00\x00\xff\xff\xf6\x98\x1e\x9e\xf1\x10\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 4337, mode: os.FileMode(420), modTime: time.Unix(1469435986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

