// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x55\x6b\x02\x69\x55\x95\x16\x18\xf6\xd0\x21\x03\xba\x36\xc5\x0c\xb4\xe9\x5a\x67\xdb\x43\x51\x18\x8c\x4c\xbb\xda\x6c\xd1\x25\x29\xd7\x81\xa6\xef\xbe\x3b\x92\xa2\x69\xc7\x59\xdd\x2d\x59\x36\x20\x79\x89\x78\x24\xef\x7e\xf7\xef\x47\xd2\x47\x47\xf0\xfc\x35\x9c\xbe\x3e\x83\x93\xe7\x83\x33\x38\xfb\x71\x30\x84\x17\x83\x97\x27\x70\x2f\xc6\xa9\x81\x86\x4a\xc1\x94\xd7\x5c\x32\xcd\xc7\x70\x7e\x01\x0b\x2e\x55\xa5\x34\x68\x21\x66\x39\x28\xd1\xc8\x92\xc3\x44\x8a\x39\xb4\x6d\x31\x34\xc3\xae\x2b\xe2\x05\x2b\x7f\x67\x53\x4e\xc2\x9f\xec\x67\xd7\xc5\x71\x35\x5f\x08\xa9\x21\x8d\xa3\xe4\xfc\x42\x73\x95\xe0\x07\xaf\x4b\x31\xae\xea\xe9\xd1\x6f\x4a\xd4\x24\x98\xcc\x35\xfd\x9b\x56\xfa\x43\x73\x5e\x94\x62\x7e\x34\x15\xba\x5a\xa8\xa3\x99\x98\xd2\x84\xd2\xb2\x14\xf5\x12\x3f\xdb\xf6\x21\x48\x56\xa3\x99\x62\x60\x34\x2b\x34\x82\xd2\xa2\xeb\x68\x8a\xd7\x63\x40\x41\x16\xc7\x4b\x26\x61\x04\xc7\x40\x26\x8a\x57\x4c\xaa\x0f\x6c\xe6\x85\x68\xaf\x18\x2e\x64\x55\xeb\x89\x97\x39\x1b\xc5\x40\x0b\x16\xc7\xfa\x62\x41\x9e\x40\x71\xca\xe6\x1c\x55\xd2\x74\x53\xea\x16\x3d\x0a\x20\xbc\xe2\xfa\x83\x18\x2b\x32\x19\x4f\x9a\xba\x84\xf4\x6b\xdc\x73\xbf\xdf\x94\x85\x1a\xd2\xb6\xb5\xbb\xee\x57\xf9\xfd\xa5\x86\x27\xc7\x80\x71\x92\x6c\xae\x08\x7a\x35\x41\x39\xfc\x01\x35\x87\x47\x5d\x97\xe3\x46\x74\x85\x26\x70\x69\xf1\x0b\x93\x88\xc0\x7e\x0f\x67\x15\x85\xdb\x0d\x34\xcd\xd8\x6f\x1f\xf3\xb6\x65\x18\x85\x40\x04\x49\x91\xf4\xab\xce\xd0\x2f\xfa\x76\x91\xca\x60\x17\xac\xb7\x5c\x37\xb2\xbe\x5d\x5c\x6d\x1c\x7d\x6c\xb8\xbc\xc8\x81\xc9\xa9\x22\x58\xa6\x7c\x8a\x53\xfe\xe9\x87\x66\x32\xe1\x32\x7d\xf7\x9e\x24\x6d\x97\xe5\xf0\xee\x3d\xa6\x92\xcb\x09\x2b\x71\xbc\x95\xa3\x17\x92\x4d\xe7\xbc\x36\x85\x62\xfc\x29\x9e\x09\x5b\x25\x11\x0e\xb0\x72\x68\x48\x6e\xc4\xae\x80\x68\xc6\xda\x2e\x7e\x95\x95\xe6\x43\x8d\x85\x32\x4d\x13\x2a\x76\x3d\xd7\xb8\x34\xc9\x02\x03\x18\x37\xe8\x03\xf7\x14\xa1\xda\x7a\x7c\x08\xa8\x9c\x7f\x84\x62\xf8\xe6\xe5\xa0\x06\x2c\x1e\x6e\xf4\x32\x29\x69\x65\xd2\x62\x2d\x47\x13\x21\x01\x77\x2f\x49\x62\x95\x91\x8d\x52\x2c\x7c\xb4\xec\xa8\x0f\x54\x1f\x70\xdc\x4a\xd8\x2b\xf8\x1e\x1e\xd9\x91\xd1\xfb\x00\xf5\xe6\xa4\x37\x22\x4b\xbd\x28\xac\xeb\x14\xc3\x94\x2e\xb3\x2c\xb6\x4b\xfa\x4d\x5d\x12\x9b\x11\xc6\xf9\x18\xd8\x62\x81\x41\x48\x69\x44\xb1\x97\xd8\x4b\xc6\x1f\x3e\x53\x9c\x9c\xea\x9b\xc9\x44\x30\xba\x0a\xf0\x28\x00\x9c\x03\xb7\x5e\x87\xbd\x98\xee\xe3\x2a\x01\xa5\x38\xe2\xf6\x7b\xc7\x50\x57\x33\xeb\x2d\xb2\x42\x71\x22\xa5\x90\x93\x34\x99\x3b\x75\x07\x5f\x2d\x33\x5a\x28\xe4\x13\x38\x50\x49\xbe\x8f\x7a\x03\x6c\x1d\x8c\xcb\xee\xef\xe3\xdd\x46\x7c\xba\xab\x35\x99\xbe\xb8\x1a\x91\xef\xa7\xcc\xa9\xb3\x35\x1a\x7c\xf6\x55\xe5\x0a\x36\x8e\x3a\xd7\x8c\x41\xe1\xc6\x11\xd1\xd9\x58\xcc\x66\xf8\x6f\xa3\x2b\x62\x5b\x6d\xeb\x52\x33\x28\x29\x9c\x6e\xb5\x07\x6c\xc7\x39\x54\x0f\x1e\x23\x16\xdc\xa8\xb0\xea\x69\x5f\xc0\x9a\xa9\xed\x0f\xd7\x1a\xd8\x81\x76\x53\x51\x14\x14\x0e\xca\xcf\x73\x7e\xde\x4c\x53\xda\x9a\x85\x02\xb2\x6a\x57\xf5\xde\x50\xe7\x23\xc1\x60\xaf\x24\x6c\x3c\x4e\x36\x3c\xfd\xb9\x76\xe9\x35\x5d\x45\xae\x05\x6c\xe5\xbb\x2e\x5c\x65\x3a\xbc\xa6\xf9\x2d\xbe\x42\xe7\x7d\x06\x30\x81\x2b\x1f\x74\x8c\x66\xc9\xf4\x46\x0a\xdc\x26\xb0\x0c\xe3\xf3\x61\x91\x19\x60\xc3\x92\xd5\x86\xf6\xa3\x31\x57\x06\xc5\x26\x05\xed\xc4\x69\x36\x5d\x09\xf1\xf0\xef\x61\x44\x08\xd4\x1e\xc7\x54\xab\x67\x2b\x3c\x87\xdf\x50\x66\xde\x8a\x4f\x26\xf6\x96\x3d\x29\xe0\xc6\x7a\x4a\x68\x4d\xf8\x77\xb4\x95\xef\xaa\xd4\x75\xc5\x5a\xe0\xd2\x18\x48\x7c\x1e\xa3\x48\x9a\xd3\x82\xb4\x99\x6a\x41\x60\xd8\x09\x14\x1a\xc9\x95\x6f\xfd\x1e\xdd\xc9\x8a\x97\x5b\xc8\x6e\x10\xcb\x88\x79\x00\x08\xa6\xc0\xa8\xa8\xa7\x78\x76\x94\x78\xb1\x49\x6f\xce\xae\xa7\xca\x11\x23\xdd\x8f\x8d\x66\x9b\x24\x6a\xa1\x9e\xb9\xf8\x6a\x61\x90\x00\x73\x90\x70\xa5\x14\x9f\x72\x38\x6f\x34\xb0\x52\x37\xc8\xb1\x7e\xea\x60\x4c\x73\xc8\x6b\xa8\x34\xbb\xd6\x64\x39\xde\x70\x13\x18\x08\xdb\x9a\x9e\xee\x83\xfe\x9c\xe3\xad\x6d\x72\x91\xdc\xe5\xf6\x7f\x91\xdb\x7d\x32\x2a\xf9\x5c\x2c\xf9\x5d\x46\xb7\x33\xfa\x2f\xa6\x60\xca\x75\xd2\x9f\x6e\xa3\x15\x85\xfe\x2d\x57\xcd\xec\xd2\xc5\x79\x4b\xec\x6f\x32\x4e\x6c\x2f\xd0\xfe\x80\x5a\x9f\x89\x70\xcb\x47\xa7\xbf\xbe\xdc\xfe\x49\x69\x8f\xca\x27\xb7\x7f\x56\xa2\x9a\xbc\x2f\x92\x8d\x37\xed\xe6\x85\xc7\xf8\xb9\xe5\xa4\x29\x05\xeb\xe5\xd6\xb3\xc0\xb8\xe5\x9f\x61\xe6\x96\xd2\x0f\xfc\x83\xcc\x1e\xcd\xfd\xfd\x13\x85\x90\x1c\x26\x3e\x44\xe1\xcb\xdd\xad\xd9\xae\x36\xf7\x4e\xeb\x3c\xeb\x99\x3b\xbd\x87\x9d\xee\x82\x1c\x24\xa5\xbf\x77\x1f\x7e\x91\x6b\x9f\x7b\x06\xf4\x49\xd8\x91\x85\xdd\x69\xe8\x36\xee\x74\x2e\x29\x87\xa3\x55\xfe\xd7\xad\x5a\x8a\xa6\x5e\x37\xab\x19\x01\xd6\xf2\xb7\xdf\x7c\x59\x61\x1d\x9a\x9d\x37\x51\x57\x8f\xf2\x6d\xea\x31\xa6\x3e\xe3\xd6\xac\x52\xd6\x2b\x3a\x85\x2e\x9d\x01\xc6\x95\x9b\x3f\x04\xc2\x96\x40\xaa\xc0\x07\xbe\x39\x14\x8b\x67\x33\xa1\x38\xd2\x7f\x0c\xf8\x47\x61\x5f\xa9\x80\x23\xd7\x15\xde\x0b\x5c\xa1\xff\x33\x12\xa5\xa7\x92\xb1\x7e\xca\x57\x3a\x35\x3f\x46\x5c\x17\x3f\x47\xab\xe0\x6d\xb8\xc2\x70\x63\xd9\xd1\x9b\xe9\x32\x71\x9b\xd5\xb7\x46\xdc\x01\x73\x83\xfb\xfb\x2f\x10\xb8\x63\x1d\x93\x9c\x2d\x96\xbe\x5e\x8a\xb8\x5c\x97\x86\xab\xaf\x26\xeb\x3b\xb6\xde\xff\x47\x9b\xc6\x23\x38\x50\x5b\xbf\xda\xec\x05\x28\xf8\xd9\x26\xe0\xf1\xce\xd3\x92\x2b\x10\x34\x97\x66\xdf\xdd\x24\x51\x39\x19\xf5\xf1\x9a\x62\x0d\x9a\xf0\x57\x99\x3f\x03\x00\x00\xff\xff\x6d\xa3\x90\x30\x72\x17\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 6002, mode: os.FileMode(420), modTime: time.Unix(1463448743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

