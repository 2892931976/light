// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xd1\x6f\xdb\xb6\x13\x7e\x96\xfe\x8a\xab\xd0\xdf\x0f\xd2\xa2\xd2\xed\x36\xec\xa1\x43\x1e\xb2\xc6\xc5\x0c\xac\xe9\x96\xa4\xdd\x43\x51\xac\xb4\x75\x92\xb5\x4a\xa4\x42\x52\x8d\x03\x81\xff\xfb\x40\x52\xb6\x64\x5b\x4a\x1c\x17\xc5\x80\xbd\xd4\x12\x75\x3c\xde\x77\x77\xdf\xc7\x6b\x26\x13\x38\x7f\x0b\x17\x6f\xaf\x61\x7a\x3e\xbb\x86\xeb\x5f\x67\x57\xf0\x7a\xf6\xdb\x14\x9e\xf8\x93\x09\xcc\x14\xe4\x12\x32\x64\x28\xa8\xc2\x04\xe6\x77\x70\x47\x19\x28\xce\x8b\x18\x24\xaf\xc5\x02\x21\x15\xbc\x84\xa6\x21\x57\xf6\x55\x6b\xe2\x57\x74\xf1\x99\x66\x68\x16\x7f\x77\x8f\x5a\xfb\x7e\x5e\x56\x5c\x28\x08\x7d\x2f\x98\xdf\x29\x94\x81\xef\x05\xc8\x16\x3c\xc9\x59\x36\xf9\x5b\x72\x66\x16\xd2\x52\x99\x1f\xa9\xc4\x82\xb3\x2f\xe6\x31\xcb\xd5\xb2\x9e\x93\x05\x2f\x27\xb7\x5c\x2d\x8d\x71\xc1\xb3\x9d\x2f\x45\x3e\x9f\x54\x37\x81\xef\x35\xcd\x33\x10\x94\x65\x08\x64\x66\xcf\x93\x5a\x9b\x55\xe2\x7e\x9e\x01\xb2\x04\xb4\xf6\x23\xdf\x57\x77\x95\x0d\xf1\x82\x96\xa8\x35\x48\x25\xea\x85\x6a\xb4\xef\xf7\x7c\xbc\x41\xb5\xe4\x89\x34\x3b\xd2\x9a\x2d\x20\xfc\xae\x69\x9e\xb6\x3b\xa2\x6e\x73\x68\x91\x0a\x5a\xca\xe9\xaa\x12\x5a\x47\x66\xe1\x12\x65\x5d\xa8\xf5\x0a\x34\xbe\xf7\x85\x0a\x03\xdf\x93\xaa\x54\xe6\xbc\x9c\x65\xbe\xe7\xcd\xeb\x14\xc0\x66\x84\xfc\x52\xa7\x29\x0a\xdf\xf3\xa8\xc8\x24\x7c\xf8\x98\x33\x85\x22\xa5\x0b\x6c\xb4\xef\x45\xfe\x16\xbc\xd7\x82\x66\x25\x32\x07\xd0\x6b\x9a\x3c\x05\xf2\x8a\x5b\x74\x90\xa7\x26\x36\xf3\xa6\x35\x34\xd0\x34\x68\x9e\xd6\x27\x9f\xc2\x27\x53\x2e\x55\x2a\xad\xe1\x93\xdd\xbc\xf1\x7a\x26\x32\xe7\xd0\x2e\xe6\x29\xe0\x0d\x90\xeb\xbb\x0a\xed\x3f\x10\xd4\x39\x53\x3f\x7c\x1f\x38\x13\x17\xe6\x29\xd0\xaa\x42\x96\x84\xe6\x2d\x06\x95\x97\x48\xde\xb1\x7c\x15\xe6\x4c\xfd\xf4\xa3\xc9\xc4\x7b\x6a\x32\x10\xc3\xf3\x28\x5a\x7b\xc6\x42\xa2\x71\x4f\x66\x72\xc6\x5a\x6f\x6d\x70\x2e\x31\x92\x5c\x62\x55\xd0\x05\x86\x66\x39\x86\xe0\x69\x13\x9c\x04\x6b\x67\xc1\x49\xa0\x83\xd8\xee\xf2\x7a\xf6\x48\x55\x18\xc4\xff\x93\x41\x0c\x05\xb2\xee\xe8\xe8\xc3\x8b\x97\x1f\x63\x78\xf6\xc2\x9e\xef\xa5\x5c\xc0\x5f\x31\x48\x78\x79\xda\xe2\x5e\x5b\x9a\x2a\x79\x1d\x78\x87\xfc\xac\xc8\xa9\x7c\xcd\x45\x1b\xe6\x30\xec\xa6\xd9\x35\x0e\xa5\x83\xdb\x01\xbe\xd7\x81\xec\x1b\xb7\xe5\xf2\x3c\xbd\x97\xb0\xa1\x90\x0e\x0c\xa8\xcb\xc7\xae\x57\xc6\x55\xeb\x79\x26\x5f\xf1\xb2\x2a\x70\x75\xbf\x6b\xe7\xc7\xdf\x07\x67\x7a\xbc\x69\xc8\x19\xe3\x6a\x89\xc2\x25\xf5\xc3\x47\xd3\xde\xbe\x43\xb7\xf5\x29\x06\x14\x02\x4e\xc1\xd0\x9f\xbc\xa1\x42\x2e\x69\x11\x6e\xb9\xf7\x4c\x0f\x0a\x01\x4f\x4e\x81\xe5\xc5\xba\x3e\x05\xcf\xc8\x54\x08\x2e\x42\x14\xa2\x4d\x9c\x40\x55\x0b\xd6\x65\x6d\x2c\xf4\xfe\xf9\x1d\x82\x36\xe3\xfd\xe7\x79\x9d\x92\x3f\x45\xae\xf0\xca\x76\x98\x6d\xc4\x68\x8f\x6b\xba\xa3\x57\xb7\xd9\x71\xbd\x5a\xee\x72\xd8\x74\x5e\xde\xb5\x9d\x8d\xd0\x40\xaa\x96\x5d\xa0\xd5\xd2\x74\x7b\x70\xd2\x6a\x20\x99\x29\x4e\xc3\xfc\xe4\x85\xa9\x9a\xf1\x7c\x53\xa3\xb8\x33\x3e\xd2\x52\x91\xab\x4a\xe4\x4c\xa5\xa1\x89\xb5\x0d\x33\x8a\xa1\x5a\x12\x42\x8c\x5e\x98\x3c\x9d\xe3\xbc\xce\x42\xbb\x2b\xea\xaf\x98\xc3\x5b\xb3\x1e\xd7\xdf\x56\x8e\xe8\x39\x93\x28\x54\xb0\x49\x8a\x81\x7c\x8e\x52\xb9\x32\x1b\x74\x09\x4a\xb5\x8b\xcf\xd8\xb6\x4a\xd2\x19\xbb\x84\x8d\xb7\x98\x67\x3d\x6d\xf0\x9b\xb7\x18\xfe\xbf\xdd\x05\x4d\xd3\x27\xd0\x03\x4d\x76\xa0\xc3\x35\xc9\x7a\x8f\xae\x1b\x0d\x75\x56\x5a\x93\x3f\x4c\xce\x2e\xf9\xad\x4b\x5e\x0c\xeb\x8c\x91\xab\x05\x65\xd6\xad\xcd\xdf\x48\x93\x0e\xf4\x68\xb7\xb4\x2e\xc7\xd6\xe2\xa6\x22\xdb\xed\x7c\x7f\x5e\x47\x72\xda\xe3\xd5\x3b\x56\x76\xcc\xda\x66\x9f\x59\x48\x12\xd1\xde\x51\x6e\xe7\x20\xe1\x06\x19\xd7\xa7\x9c\xa7\xef\x49\xab\xb3\x33\xfe\xfc\x5d\xc1\x10\x28\x9d\x08\xbc\xec\xf2\x3e\x5d\xe1\x62\x37\xe7\xdf\x34\xcb\xf0\xdc\xc6\xb0\x49\x76\xbb\x2a\x50\x92\x4b\x7e\x2b\xcf\xd2\x14\x17\x0a\x93\x30\xda\x52\x08\x7f\x4b\x42\xfb\xe4\xa9\xab\x84\x2a\x74\xe4\x79\x04\xc0\x01\x7c\xfb\xf0\x86\xd0\x0d\x83\xdb\xc5\xe6\xa2\x19\x43\x36\x8e\x26\xc1\x02\xff\x3b\x68\x32\x6c\x55\x6d\x54\xc3\xd6\x72\x77\x69\xbd\x0f\xf2\xcb\x8e\x77\xf6\xab\x13\x1f\x9b\x8c\xbe\xfd\x1b\xfa\x19\x1d\xab\xfc\xfd\x0b\x66\x8f\xc9\x87\xcc\x5a\x43\x9a\x57\xdd\x90\x8b\xba\x28\xae\xf3\xd2\x09\xdf\x98\xee\x0d\x5f\x79\x0f\xde\xfd\x43\xee\xf6\x15\xe3\x71\x03\xc0\xe3\x42\x1c\xb8\x95\x8f\x94\xe8\x6f\xd2\x8d\x6d\x1b\x1e\x5d\x53\x37\xa7\xf7\xa1\x93\xf7\xb4\xc8\x93\x6e\x0c\xdd\xf4\x97\xdb\xb8\xab\xe0\xe4\x7a\x33\x6d\xb7\xc3\xe6\xc8\xc0\xb8\x5b\xda\x9e\xe7\xf5\xa0\xb8\xd5\xb2\x5f\x71\x81\x1c\x3d\xb0\x8d\x55\xbc\xb5\x1b\xa7\x74\x91\xcb\x96\xd3\x82\xdf\xee\xeb\x93\xed\x91\x63\x05\xaa\xbb\xba\xfa\xc2\x93\x60\x8a\x02\xcc\x69\xe4\x55\xc1\x25\x5a\xc5\x71\x8a\x42\x15\xdd\x11\x03\x1b\x99\x99\xfc\xac\xfd\x05\xae\x54\x18\xb9\xe3\x56\x6d\x98\x7d\xe5\x98\x16\x58\xee\xd4\xc2\xfa\xec\x38\x43\x15\x8d\x61\x65\x4f\xbc\x77\x10\x1b\x68\xca\x83\xba\xf2\x20\xa9\x39\x9c\xc8\x07\x8a\xcd\x61\x43\xdb\xf6\x7f\xa4\x8e\x9d\x03\x47\x62\xec\x26\x97\xde\x8b\xe3\x81\x2d\xdd\xb1\x63\xdf\x7e\x0f\x79\x5f\x5b\xa2\x87\x94\xe3\x18\xe9\xf0\xf4\x5e\xb9\x46\x4a\xf5\xb0\x7a\xfc\x7b\xf3\xe7\x48\x1d\x75\x47\xf8\xb6\x9a\x53\x21\xc2\xe8\xe7\x23\x25\xa0\x1b\x3e\x1c\x1d\xed\x68\xdb\x9d\x67\xff\x8a\xe4\x1e\xff\x09\x00\x00\xff\xff\xbf\x85\x94\xa0\x61\x13\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 4961, mode: os.FileMode(420), modTime: time.Unix(1474171620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

