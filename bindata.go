// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x6f\x6f\xdb\xb6\x13\x7e\x6d\x7d\x8a\xab\x7e\x4d\x20\xff\xaa\x2a\x2d\x30\xec\x45\x87\x0c\xe8\xda\x14\x33\xd0\xa6\x6b\x9d\x6d\x2f\x8a\xc2\x60\x64\xca\xd5\x26\x8b\x2e\x49\xb9\x0e\x34\x7d\xf7\xdd\x91\x14\x4d\xdb\x49\xf3\xaf\x45\xba\x61\x79\x13\xf1\xdf\xf1\xb9\xbb\xe7\x1e\x92\x3e\x38\x80\xe7\xaf\xe1\xf8\xf5\x09\x1c\x3d\x1f\x9d\xc0\xc9\xcf\xa3\x31\xbc\x18\xbd\x3c\x82\x7b\x11\x0e\x8d\x34\x94\x0a\x66\xbc\xe6\x92\x69\x3e\x85\xd3\x33\x58\x70\xa9\x4a\xa5\x41\x0b\x51\xa5\xa0\x44\x23\x73\x0e\x85\x14\x73\x68\xdb\x6c\x6c\x9a\x5d\x97\x45\x0b\x96\xff\xc9\x66\x9c\x3a\x7f\xb1\x9f\x5d\x17\x45\xe5\x7c\x21\xa4\x86\x24\x1a\xc4\xa7\x67\x9a\xab\x18\x3f\x78\x9d\x8b\x69\x59\xcf\x0e\xfe\x50\xa2\xa6\x8e\x62\xae\xe9\xdf\xac\xd4\x1f\x9a\xd3\x2c\x17\xf3\x83\x99\xd0\xe5\x42\x1d\x54\x62\x46\x03\x4a\xcb\x5c\xd4\x4b\xfc\x6c\xdb\x87\x20\x59\x8d\xdb\x64\x23\x63\x59\xe1\x26\xd8\x9b\x75\x1d\x0d\xf1\x7a\x0a\xd8\x31\x8c\xa2\x25\x93\x30\x81\x43\xa0\x2d\xb2\x57\x4c\xaa\x0f\xac\xf2\x9d\xb8\x5f\x36\x5e\xc8\xb2\xd6\x85\xef\x73\x7b\x64\x23\x2d\x58\x14\xe9\xb3\x05\x79\x02\xd9\x31\x9b\x73\x34\x49\xc3\x4d\xae\x5b\xf4\x28\x80\xf0\x8a\xeb\x0f\x62\xaa\x68\xcb\xa8\x68\xea\x1c\x92\xff\xe3\x9a\xfb\xfd\xa2\x61\x68\x21\x69\x5b\xbb\xea\x7e\x99\xde\x5f\x6a\x78\x72\x08\x18\x27\xc9\xe6\x8a\xa0\x97\x05\xf6\xc3\x5f\x50\x73\x78\xd4\x75\x29\x2e\x44\x57\x68\x00\xa7\x66\xbf\x31\x89\x08\xec\xf7\xb8\x2a\x29\xdc\xae\xa1\x69\xc4\x7e\xfb\x98\xb7\x2d\xc3\x28\x04\x5d\x10\x67\x71\x3f\xeb\x04\xfd\xa2\x6f\x17\xa9\x21\x9c\x07\xeb\x2d\xd7\x8d\xac\xef\x16\x57\x1b\x0d\x3e\x36\x5c\x9e\xa5\xc0\xe4\x4c\x11\x2c\x43\x9f\xec\x98\x7f\xfa\xa9\x29\x0a\x2e\x93\x77\xef\xa9\xa7\xed\x86\x29\xbc\x7b\x8f\xa9\xe4\xb2\x60\x39\xb6\xb7\x72\xf4\x42\xb2\xd9\x9c\xd7\x86\x28\xc6\x9f\xec\x99\xb0\x2c\x19\x60\x03\x99\x43\x4d\x72\x23\x72\x04\xa2\x11\xbb\x77\xf6\xbb\x2c\x35\x1f\x6b\x24\xca\x2c\x89\x89\xec\x7a\xae\x71\x6a\x3c\x0c\x36\xc0\xb8\x41\x1f\xb8\xa7\x08\xd5\xf2\xf1\x21\xa0\x71\xfe\x11\xb2\xf1\x9b\x97\xa3\x1a\x90\x3c\xdc\xd8\x65\x52\xd2\xcc\xb8\x45\x2e\x0f\x0a\x21\x01\x57\x2f\xa9\xc7\x1a\xa3\x3d\x72\xb1\xf0\xd1\xb2\xad\x3e\x50\x7d\xc0\x71\x29\x61\x2f\xe1\x47\x78\x64\x5b\xc6\xee\x03\xb4\x9b\x92\xdd\x01\xed\xd4\x77\x85\xbc\x4e\x30\x4c\xc9\x72\x38\x8c\xec\x94\x7e\x51\x17\x47\xa6\x85\x71\x3e\x04\xb6\x58\x60\x10\x12\x6a\x51\xec\x25\xd6\x92\xf1\x87\x57\x8a\x93\x53\x7d\x31\x99\x08\x0e\x2e\x02\x3c\x09\x00\xa7\xc0\xad\xd7\x61\x2d\x26\x57\x71\x95\x80\x52\x1c\x71\xf9\xbd\x43\xa8\xcb\xca\x7a\x8b\xaa\x90\x1d\x49\x29\x64\x91\xc4\x73\x67\x6e\xef\x7f\xcb\x21\x4d\x14\xf2\x09\xec\xa9\x38\xbd\x8a\x79\x03\x6c\x1d\x8c\x5d\xf7\xaf\xe2\xdd\x46\x7c\xba\x8b\x2d\x99\xba\xb8\x18\x91\xaf\xa7\xa1\x33\x67\x39\x1a\x7c\xf6\xac\x72\x84\x8d\x06\x9d\x2b\xc6\x80\xb8\xd1\x80\xe4\x6c\x2a\xaa\x0a\xff\x6d\x54\x45\x64\xd9\xb6\xa6\x9a\x41\x49\xe1\x74\xb3\x3d\x60\xdb\x4e\xa1\x7c\xf0\x18\xb1\xe0\x42\x85\xac\xa7\x75\x81\x6a\x26\xb6\x3e\x5c\x69\x60\x05\xda\x45\x59\x96\x51\x38\x28\x3f\xcf\xf9\x69\x33\x4b\x68\xe9\x30\xec\xa0\x5d\xed\xac\xde\x1b\xaa\x7c\x14\x18\xac\x95\x98\x4d\xa7\xf1\x86\xa7\xbf\xd6\x2e\xbd\xa6\xaa\xc8\xb5\x40\xad\x7c\xd5\x85\xb3\x4c\x85\xd7\x34\xbe\xa5\x57\xe8\xbc\xcf\x00\x26\x70\xe5\x83\x8e\xd1\xcc\x99\xde\x48\x81\x5b\x04\x56\x61\x7c\x3e\x2c\x32\x03\x6c\x9c\xb3\xda\xc8\xfe\x60\xca\x95\x41\xb1\x29\x41\xe7\xe2\x34\x8b\x2e\x84\xb8\x7f\x33\x8c\x08\x81\xca\xe3\x90\xb8\x7a\xb2\xc2\x73\xf8\x0d\x65\xe6\xad\xf8\x64\x62\x6f\xd5\x93\x02\x6e\x76\x4f\x08\xad\x09\xff\x39\x65\x15\x56\x55\x59\x2b\x2e\x75\xb2\x87\xcc\xdd\x2e\x2c\x58\xdb\xf5\xf5\x23\xcd\x81\x41\x2d\x43\x18\xc4\x86\xc5\x40\xd1\x91\x5c\xf9\xea\xef\x01\x1e\xad\x78\xbe\x05\xee\x32\x38\xcd\x62\x8a\x97\x91\x9b\xc2\x99\x30\x8f\x01\xf1\x64\x18\x1b\xf5\x14\x4f\x90\x1c\xaf\x37\xc9\x57\x8d\x84\xd7\xcc\x09\x23\xf3\x8f\x2f\x37\xbe\x5a\x18\x58\xc0\x1c\x3e\x5c\x23\xc5\xa7\x14\x4e\x1b\x0d\x2c\xd7\x0d\xca\xae\x1f\xda\x9b\xd2\x18\xe2\x20\x49\x0c\xa1\x4c\x58\x80\x84\x8a\xb6\xdf\xee\x66\xe6\xad\x3d\x9b\x56\x27\x32\xce\x36\xc6\xcb\xd6\xb1\x3f\x1b\x82\x62\x9e\xe3\x15\xaf\x38\x8b\xff\x1d\x2c\xb8\xcd\xd6\x97\xb2\x60\xc7\xf8\x37\xcd\x82\xab\xe4\x5e\xf2\xb9\x58\xf2\x2f\x99\xfb\x29\xaf\xf8\x1d\xe5\xfe\x36\x5b\x5f\x9a\xfb\x1d\xe3\xff\xf8\xdc\xcf\xb8\x8e\xfb\xd3\x7a\xb2\xa2\x9c\xbf\xe5\xaa\xa9\x76\x1e\x02\x5b\xdd\xfe\x66\xe6\xba\xed\x83\xc0\x1f\xb8\xeb\x33\x1e\xee\xf8\x2a\xe0\xaf\x63\x77\x7f\xf2\xdb\xa3\xff\xc9\x17\x3e\xfb\xcd\xd5\xee\xba\x74\x47\x43\x69\x5f\x6e\x1b\xaf\xf4\xcd\x2b\x9c\xf1\x74\xcb\x4d\x43\x06\xeb\xe7\xd6\x43\xc7\x38\xe6\x1f\x96\xe6\xde\xd5\x37\xfc\x13\xd3\xde\x34\xfa\x1b\x35\x76\x42\xbc\x1f\xfb\x20\x85\xbf\x45\xb8\x39\xdb\x7c\x73\x2f\x4f\xba\xb8\xdb\x8b\x94\x79\xa5\x78\xd8\xc9\x79\x90\x83\xb4\xf4\x2f\x89\xfd\x6b\xb9\x76\x85\x87\x4d\xe3\x11\xec\xa9\xad\x97\xcd\x95\x00\xad\x9f\x36\xc1\xf5\xd5\x65\x6b\x7f\xb2\x4a\x3f\x5f\xc5\xb9\x68\xea\x75\x1d\x9b\x16\x20\xcd\xbf\xff\xee\x7a\x9c\xdb\x37\x2b\xbf\x0e\xe5\x1e\x79\xc2\xf5\x3d\x66\xb3\x4b\x1c\xab\x4a\x65\xfd\x22\x69\xdb\x39\x99\x8c\x33\xd7\x3c\x9a\x6e\x5d\x2f\xa8\x24\x05\x97\x46\x6b\xb3\x67\x95\x50\x1c\xcf\xa4\x08\xf0\x8f\x42\xbf\x52\x81\x84\xae\xe9\xdf\x77\xb8\x2a\xb8\x9d\xc6\xd2\xcb\xd0\xec\x7e\xcc\x57\x3a\x31\xbf\xbd\x7c\x29\xf9\x1e\xac\x82\xa7\xf0\x0a\xc3\x80\xd4\xa3\x27\xe2\xae\xae\x9b\xd9\x77\xa6\xeb\x81\xb0\x83\xfb\xfb\x16\xf4\xdd\x49\x92\x49\xce\x96\x88\x5f\xa6\x1f\x0a\xa7\x9b\x85\x40\xe9\xbd\x1e\x49\x77\x59\x6a\x64\xfd\x62\x5d\xff\x4f\xd8\xef\x42\xd8\x43\x65\xef\xbc\x4c\x39\xba\xe0\x76\xc9\xf0\x87\xcf\x09\xd7\x67\x19\x52\x31\x64\xff\x0d\xb4\xcc\xf5\x51\xa9\xaf\x75\xd8\x40\x0c\x7f\xa7\xfa\x3b\x00\x00\xff\xff\x9a\x4a\x78\x5f\x84\x18\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 6276, mode: os.FileMode(420), modTime: time.Unix(1463377369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

