// Code generated by go-bindata.
// sources:
// persist.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _persistTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdd\x6f\xdb\x36\x10\x7f\xb6\xfe\x8a\xab\xd6\x18\xf2\xaa\x2a\x2d\x30\xec\xa1\x43\x06\x74\x6d\x8a\x19\x68\xd3\x35\xce\xb6\x87\xa2\x28\x18\x99\x76\xb4\xc9\xa2\x4b\x52\x8e\x03\x4d\xff\xfb\xee\x48\x8a\xa6\x9d\x2f\xe7\xa3\xcb\x06\x2c\x2f\x16\x8f\xe4\xdd\xef\xbe\x7e\x24\xb3\xbb\x0b\xaf\xdf\xc3\xc1\xfb\x23\xd8\x7f\x3d\x3c\x82\xa3\x9f\x87\x23\x78\x33\x7c\xbb\x0f\x8f\x22\x9c\x1a\x6a\x28\x14\x4c\x79\xc5\x25\xd3\x7c\x0c\xc7\x67\x30\xe7\x52\x15\x4a\x83\x16\xa2\x4c\x41\x89\x5a\xe6\x1c\x26\x52\xcc\xa0\x69\xb2\x91\x19\xb6\x6d\x16\xcd\x59\xfe\x27\x9b\x72\x12\xfe\x62\x3f\xdb\x36\x8a\x8a\xd9\x5c\x48\x0d\x49\xd4\x8b\x8f\xcf\x34\x57\x31\x7e\xf0\x2a\x17\xe3\xa2\x9a\xee\xfe\xa1\x44\x45\x82\xc9\x4c\xd3\xcf\xb4\xd0\x27\xf5\x71\x96\x8b\xd9\xee\x54\xe8\x62\xae\x76\x4b\x31\xa5\x09\xa5\x65\x2e\xaa\x05\x7e\x36\xcd\x53\x90\xac\x42\x33\xd9\xd0\x68\x56\x68\x04\xa5\x59\xdb\xd2\x14\xaf\xc6\x80\x82\x41\x14\x2d\x98\x84\xcf\xb0\x07\x64\x22\x7b\xc7\xa4\x3a\x61\xa5\x17\xa2\xbd\x6c\x34\x97\x45\xa5\x27\x5e\xe6\x6c\x64\x43\x2d\x58\x14\xe9\xb3\x39\x79\x02\xd9\x01\x9b\x71\x54\x49\xd3\x75\xae\x1b\xf4\x28\x80\xf0\x8e\xeb\x13\x31\x56\x64\x32\x9a\xd4\x55\x0e\xc9\xb7\xb8\xe7\x71\xb7\x69\x10\x6a\x48\x9a\xc6\xee\x7a\x5c\xa4\x8f\x17\x1a\x5e\xec\x01\xc6\x49\xb2\x99\x22\xe8\xc5\x04\xe5\xf0\x17\x54\x1c\x9e\xb5\x6d\x8a\x1b\xd1\x15\x9a\xc0\xa5\xd9\x6f\x4c\x22\x02\xfb\x3d\x2a\x0b\x0a\xb7\x1b\x68\x9a\xb1\xdf\x3e\xe6\x4d\xc3\x30\x0a\x81\x08\xe2\x2c\xee\x56\x1d\xa1\x5f\xf4\xed\x22\x35\x80\x8b\x60\x1d\x72\x5d\xcb\xea\x61\x71\x35\x51\xef\x4b\xcd\xe5\x59\x0a\x4c\x4e\x15\xc1\x32\xe5\x93\x1d\xf0\xd3\x9f\xea\xc9\x84\xcb\xe4\xe3\x27\x92\x34\xed\x20\x85\x8f\x9f\x30\x95\x5c\x4e\x58\x8e\xe3\x8d\x1c\xbd\x91\x6c\x3a\xe3\x95\x29\x14\xe3\x4f\xf6\x4a\xd8\x2a\xe9\xe1\x00\x2b\x87\x86\xe4\x46\xe4\x0a\x88\x66\xac\xed\xec\x77\x59\x68\x3e\xd2\x58\x28\xd3\x24\xa6\x62\xd7\x33\x8d\x4b\xe3\x41\x60\x00\xe3\x06\x5d\xe0\x5e\x22\x54\x5b\x8f\x4f\x01\x95\xf3\x2f\x90\x8d\x3e\xbc\x1d\x56\x80\xc5\xc3\x8d\x5e\x26\x25\xad\x8c\x1b\xac\xe5\xde\x44\x48\xc0\xdd\x0b\x92\x58\x65\x64\x23\x17\x73\x1f\x2d\x3b\xea\x02\xd5\x05\x1c\xb7\x12\xf6\x02\x7e\x84\x67\x76\x64\xf4\x3e\x41\xbd\x29\xe9\xed\x91\xa5\x4e\x14\xd6\x75\x82\x61\x4a\x16\x83\x41\x64\x97\x74\x9b\xda\x38\x32\x23\x8c\xf3\x1e\xb0\xf9\x1c\x83\x90\xd0\x88\x62\x2f\xb1\x97\x8c\x3f\xbc\x54\x9c\x9c\xea\x9a\xc9\x44\xb0\x77\x19\xe0\xcf\x01\xe0\x14\xb8\xf5\x3a\xec\xc5\x64\x1b\x57\x09\x28\xc5\x11\xb7\x3f\xda\x83\xaa\x28\xad\xb7\xc8\x0a\xd9\xbe\x94\x42\x4e\x92\x78\xe6\xd4\xed\x7c\xb3\x18\xd0\x42\x21\x5f\xc0\x8e\x8a\xd3\x6d\xd4\x1b\x60\xab\x60\x9c\x77\x7f\x1b\xef\xd6\xe2\xd3\x5e\xae\xc9\xf4\xc5\xe5\x88\x7c\x3f\x0d\x9c\x3a\x5b\xa3\xc1\x67\x57\x55\xae\x60\xa3\x5e\xeb\x9a\x31\x28\xdc\xa8\x47\x74\x36\x16\x65\x89\x3f\x6b\x5d\x11\xd9\x6a\x5b\x95\x9a\x41\x49\xe1\x74\xab\x3d\x60\x3b\x4e\xa1\x78\xf2\x1c\xb1\xe0\x46\x85\x55\x4f\xfb\x02\xd6\x4c\x6c\x7f\xb8\xd6\xc0\x0e\xb4\x9b\xb2\x2c\xa3\x70\x50\x7e\x5e\xf3\xe3\x7a\x9a\xd0\xd6\x41\x28\x20\xab\x76\x55\xe7\x0d\x75\x3e\x12\x0c\xf6\x4a\xcc\xc6\xe3\x78\xcd\xd3\x5f\x2b\x97\x5e\xd3\x55\xe4\x5a\xc0\x56\xbe\xeb\xc2\x55\xa6\xc3\x2b\x9a\xdf\xe0\x2b\x74\xde\x67\x00\xe2\xa5\x8f\x39\x06\x33\x67\x7a\x2d\x03\x6e\x0f\x58\x82\xf1\xe9\x20\x08\x63\xae\x8c\xcd\x75\xc2\xb9\x10\xd5\x28\x67\xd5\xe5\x80\xfa\xb7\x42\x84\x08\xa8\x17\xf6\xa8\x30\x8f\x96\x78\xe8\x7e\xa0\x34\x1c\x8a\x53\x13\x68\x4b\x95\x14\x5d\x63\x3c\x21\xb0\x26\xd6\x17\xf4\x50\xd8\x42\x45\xa5\xb8\xd4\xc9\x0e\x96\xe9\x66\x17\xc1\x4a\xaf\x6f\x16\x69\x4e\x07\x1a\x99\xea\x70\x43\x54\x6c\x73\xea\x79\x22\x48\xec\x0c\x8f\xfb\xc9\x59\xdc\x9a\xe5\xca\xf3\x41\xe7\xc5\xfe\x92\xe7\x1b\x1e\x5c\x87\xb9\x9e\x8f\xf1\x7a\x72\x5b\xcc\xcc\x43\x40\x38\x19\xc6\x4f\xbd\xc4\x23\x25\xc7\xfb\x4e\xf2\x55\x2d\xfb\xe0\x30\xd2\xfe\xfc\x7a\xdd\xcb\xb9\x41\x05\xcc\xc1\xc3\x3d\x52\x9c\xa6\x70\x5c\x6b\x60\xb9\xae\x91\x86\xfd\xd4\xce\x98\xe6\x10\x06\x51\x64\x88\x84\x05\x38\xa8\x87\x3b\x6b\xb7\xd3\x6e\xd4\x6d\x99\x77\xc9\x67\x62\xc1\xef\x33\xef\x63\x5e\xf2\x87\xc9\xfb\x5d\x2c\x5f\x97\xf7\x73\xba\xff\xe3\x79\x9f\x72\x1d\x77\x8c\xbd\xa4\x74\x1f\x72\x55\x97\xe7\xee\x82\x1b\x62\x7f\x38\x3b\xb1\xbd\x13\x3e\x1c\xef\x3f\x38\xd9\x5b\xb6\x7f\x71\xcf\x74\x6f\x8e\xee\x9b\xd6\x31\x2a\x4a\xbb\x36\x5a\x7b\x85\xad\x1f\xd1\xc6\xd1\x75\x2f\x4d\xa2\xad\x9b\x1b\xf7\x58\xe3\x97\x7f\x37\x50\x09\xf9\x81\x7f\x41\x50\x75\xad\x2e\x4c\x28\x84\xb8\x1f\xfb\x18\x85\x4f\x4d\xb7\x66\xb3\x96\xdc\xc3\x82\xee\x65\xf6\xe8\x34\x97\x50\x8f\x3a\xb9\x00\x71\x90\x94\xee\x9e\xd8\xbf\x89\x63\x5b\xdc\x5a\x6b\x6f\x7f\x47\x6d\x5c\x5b\xb7\x81\xb3\xba\xb6\x06\x77\x13\x97\xa9\xfe\x32\xbd\xba\x39\x73\x51\x57\xab\xf6\x34\x23\xc0\x02\xff\xfe\xbb\x9b\x95\x5b\xdf\xec\xfc\x3a\xd5\xf6\x2c\xdd\xbc\x5e\x18\x63\xd7\x38\x56\x16\xca\xfa\x45\x84\x75\xee\xb0\x31\xce\xdc\xf0\xb4\xb9\x73\xab\x20\x87\xe0\x53\xd5\x30\x68\xf6\xaa\x14\x8a\xe3\x39\x13\x01\xfe\x19\x66\x54\x01\x35\xae\x4a\xbf\x13\xb8\x0e\xb8\x1b\x77\xd2\xa5\xdf\x58\x3f\xe0\x4b\x9d\x98\x67\xf5\x3d\xb1\x72\x6f\x19\x3c\x72\x96\x18\x85\xfe\x92\xee\xfe\x0f\xc5\xd6\xe0\xfe\xfe\x05\xa4\xed\x88\xc6\x84\x7d\x83\x99\xaf\xe3\x05\x85\xcb\xcd\x46\xa0\xc4\xdd\xac\xfc\xce\xd7\x9f\xe1\xea\xcb\xc9\xfa\x7f\xb6\xfe\xa7\xd9\x3a\xa4\xeb\xd6\x93\x8f\x2b\x15\xb4\x96\x0c\x7e\xb8\x8a\x8e\xae\xac\x8e\x92\x61\xe1\xdf\x82\xa1\x9c\x8c\x3a\x78\xc5\xae\x06\x62\xf8\x8f\x85\xbf\x03\x00\x00\xff\xff\x49\xf1\xf0\x82\x35\x16\x00\x00")

func persistTxtBytes() ([]byte, error) {
	return bindataRead(
		_persistTxt,
		"persist.txt",
	)
}

func persistTxt() (*asset, error) {
	bytes, err := persistTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "persist.txt", size: 5685, mode: os.FileMode(420), modTime: time.Unix(1463140744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"persist.txt": persistTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"persist.txt": &bintree{persistTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

