// Code generated by go-bindata.
// sources:
// persist.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _persistTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\xdf\x53\xdb\xb8\x13\x7f\x8e\xff\x8a\xad\xbf\x0d\x63\x7f\xeb\x9a\xf2\xca\x0d\x0f\xbd\x42\xe7\x32\xd3\xd2\x2b\xe1\xee\x1e\x18\x86\x11\x8e\x12\x7c\xe7\x58\xa9\x24\x43\x18\x9f\xff\xf7\xdb\x95\x14\x23\x87\x40\x20\x94\x72\x97\x97\x58\xbf\x76\x3f\xbb\xfa\xec\x47\xd2\xf6\x36\xec\x7f\x81\xc3\x2f\xc7\x70\xb0\x3f\x38\x86\xe3\x5f\x06\x43\xf8\x38\xf8\x74\x00\xaf\x02\x1c\x1a\x68\xc8\x15\x4c\x78\xc9\x25\xd3\x7c\x04\xe7\xd7\x30\xe3\x52\x61\x9f\x16\xa2\x48\x40\x89\x4a\x66\x1c\xc6\x52\x4c\xa1\xae\xd3\xa1\x69\x36\x4d\x1a\xcc\x58\xf6\x17\x9b\x70\xea\xfc\xd5\x7e\x36\x4d\x10\xe4\xd3\x99\x90\x1a\xa2\xa0\x17\x9e\x5f\x6b\xae\x42\xfc\xe0\x65\x26\x46\x79\x39\xd9\xfe\x53\x89\x92\x3a\xc6\x53\x4d\x7f\x93\x5c\x5f\x54\xe7\x69\x26\xa6\xdb\x13\xa1\xf3\x99\xda\x2e\xc4\x04\x07\xea\xfa\x2d\x48\x56\xa2\xed\x74\x60\xcc\x29\xb4\x8c\xbd\x69\xd3\xd0\x10\x2f\x47\x80\x1d\x71\x10\x5c\x32\x09\x67\xb0\x07\x64\x37\xfd\xcc\xa4\xba\x60\x45\xdb\x89\x4e\xd2\xe1\x4c\xe6\xa5\x1e\x07\x81\xbe\x9e\x11\x52\x48\x0f\xd9\x94\xe3\x6a\x50\x5a\x56\x99\xae\x11\xb1\xe7\xed\x33\xd7\x17\x62\xa4\xc8\x7a\x30\xae\xca\x0c\xa2\xff\xe3\x9a\xd7\x8b\x45\xb1\x6f\x21\xaa\x6b\xbb\xea\x75\x9e\xbc\xbe\xd4\xb0\xbb\x07\x98\x07\xc9\xa6\x8a\x50\xe6\x63\xec\x87\xbf\xa1\xe4\xf0\xae\x69\x12\x5c\x88\xa8\x69\x00\xa7\xa6\xbf\x33\x89\x08\xec\xf7\xb0\xc8\x29\x9d\xae\xa1\x69\xc4\x7e\xb7\x39\xad\x6b\x86\x01\x7b\x5d\x10\xa6\xe1\x62\xd6\x31\xc6\x45\xdf\x2e\x29\x31\xac\x82\x75\xc4\x75\x25\xcb\x97\xc5\x55\x07\xbd\x6f\x15\x97\xd7\x09\x30\x39\x51\x04\xcb\xd0\x23\x3d\xe4\x57\x3f\x57\xe3\x31\x97\xd1\xc9\x29\xf5\xd4\x4d\x9c\xc0\xc9\x29\xee\x1a\x97\x63\x96\x61\x7b\x69\x8f\x3e\x4a\x36\x99\xf2\xd2\x70\xc2\xc4\x93\x7e\x10\x96\x10\x3d\x6c\x20\x49\xa8\x49\x61\x04\x8e\x2b\x34\x62\x7d\xa7\x7f\xc8\x5c\xf3\xa1\x46\x4e\x4c\xa2\x90\xc8\xac\xa7\x1a\xa7\x86\xb1\xe7\x00\xf3\x06\x8b\xc4\xbd\x47\xa8\x96\x7a\x6f\x01\x8d\xf3\x6f\x90\x0e\xbf\x7e\x1a\x94\x80\xe4\xe1\xc6\x2e\x19\xc9\x04\xc5\x7a\x86\x9f\x36\x81\xbb\x1d\xee\x45\x61\xff\x32\x4c\xe0\x66\xa2\xcd\x9b\x6d\x2d\x52\x66\x57\xc6\x68\xd0\x64\x67\x0f\xd8\x6c\x86\xd0\x23\x6a\x25\x10\xd6\xe1\x9b\x15\x8e\x4e\x76\x76\x0b\x5e\x46\x2b\x46\xe2\xb7\x3b\xa7\x6f\xc2\x06\xe3\xb2\xd8\x79\xa1\x38\x05\xd0\xee\xd4\x12\xf6\x2e\xa4\x33\x0f\x52\x02\x5c\x4a\x8a\xc8\x2f\xb1\xe8\xa1\xc1\x50\xce\x70\xf9\xab\x3d\x28\xf3\x82\x28\xd0\xeb\x61\x85\xa7\x07\x52\x0a\x89\x89\x99\x3a\x73\xfd\xff\x5d\xc6\x34\x51\xc8\x5d\xe8\xab\x30\xb9\x31\x9f\x76\x70\x90\xc9\xe6\x8e\x1c\x39\xa2\x2e\x50\x51\x03\x89\x90\x31\xdd\x21\x77\x27\x21\xcd\x03\x6d\xdd\x8e\xd0\xb3\xd7\xf3\x14\xc9\xfb\x5c\x50\xc6\xb1\x31\xe8\x35\xae\xd2\x3c\x56\x06\x26\x19\xfb\xfc\xbc\x9a\x44\x96\x9f\x8e\x9a\x71\xec\x0f\x11\xa6\x34\x4d\x63\x5b\x05\x64\x93\x8a\x0b\x6b\x18\xe9\x18\xb2\xd1\x28\xec\xf8\xfb\xad\x74\x59\x35\xc4\x25\x2d\xf4\x04\xa1\x25\xb6\x3f\xcb\x14\x51\x49\xe3\x4b\x92\x20\x24\xb4\x79\x80\x70\x1e\xde\x93\x57\xb7\x06\x6c\x0d\xb7\x49\x21\x08\x23\xae\x8c\xcf\x6e\x4d\xaf\x44\x35\xcc\x58\x79\x37\xa0\xad\x8d\x10\x21\x02\xa2\xe0\x1e\x15\xe0\xf1\x1c\x19\xf5\x95\x32\x7d\x24\xae\x96\x52\x6e\x75\x89\xf2\x6c\x60\x44\x04\xdb\x64\x7d\x05\x89\x7d\x0e\xe7\xa5\xe2\x52\x47\x7d\xa4\xcd\x32\x8d\xc1\x13\xbc\x96\xbf\xd2\x68\x31\xb5\x02\xe2\xb2\x6b\xa2\x65\xbb\xbd\x6d\xa5\x7a\x7b\x3c\xc5\xc3\x73\x7c\x1d\x36\x66\xba\x6a\x2b\x72\x11\xd0\xc1\x9c\x67\x77\x06\xb3\x0e\x7e\x35\x1b\xe1\xa9\xbf\x31\x7c\xd6\xa2\x41\x64\x29\x66\x55\xbd\x47\x2d\xcf\xf0\x1e\x11\x3d\xaf\xeb\x36\x51\x8c\xcc\xef\xac\x37\x3e\x9f\x19\x58\xc0\x1c\x3e\x5c\x23\xc5\x55\x02\xe7\x95\x06\x96\xe9\x8a\x15\x37\x43\xfd\x11\x8d\x21\x0e\x12\xac\x0e\x14\xe6\x01\x21\x8d\x5f\xb8\xdb\xcc\xbc\x31\xf7\x40\x12\x48\x3e\x15\x97\xfc\x79\x48\x30\xe2\x05\x7f\x21\x12\x3c\xc9\xf5\x3a\x12\xdc\x32\xfe\x5f\x27\xc1\x84\xeb\x70\x21\xeb\x73\xda\xfb\x23\xae\xaa\xe2\xd6\x9d\x6c\xa9\xbb\x3d\x97\x5d\xb7\xbd\x9b\xbd\xdc\xe1\xf0\xe2\x27\x82\x3d\x12\x76\x9f\xed\x4c\x30\x56\x1e\xcd\x69\xb4\x94\x2c\x6a\xaa\xf3\x06\xea\x1e\xe9\x3d\x80\x9e\x89\xbb\x1b\xb4\xd9\x77\x1b\x75\xf7\x1e\x86\x47\x5f\xc9\xaf\x22\xff\x95\xe6\x66\x2f\xd3\xc3\xf2\x82\x10\xb9\x23\xd3\xdc\xf9\x5a\xef\xd1\x0a\xaf\x5e\x9e\x17\xf7\xb4\xc7\x60\x33\xbe\x56\x5c\x12\xbb\x52\xde\x02\xe8\xab\xa5\x6b\xe2\x43\xf0\xb8\x24\xf7\x9a\xce\xad\xc4\xe5\x7c\x6b\x9e\xdc\x5f\x71\x99\xa8\xca\x9b\x9a\x33\x2d\x40\xd6\x6e\xca\xa0\x2d\x63\xe1\x99\x08\xf4\x2e\x59\xbe\x56\x18\x6f\x6b\x22\x2c\x72\x65\x03\x24\x39\xba\x75\xae\x98\xb8\x36\x3e\x58\x9e\x5e\x08\x28\x16\xf8\x36\x34\x52\x99\x7e\x28\x84\xe2\x78\xa4\x04\x80\x3f\x23\x81\xca\xd3\xc0\xf6\xc1\xda\x76\xb8\x47\xeb\xd3\x44\x72\x2c\x9c\xf7\x43\x3e\xd7\x91\x79\xc7\x7e\x27\xf9\xed\xcd\xbd\x87\xc7\x1c\xb3\xb0\x35\xa7\xe7\xc9\x4b\xc9\x32\xb8\xdf\xbf\x40\x9d\x9d\xfc\x98\xb4\x2f\x09\xef\xba\x27\xa5\xc2\xe9\x66\x21\xd0\xc6\x3d\x92\x7f\xb7\x09\x68\xa4\xf8\x6e\x2d\xfe\x01\x52\xfc\x03\x95\x78\x4d\x6a\xbf\x8f\x0e\x37\x2e\x9f\x4e\x87\x9b\x56\x42\xdc\x7e\xa3\xb7\x28\xfe\xe9\x3e\x51\xb9\x77\x8b\x0b\x86\xec\xdd\x44\x67\x5c\x1f\xd5\xe1\x8d\x5c\x1a\x8c\xfe\x93\xfd\x9f\x00\x00\x00\xff\xff\xd4\x1b\x09\x37\x4b\x15\x00\x00")

func persistTxtBytes() ([]byte, error) {
	return bindataRead(
		_persistTxt,
		"persist.txt",
	)
}

func persistTxt() (*asset, error) {
	bytes, err := persistTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "persist.txt", size: 5451, mode: os.FileMode(420), modTime: time.Unix(1463123900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"persist.txt": persistTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"persist.txt": &bintree{persistTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

