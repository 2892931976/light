// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\x96\x3e\xc5\x55\x4b\x02\x79\x53\x94\xf6\x35\x43\x1e\xb2\x26\xc5\x0c\xb4\xe9\x1a\x67\xdb\x43\x10\x04\x8a\x4c\x3b\xda\x64\xc9\x25\x69\xd7\x81\xa6\xef\xbe\xbb\x23\x45\xd3\x8e\xbd\xa4\x5b\xb3\xac\xc0\x02\x04\x26\x8f\xe2\xf1\x77\xff\x7e\x3c\x1e\x1c\xc0\xc9\x7b\x38\x7b\x7f\x01\xa7\x27\xfd\x0b\xb8\xf8\xb1\x3f\x80\x37\xfd\xb7\xa7\xf0\x22\xc4\xa5\xbe\x86\x42\xc1\x58\x54\x42\x66\x5a\x0c\xe1\xe6\x0e\xc6\xf5\x4d\xa6\x51\xa8\xeb\xba\x4c\x40\xd5\x33\x99\x0b\x18\xc9\x7a\x02\x4d\x93\x0e\x78\xda\xb6\x69\x38\xcd\xf2\xdf\xb3\xb1\x20\xe1\x4f\x66\xd8\xb6\x61\x58\x4c\xa6\xb5\xd4\x10\x87\x41\x74\x73\xa7\x85\x8a\x70\x20\xaa\xbc\x1e\x16\xd5\xf8\xe0\x37\x55\x57\x24\x18\x4d\x34\xfd\x8c\x0b\x7d\x3b\xbb\x49\xf3\x7a\x72\x30\xae\x75\x31\x55\x07\x65\x3d\xa6\x05\xa5\x65\x5e\x57\x73\x3b\xc4\x9d\xa4\xa6\x69\xf6\x41\x66\x15\x9e\x98\xf6\xf9\x10\x85\xe7\xa1\x34\x6d\x5b\x5a\x12\xd5\x10\x50\xd0\x0b\x43\x7d\x37\x25\x54\x90\x9e\x65\x13\x81\x32\x40\x1d\xb3\x5c\x37\x88\xce\xd3\xf1\x4e\xe8\xdb\x7a\xa8\x68\x4f\x38\x9a\x55\x39\xc4\xdf\xe2\x9e\x9d\x6e\x53\xcf\xd7\x10\x37\x8d\xd9\xb5\x53\x24\x3b\x73\x0d\x87\x47\x80\x36\xcb\x6c\xa2\xe8\xec\x62\x84\x72\xf8\x03\x2a\x01\x2f\xdb\x36\xc1\x8d\x88\x85\x16\xf0\xd3\xf4\x97\x4c\x22\x02\x33\x1e\x94\x05\xb9\xce\x4e\x34\xad\x98\xb1\xf3\x5f\xd3\x64\x68\x86\x27\x82\x28\x8d\xba\xaf\x2e\xd0\x2e\x1a\x5b\x53\x7b\xb0\x09\xd6\xb9\xd0\x33\x59\x3d\x2f\xae\x26\x0c\xe6\x99\x04\x21\xf9\xbf\x96\x61\xf0\x71\x26\xe4\x5d\x02\x99\x1c\x2b\x42\xc9\x99\x91\x9e\x89\x4f\x3f\xcc\x46\x23\x21\xe3\xcb\x2b\x92\x34\x6d\x2f\x81\xcb\xab\xa2\xd2\x42\x8e\xb2\x1c\xe7\x18\x32\xd6\xa4\xf4\x44\x83\xc9\x04\x3f\x84\x6f\x64\x36\x9e\x88\x8a\x13\x81\xcd\x4d\x5f\xd7\x26\x0b\x02\x9c\x60\x66\xd0\x94\xac\x0c\x6d\x82\xd0\x0a\xeb\x3a\x82\x88\x72\x19\x87\xb8\x1c\x79\x3a\xd1\x93\xd0\xb9\xf2\x18\xd1\x9a\x14\xdb\x07\xd4\x27\x3e\x42\x3a\xf8\xf0\xb6\x5f\x01\xa6\x13\xe5\x7a\x10\x8c\x6a\x09\xd7\x09\xcc\xe9\x73\xb3\x9f\xb4\xe6\xf5\xd4\xb9\xcc\xcc\x7c\x6f\x59\xc7\xe3\xee\x80\xdd\x71\x04\xd9\x74\x8a\xd8\x62\x9a\x51\x90\xd8\xcd\xc7\x65\x91\x29\xdf\xef\x2c\x80\x28\x46\x3d\xf3\x7b\xd2\x1e\x4a\x7b\xa8\x91\x30\x59\xfb\x6c\xdd\x60\x3e\x4c\x4b\xf4\x65\x4c\xe2\x04\xa2\x9d\xdd\x61\x94\xd0\xd9\xde\xba\xc8\x74\x1c\x25\xbc\x02\xa5\xa8\xe2\xbf\xb6\xc1\x18\xd0\xeb\x5d\xbe\x3a\xbc\x4a\x60\xff\x15\x16\x1c\x7b\x48\x94\x4a\x90\x9b\xd2\x77\x99\x54\xb7\x59\xc9\x61\x08\xb6\xe9\xba\xf6\x74\x25\x9c\x29\xe8\x42\xa2\x87\x6e\xfb\xe3\x50\xe0\x09\x14\x19\xdc\xfe\xe2\x08\xaa\xa2\x34\x7e\x45\x16\x49\x4f\x29\xf1\x46\x71\x34\xb1\xea\x76\xbf\x99\xf7\x4c\x36\x1e\xc2\xae\x8a\x92\xc7\xa8\x67\x60\x9d\x5f\x37\x07\xeb\x61\xeb\x56\xfc\xd3\x6e\xd7\xf4\x60\xd8\x6d\x79\x3e\x22\xbb\xb6\xe5\x87\x47\x93\xde\xd0\x14\x67\xfa\xab\x2c\xb4\x18\x70\x56\x70\xb2\xf4\x5c\xe2\xdb\x32\x0a\x83\xd6\x32\x88\x57\x4e\xa6\x3e\x87\x75\x59\xe2\xcf\x4a\xed\x86\x5c\x1d\xc5\xb2\x34\xd8\x6c\x8a\x8f\xfd\xda\x79\xc0\xcc\x13\x28\xbe\xc3\x64\x0a\x96\x25\x8a\xb7\x44\x3a\x98\x22\x20\x3d\x8a\x0d\x46\x0b\x0f\x69\xc2\xec\x49\xd3\x94\xdc\x4b\xf1\x3e\x11\x37\x33\x07\x7c\x29\xa0\x43\xcd\x57\x9d\x31\xc4\x56\x48\x8a\x58\xcd\x51\x36\x1c\x46\xe0\x55\x78\xfa\x73\x65\xd3\x85\xeb\x9e\x2c\xf3\x18\xd6\xf1\x82\xff\x15\xd3\x4e\x45\xeb\x6b\x1c\x8b\xb6\xbb\x70\x61\x42\x2c\x5c\x84\xd0\x99\x79\xa6\xd7\xe2\xc5\x9b\xc0\xd0\xa0\x8b\x93\x41\xc6\xc0\x06\x79\x56\xf1\x55\x15\x0c\x85\x62\x14\xab\x3c\xb9\x11\x27\x6f\xda\x0a\x71\xef\xef\x61\x44\x08\x54\x6e\x47\x94\xfb\x17\x0b\xec\x03\x3e\x50\x64\xce\xeb\x4f\x96\x61\x3a\x87\xf3\xe9\x31\xa1\x65\xf7\x6f\x28\x53\x57\xa5\xb1\xad\xb2\xa5\xc0\x86\xd1\x93\xb8\x38\x06\x81\xe4\x1b\x8e\xb4\x71\xb2\xd8\x29\x6a\x25\x6f\x51\x95\xb5\x2c\x55\x8e\x56\x3a\xa4\xa7\x0b\x91\xaf\xa1\x7c\x02\x5c\x2f\x93\x75\x68\x88\x25\x45\x07\xa9\x63\xbc\xeb\x72\xec\xb1\x62\x2e\x2d\x5b\x3f\x2b\xd4\xe9\xe5\xe6\x04\x3b\xa6\xd1\x5d\xf4\x15\xd8\xb2\xd5\x04\x29\x26\xf5\x5c\x7c\xd5\x26\x8c\x85\x8e\x3a\x2a\xb8\x5e\x10\xf4\x73\xa1\x66\xe5\xbd\xce\x68\x4d\xec\xae\x11\x2b\x36\x1d\x92\xab\xe6\x25\x81\xc0\x33\xf3\x8c\xbb\x03\x9e\x9f\x56\x2c\xaf\x3c\x37\xad\xa0\x1a\x97\x31\x2b\x6f\x8e\xd5\xbb\x81\xad\x5c\x33\x91\x13\xc1\xd8\xb8\xda\x47\x18\xb6\x74\x5d\x36\x13\x7a\x37\x71\xfd\xb6\x61\xae\xee\x5e\x47\x21\x44\x7b\x91\x73\x90\xff\xc8\xb2\xdf\xac\xe7\x9a\x6d\xc3\xa9\xc3\x30\x0c\xcd\xed\x94\x83\x1d\x6f\x82\xec\x85\xa4\x6b\x79\xf6\x3e\xcb\xb4\x87\x3a\xb0\x2e\x08\x1b\xa2\xb0\x39\x0c\xed\xca\xf5\x67\x83\xb2\x77\xbd\x48\x98\xe1\xb7\x16\x6a\x5e\xcf\xaa\xb5\x52\xf5\x32\x57\x6e\x78\x1a\xe1\x2e\x93\xba\x4b\xd7\x75\xae\xb6\x87\x7f\xc6\x3d\x87\x00\xff\x1d\xf2\x7a\xd0\x11\x65\xa1\x8c\x1f\x24\x52\xdc\x3d\xce\x65\x23\x9e\x9e\x74\xfd\x22\x42\x6a\xc1\x27\x1e\x10\x9c\xf4\x75\x59\x2b\x41\x7c\x0b\xf8\x47\x81\x5a\x28\x8f\x53\x97\x35\xd1\x09\x6c\x69\xfc\x33\xd2\xa5\x36\x94\x4f\x3f\x13\x0b\x1d\xf3\xeb\xf4\x4b\xf1\x79\xb0\xf0\x1a\xf9\x05\xba\x9b\xf3\x80\x9f\x3d\x1b\xfa\xc9\xe7\x23\x7a\x8f\xe9\xc1\xfe\xfd\x17\x08\xdf\x56\x18\x07\x67\x8d\xd7\xbf\x2c\xa9\xdc\xcf\x4b\x66\xf7\xed\xf4\xfe\x3f\xbf\x3f\xfe\x85\x3d\x73\x08\x76\xd5\xda\x13\xfb\x51\x80\xbc\x37\xb6\xc7\xfc\xad\xa3\x25\x9b\x20\x78\x5c\xdc\xfb\xfe\x29\x89\xca\xca\xa8\x8e\x97\x14\xcb\x68\xfc\x17\xef\x9f\x01\x00\x00\xff\xff\xee\xa3\xa4\xa7\x4f\x15\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 5455, mode: os.FileMode(420), modTime: time.Unix(1467950433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

