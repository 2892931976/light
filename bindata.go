// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\xab\xbe\x49\x20\x7f\xa7\x28\xed\x6b\x86\x3c\x64\x4d\x8a\x19\x68\xd3\x35\xce\xb6\x87\x20\x08\x14\x99\x76\xb4\xc9\x92\x4b\xd2\xae\x03\x4d\xff\xfb\xee\x8e\x14\x4d\x3b\xf6\x92\xae\xcd\xb2\x02\x0b\x10\x98\x3c\x8a\xc7\xcf\xfd\xfa\xf0\x78\x70\x00\x27\xef\xe1\xec\xfd\x05\x9c\x9e\xf4\x2f\xe0\xe2\xc7\xfe\x00\xde\xf4\xdf\x9e\xc2\x8b\x10\x97\xfa\x1a\x0a\x05\x63\x51\x09\x99\x69\x31\x84\x9b\x3b\x98\x0a\xa9\x0a\xa5\x41\xd7\x75\x99\x80\xaa\x67\x32\x17\x30\x92\xf5\x04\x9a\x26\x1d\xf0\xb4\x6d\xd3\x70\x9a\xe5\xbf\x67\x63\x41\xc2\x9f\xcc\xb0\x6d\xc3\xb0\x98\x4c\x6b\xa9\x21\x0e\x83\xe8\xe6\x4e\x0b\x15\xe1\x40\x54\x79\x3d\x2c\xaa\xf1\xc1\x6f\xaa\xae\x48\x30\x9a\x68\xfa\x19\x17\xfa\x76\x76\x93\xe6\xf5\xe4\x60\x5c\xeb\x62\xaa\x0e\xca\x7a\x4c\x0b\x4a\xcb\xbc\xae\xe6\x76\x88\x3b\x49\x4d\xd3\xec\x83\xcc\x2a\x3c\x31\xed\xf3\x21\x0a\xcf\x43\x69\xda\xb6\xb4\x24\xaa\x21\xa0\xa0\x17\x86\xfa\x6e\x4a\xa8\x20\x3d\xcb\x26\x02\x65\x80\x3a\x66\xb9\x6e\x10\x9d\xa7\xe3\x9d\xd0\xb7\xf5\x50\xd1\x9e\x70\x34\xab\x72\x88\xff\x8f\x7b\x76\xba\x4d\x3d\x5f\x43\xdc\x34\x66\xd7\x4e\x91\xec\xcc\x35\x1c\x1e\x01\xda\x2c\xb3\x89\xa2\xb3\x8b\x11\xca\xe1\x0f\xa8\x04\xbc\x6c\xdb\x04\x37\x22\x16\x5a\xc0\x4f\xd3\x5f\x32\x89\x08\xcc\x78\x50\x16\xe4\x3a\x3b\xd1\xb4\x62\xc6\xce\x7f\x4d\x93\xa1\x19\x9e\x08\xa2\x34\xea\xbe\xba\x40\xbb\x68\x6c\x4d\xed\xc1\x26\x58\xe7\x42\xcf\x64\xf5\xbc\xb8\x9a\x30\x98\x67\x12\x84\xe4\xff\x5a\x86\xc1\xc7\x99\x90\x77\x09\x64\x72\xac\x08\x25\x67\x46\x7a\x26\x3e\xfd\x30\x1b\x8d\x84\x8c\x2f\xaf\x48\xd2\xb4\xbd\x04\x2e\xaf\x8a\x4a\x0b\x39\xca\x72\x9c\x63\xc8\x58\x93\xd2\x13\x0d\x26\x13\xfc\x10\xbe\x91\xd9\x78\x22\x2a\x4e\x04\x36\x37\x7d\x5d\x9b\x2c\x08\x70\x82\x99\x41\x53\xb2\x32\xb4\x09\x42\x2b\xac\xeb\x08\x22\xca\x65\x1c\xe2\x72\xe4\xe9\x44\x4f\x42\xe7\xca\x63\x44\x6b\x52\x6c\x1f\x50\x9f\xf8\x08\xe9\xe0\xc3\xdb\x7e\x05\x98\x4e\x94\xeb\x41\x30\xaa\x25\x5c\x27\x30\xa7\xcf\xcd\x7e\xd2\x9a\xd7\x53\xe7\x32\x33\xf3\xbd\x65\x1d\x8f\xbb\x03\x76\xc7\x11\x64\xd3\x29\x62\x8b\x69\x46\x41\x62\x37\x1f\x97\x45\xa6\x7c\xbf\xb3\x00\xa2\xd8\xe9\xd9\x7a\xcc\xfc\xde\xa6\x1e\x4a\x7b\x78\x20\x41\xb6\xe6\xdb\xb2\xc2\x74\x99\x96\xe8\xea\x98\xc4\x09\x44\x3b\xbb\xc3\x28\x21\x68\xde\xba\xc8\x74\x1c\x25\xbc\x02\xa5\xa8\xe2\xbf\x36\xd1\xd8\xd7\xeb\x5d\xbe\x3a\xbc\x4a\x60\xff\x15\xd6\x23\x3b\x50\x94\x4a\x90\x17\xd3\x77\x99\x54\xb7\x59\xc9\x51\x0a\xb6\xe9\xba\xf6\x74\x25\x9c\x48\xe8\x61\x62\x8f\x6e\xfb\xe3\x50\xe0\x09\x14\x38\xdc\xfe\xe2\x08\xaa\xa2\x34\x6e\x47\x92\x49\x4f\x29\x2f\x47\x71\x34\xb1\xea\x76\xff\x37\xef\x99\x64\x3d\x84\x5d\x15\x25\x8f\x51\xcf\xc0\x3a\xbf\x6e\x8e\xe5\xc3\xd6\xad\xf8\xa7\xdd\xae\xe9\x4b\xb3\xc2\x4b\xbe\x6d\xf9\xe1\xb1\xa8\x37\x34\xb5\x9b\xfe\x2a\x0b\x2d\x06\x9c\x15\x9c\x2c\x3d\x57\x17\xb6\xca\xc2\xa0\xb5\x04\xe3\x55\x9b\x29\xdf\x61\x5d\x96\xf8\xb3\x52\xda\x21\x17\x4f\xb1\xac\x1c\x36\x9b\xe2\x63\xbf\x76\x1e\x30\xf3\x04\x8a\xef\x30\x99\x82\x65\x05\xe3\x25\x92\x0e\xa6\x08\x48\x8f\x62\x83\xd1\xc2\x43\x16\x31\x7b\xd2\x34\x25\xf7\x52\xbc\x4f\xc4\xcd\xcc\x01\x5f\x0a\xe8\x50\xf3\x55\x67\x0c\x91\x19\x72\x26\x16\x7b\x94\x0d\x87\x11\x78\x04\x90\xfe\x5c\xd9\x74\x61\x5a\x20\xcb\x3c\x02\x76\xb4\xe1\x7f\xc5\xac\x54\xd1\xfa\x1a\x05\xa3\xed\x2e\x5c\x98\x10\x0b\x17\x21\x74\x66\x9e\xe9\xb5\x78\xf1\x26\x30\x2c\xe9\xe2\x64\x90\x31\xb0\x41\x9e\x55\x7c\x93\x05\x43\xa1\x18\xc5\x2a\x8d\x6e\xc4\xc9\x9b\xb6\x42\xdc\xfb\x7b\x18\x11\x02\x95\xdb\x11\xe5\xfe\xc5\x02\xdb\x84\x0f\x14\x99\xf3\xfa\x93\x65\x98\xce\xe1\x7c\x7a\x4c\x68\xd9\xfd\x1b\xca\xd4\x55\x69\x6c\xab\x6c\x29\xb0\x61\xf4\x24\x2e\x8e\x41\x20\xf9\x02\x24\x6d\x9c\x2c\x76\x8a\x5a\xc9\x5b\x54\x65\x2d\x4b\x95\xa3\x95\x0e\xe9\xe9\x42\xe4\x6b\x28\x9f\x00\xd7\xcb\x64\x1d\x1a\x62\x49\xd1\x41\xea\x18\xaf\xc2\x1c\x5b\xb0\x98\x4b\xcb\xd6\xcf\x0a\x75\x7a\xb9\x39\xc1\x86\x6a\x74\x17\x7d\x03\xb6\x6c\x35\x41\x8a\x49\x3d\x17\xdf\xb4\x09\x63\xa1\xa3\x8e\x0a\xae\x17\x04\xfd\x5c\xa8\x59\x79\xaf\x71\x5a\x13\xbb\x6b\xc4\x8a\x4d\x03\xe5\xaa\x79\x49\x20\xf0\xcc\x3c\xe3\xee\x80\xe7\xa7\x15\xcb\x2b\xcf\x4d\x2b\xa8\xc6\x65\xcc\xca\x93\x64\xf5\x6e\x60\x2b\xd7\x4c\xe4\x44\x30\x36\xae\xf6\x11\x86\x2d\x5d\x13\xce\x84\xde\x4d\x5c\x3b\x6e\x98\xab\xbb\xd7\x51\x08\xd1\x5e\xe4\x1c\xe4\xbf\xc1\xec\x37\xeb\xb9\x66\xbb\x74\xea\x30\x0c\x43\x73\x3b\xe5\x60\xc7\x9b\x20\x7b\x21\xe9\x5a\x9e\xbd\xcf\x32\xed\xa1\x0e\xac\x0b\xc2\x86\x28\x6c\x0e\x43\xbb\x72\xfd\xd9\xa0\xec\x5d\x2f\x12\x66\xf8\xad\x85\x9a\xd7\xb3\x6a\xad\x54\xbd\xcc\x95\x1b\x5e\x4e\xb8\xcb\xa4\xee\xd2\x75\x9d\xab\xed\xe1\x9f\x71\xcf\x21\xc0\x7f\x86\xbc\x1e\x74\x44\x89\x0f\x7b\x43\xb9\x48\x71\xf7\x38\x97\x8d\x78\x7a\xd2\xf5\x8b\x08\xa9\x05\x5f\x80\x40\x70\xd2\xd7\x65\xad\x04\xf1\x2d\xe0\x1f\x05\x6a\xa1\x3c\x4e\x5d\xd6\x44\x27\xb0\xa5\xf1\x65\xa4\x4b\x6d\x28\x9f\x7e\x26\x16\x3a\xe6\xc7\xeb\xd7\xe2\xf3\x60\xe1\x35\xf2\x0b\x74\x37\xe7\x01\x3f\x7b\x36\xf4\x93\xcf\x47\xf4\x1e\xd3\x83\xfd\xfb\x37\x10\xbe\xad\x30\x0e\xce\x1a\xaf\x7f\x5d\x52\xb9\x9f\x97\xcc\xee\xdb\xe9\xfd\x3f\x7e\x7f\xfc\x0b\x7b\xe6\x10\xec\xaa\xb5\x27\xf6\xa3\x00\x79\x6f\x6c\x8f\xf9\x5b\x47\x4b\x36\x41\xf0\xb8\xb8\xf7\xfd\x53\x12\x95\x95\x51\x1d\x2f\x29\x96\xd1\xf8\x2f\xde\x3f\x03\x00\x00\xff\xff\x62\x85\xb0\x5a\x6e\x15\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 5486, mode: os.FileMode(420), modTime: time.Unix(1464863774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

