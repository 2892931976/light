// Code generated by go-bindata.
// sources:
// template.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\xdf\x6f\xdb\x36\x10\x7e\xb6\xfe\x8a\xab\xd1\x16\xd2\xaa\x31\xcb\xf6\xd6\x21\x0f\x5d\xe2\x6e\x06\xda\xb4\x8b\x9d\xed\xa1\x28\x52\x59\xa6\x64\x6d\x12\xa9\x92\x54\xe6\xc0\xf0\xff\xbe\x3b\x52\xbf\x6c\xcb\x6b\x1a\xac\x03\xd6\x3c\xc4\x14\x75\xbc\xfb\xee\xbb\xef\x4e\x3c\x39\x81\x8b\x37\x70\xf9\x66\x0e\x93\x8b\xe9\x1c\xe6\xbf\x4c\x67\xf0\x72\xfa\x6a\x02\x8f\x3c\x7c\x35\x35\x90\x69\x48\xb9\xe0\x2a\x32\x7c\x09\x8b\x3b\x48\xe5\x22\x32\xb8\x69\xa4\xcc\x43\xd0\xb2\x52\x31\x87\x44\xc9\x02\x36\x1b\x36\xb3\x8f\xdb\x2d\xf3\xca\x28\xfe\x33\x4a\x39\x6d\xbe\x75\xcb\xed\xd6\xf3\xb2\xa2\x94\xca\x80\xef\x8d\xc6\x8b\x3b\xc3\xf5\x18\x17\x5c\xc4\x72\x99\x89\xf4\xe4\x0f\x2d\x05\x6d\x24\x85\xa1\x9f\x34\x33\xab\x6a\xc1\x62\x59\x9c\xa4\xd2\x64\xa5\x3e\xc9\x65\x8a\x2f\x36\x1b\x15\x09\xf4\xcc\xa6\xd6\x99\x46\xbf\xb8\xc7\xdc\x0f\x17\x4b\xc0\x55\xe0\x79\xe6\xae\xa4\xe8\xc0\x2e\xa3\x82\xe3\x1e\x68\xa3\xaa\xd8\x6c\x10\x45\xeb\xe1\x35\x37\x2b\xb9\xd4\x74\xc2\x4b\x2a\x11\x83\xff\x0d\x9e\x78\xdc\x1c\x09\x6c\x4a\x59\x2a\x22\x53\x29\xc4\x0f\x1b\x6f\x74\x1b\x29\x82\x3f\x5a\x54\x09\x80\xcd\x81\xfd\x54\x25\x09\x57\xb8\x17\xa9\x54\xc3\xbb\xf7\x99\x30\x5c\x25\x51\xcc\x31\xd6\x68\xc4\x95\x02\xc0\x7f\x12\x2d\x10\x56\x07\xff\xa5\x8a\xd2\x82\x0b\x97\x00\x6e\x67\x09\xb0\x73\x69\xf1\x03\xae\x31\x34\x3d\x51\x54\xb0\x79\x59\xb3\x91\x36\x85\x81\xe7\x67\xf0\x81\xa0\xe1\x1a\xdf\x7f\xa0\xfd\xd6\xed\x0b\x04\xe1\x4c\x6b\x9f\x53\x3d\x15\xf5\x86\x3b\x7d\x46\x54\x20\xe1\x9a\x5d\xf1\x32\x47\x9c\x3e\x6d\x87\x30\xf6\x9f\xe8\x60\x1c\x3a\xcb\x51\xcf\x86\x47\xc6\x1f\x87\x4f\xf4\x38\x84\x9c\x0b\x1f\x23\xff\x16\x29\xa4\x27\x78\x77\xfa\xfc\x7d\x08\xdf\x9e\x06\xee\x4c\x22\x15\xdc\xa0\x26\x08\x9f\x43\xd3\x98\x12\x73\xf6\xcf\x52\x74\x06\x51\x59\x62\x46\x3e\x3d\x85\x80\x7c\xfd\xf0\xbd\xaf\x83\xda\x4b\x83\x9d\xe7\x9a\x37\xb8\xd1\xcf\xb5\x58\x72\x95\x67\x82\x5b\x87\x21\x51\x4a\x71\x48\x34\xec\x75\xa4\xf4\x2a\xca\x3b\x64\xee\x14\x66\x4f\x56\x8f\xce\x40\x64\x79\x0b\x01\x55\xc4\x26\x54\x0f\x1f\x5f\xd6\x96\x23\xc5\xb1\xc4\xa2\x0f\x60\x10\xea\x6e\x80\x5e\x59\x7a\x4b\x54\x06\xfb\x5d\x65\x86\xcf\x2c\x83\x96\xdc\xe0\xa0\xc2\xdb\xae\xa8\xcd\xc2\x89\xab\x5c\xed\x4b\x88\x68\xcd\x3a\x4e\x2d\x2e\x4a\x06\x2d\x5b\x78\xe5\x0a\xeb\xf7\x78\xfc\x0c\xab\x16\x4b\x71\xcb\xa6\x46\x46\x7e\xf6\xec\x94\x48\x25\xcf\x1f\x2b\xae\xee\xc8\x07\x36\x17\x9b\x95\x08\xcc\x24\x3e\x21\xad\x41\x06\x21\x06\x66\x8c\x91\x42\x89\xa0\x0b\xbe\xa8\x52\xdf\x9e\x0a\xfa\x3b\x14\xbc\x36\xb3\xf9\xf0\x8f\xc0\xe6\xd4\x69\xe3\xa9\xd0\x5c\x99\x71\x4f\xcc\x17\x5c\x1b\x47\x09\xe5\xb5\xc4\xa7\x83\xe6\xe8\x64\xdb\x19\xb7\xb2\x7d\xab\xb2\x22\x33\xd9\x6d\xab\x02\xeb\xa2\x4d\x99\x9e\x06\x2a\xd2\x53\x0d\x85\x3d\x50\x0e\x62\xa0\xb6\xfd\x0c\x8f\x03\x35\x26\x59\x9d\x91\xe5\x7c\x8d\xc3\xee\x57\xa2\xe9\x4a\xfe\x55\xf7\x51\xc3\x11\x9b\xc5\x91\xb0\x4e\x2d\x63\x47\x04\x39\x20\xc7\x6e\xab\xd1\x4e\x7f\xaf\x2d\xc1\xae\x6e\xff\x99\x4e\x21\xcd\x20\xa5\xfd\x2e\xba\x16\x45\xd7\x47\xfb\xed\xf6\x6f\xb6\xd6\x30\xa7\xce\x8e\xfc\x79\xbb\x85\x54\x5c\xb7\xed\xde\x50\x3e\x59\xf3\x78\x8f\xee\x2f\x49\x30\x7c\x67\x11\xb4\x3c\xd7\xbb\x88\x8c\x61\xdd\xf5\x0b\xfc\x00\xc4\xf8\x7d\xf4\x5d\x9f\x37\xed\xec\x92\x80\x9d\x36\xb9\x2e\x97\xf8\x25\x75\x6d\x72\xff\xc4\x06\xf2\x3a\x4c\x6b\x20\xab\xe1\xa4\xf6\x73\x72\x58\x8e\x65\x34\x9c\xc7\x05\xcf\xf9\xd7\x90\xc7\xb9\xac\x44\x3d\xb5\x68\x5c\xdc\xac\x29\x83\x2b\xeb\x84\x0c\xac\xd5\xb6\xf9\x8e\xdf\xb3\xe5\x9f\xde\xac\xff\xd3\x64\x6f\xd6\xa1\x6d\x9b\xe1\x0c\x7f\xe6\xbd\xfc\x06\xa7\xf0\xc0\xd4\x38\x36\x83\x3f\x39\x30\x77\x26\xf0\x27\x07\xf0\x7d\xdc\xd5\xf3\xa1\x5b\x3d\x6c\xf8\x7e\x89\x6a\xd4\x65\x38\xc6\xdf\x91\xa1\xfb\xc0\x99\x3b\x38\x72\x87\x26\x6e\x6f\xe0\x6e\x8f\x71\x58\xdb\x1c\x7c\xc5\x5f\x65\xba\x56\x8b\xc2\xee\x69\xbb\xda\xac\x1d\xcf\xee\x46\xf0\xf9\x2d\xdd\xcd\xf6\xbe\x7c\x97\x1c\xef\xcd\x40\x81\xd8\x79\x2e\x35\xb7\x4d\x3a\xc2\xf9\x18\xd5\x93\xe4\xa0\x0f\xad\x5c\xe9\x3e\x64\x0f\x5d\xf2\xb5\xf1\x03\x17\x93\xa4\xb6\xdf\xbb\x93\x9c\x17\x8e\x73\xeb\xb3\xd3\x19\x3e\x85\xf0\x74\x6d\xc3\x7d\xad\x97\x13\xcb\xd0\x43\x6f\x20\x87\xf5\xfa\xdf\xdf\x2f\xb6\x9d\x56\x6b\x72\xd0\x93\x1f\xfc\xf8\x40\xf5\x76\xd3\xd7\xa9\xc9\x5e\x5b\x9a\x68\x5b\xaf\x59\xfd\x1d\x00\x00\xff\xff\x7f\xce\xaa\x7d\x5f\x0f\x00\x00")

func templateTxtBytes() ([]byte, error) {
	return bindataRead(
		_templateTxt,
		"template.txt",
	)
}

func templateTxt() (*asset, error) {
	bytes, err := templateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.txt", size: 3935, mode: os.FileMode(420), modTime: time.Unix(1468231369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.txt": templateTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.txt": &bintree{templateTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

